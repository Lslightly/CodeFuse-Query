

/**
 * A LocationDO load location from db
 */
schema LocationDO {
    @primary id: int,
    file_id: int,
    start: int,
    start_line: int,
    start_column: int,
    end: int,
    end_line: int,
    end_column: int
}

/**
 * A Location
 */
schema Location {
    @primary id: int,
    file_id: int,
    start: int,
    start_line: int,
    start_column: int,
    end: int,
    end_line: int,
    end_column: int
}
impl Location {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Location {
        for (location in LocationDO(db)) {
            yield Location {
                id: location.id,
                file_id : location.file_id,
                start : location.start,
                start_line : location.start_line,
                start_column : location.start_column,
                end : location.end,
                end_line : location.end_line,
                end_column : location.end_column
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the file.
     */
    pub fn getFile(self) -> File {
        for (file in File(__all_data__)) {
            if (self.file_id = file.id) {
                return file
            }
        }
    }
    
    /**
     * Gets the start.
     */
    pub fn getStart(self) -> int {
        return self.start
    }
    
    /**
     * Gets the startLine.
     */
    pub fn getStartLine(self) -> int {
        return self.start_line
    }
    
    /**
     * Gets the startColumn.
     */
    pub fn getStartColumn(self) -> int {
        return self.start_column
    }
    
    /**
     * Gets the end.
     */
    pub fn getEnd(self) -> int {
        return self.end
    }
    
    /**
     * Gets the endLine.
     */
    pub fn getEndLine(self) -> int {
        return self.end_line
    }
    
    /**
     * Gets the endColumn.
     */
    pub fn getEndColumn(self) -> int {
        return self.end_column
    }
    
}

/**
 * A TextDO load text from db
 */
schema TextDO {
    @primary id: int,
    text: string
}

/**
 * A Text
 */
schema Text {
    @primary id: int,
    text: string
}
impl Text {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Text {
        for (text in TextDO(db)) {
            yield Text {
                id: text.id,
                text : text.text
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the text.
     */
    pub fn getText(self) -> string {
        return self.text
    }
    
}

/**
 * A NumberOfLinesDO load number_of_lines from db
 */
schema NumberOfLinesDO {
    @primary id: int,
    lines: int,
    code_lines: int,
    comment_lines: int
}

/**
 * A NumberOfLines
 */
schema NumberOfLines {
    @primary id: int,
    lines: int,
    code_lines: int,
    comment_lines: int
}
impl NumberOfLines {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NumberOfLines {
        for (numberOfLines in NumberOfLinesDO(db)) {
            yield NumberOfLines {
                id: numberOfLines.id,
                lines : numberOfLines.lines,
                code_lines : numberOfLines.code_lines,
                comment_lines : numberOfLines.comment_lines
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the lines.
     */
    pub fn getLines(self) -> int {
        return self.lines
    }
    
    /**
     * Gets the codeLines.
     */
    pub fn getCodeLines(self) -> int {
        return self.code_lines
    }
    
    /**
     * Gets the commentLines.
     */
    pub fn getCommentLines(self) -> int {
        return self.comment_lines
    }
    
}

/**
 * A FileDO load file from db
 */
schema FileDO {
    @primary id: int,
    location_id: int,
    parent_id: int,
    name: string,
    extension: string,
    relative_path: string
}

/**
 * A File
 */
schema File {
    @primary id: int,
    location_id: int,
    parent_id: int,
    name: string,
    extension: string,
    relative_path: string
}
impl File {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *File {
        for (file in FileDO(db)) {
            yield File {
                id: file.id,
                location_id : file.location_id,
                parent_id : file.parent_id,
                name : file.name,
                extension : file.extension,
                relative_path : file.relative_path
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the location.
     */
    pub fn getLocation(self) -> Location {
        for (location in Location(__all_data__)) {
            if (self.location_id = location.id) {
                return location
            }
        }
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> Directory {
        for (directory in Directory(__all_data__)) {
            if (self.parent_id = directory.id) {
                return directory
            }
        }
    }
    
    /**
     * Gets the name.
     */
    pub fn getName(self) -> string {
        return self.name
    }
    
    /**
     * Gets the extension.
     */
    pub fn getExtension(self) -> string {
        return self.extension
    }
    
    /**
     * Gets the relativePath.
     */
    pub fn getRelativePath(self) -> string {
        return self.relative_path
    }
    
}

/**
 * A RootDirectoryDO load root_directory from db
 */
schema RootDirectoryDO {
    @primary id: int,
    relative_path: string
}

/**
 * A RootDirectory
 */
schema RootDirectory {
    @primary id: int,
    relative_path: string
}
impl RootDirectory {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *RootDirectory {
        for (rootDirectory in RootDirectoryDO(db)) {
            yield RootDirectory {
                id: rootDirectory.id,
                relative_path : rootDirectory.relative_path
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the relativePath.
     */
    pub fn getRelativePath(self) -> string {
        return self.relative_path
    }
    
}

/**
 * A NonRootDirectoryDO load non_root_directory from db
 */
schema NonRootDirectoryDO {
    @primary id: int,
    name: string,
    relative_path: string,
    parent_id: int
}

/**
 * A NonRootDirectory
 */
schema NonRootDirectory {
    @primary id: int,
    name: string,
    relative_path: string,
    parent_id: int
}
impl NonRootDirectory {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NonRootDirectory {
        for (nonRootDirectory in NonRootDirectoryDO(db)) {
            yield NonRootDirectory {
                id: nonRootDirectory.id,
                name : nonRootDirectory.name,
                relative_path : nonRootDirectory.relative_path,
                parent_id : nonRootDirectory.parent_id
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the name.
     */
    pub fn getName(self) -> string {
        return self.name
    }
    
    /**
     * Gets the relativePath.
     */
    pub fn getRelativePath(self) -> string {
        return self.relative_path
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> Directory {
        for (directory in Directory(__all_data__)) {
            if (self.parent_id = directory.id) {
                return directory
            }
        }
    }
    
}

/**
 * A AstNodeDO load ast_node from db
 */
schema AstNodeDO {
    @primary id: int,
    kind: int,
    parent_id: int,
    parent_kind: int,
    index: int,
    location_id: int
}

/**
 * A AstNode
 */
schema AstNode {
    @primary id: int,
    kind: int,
    parent_id: int,
    parent_kind: int,
    index: int,
    location_id: int
}
impl AstNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AstNode {
        for (astNode in AstNodeDO(db)) {
            yield AstNode {
                id: astNode.id,
                kind : astNode.kind,
                parent_id : astNode.parent_id,
                parent_kind : astNode.parent_kind,
                index : astNode.index,
                location_id : astNode.location_id
            }
        }
        for (topLevel in TopLevel(db)) {
            yield AstNode {
                id: topLevel.id,
                kind : topLevel.kind,
                parent_id : -1,  // TopLevel 无父节点，与index信息
                parent_kind : -1,
                index : -1,
                location_id : topLevel.location_id
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the kind.
     */
    pub fn getKind(self) -> int {
        return self.kind
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> AstNode {
        for (astNode in AstNode(__all_data__)) {
            if (self.parent_id = astNode.id) {
                return astNode
            }
        }
    }
    
    /**
     * Gets the parentKind.
     */
    pub fn getParentKind(self) -> int {
        return self.parent_kind
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Gets the location.
     */
    pub fn getLocation(self) -> Location {
        for (location in Location(__all_data__)) {
            if (self.location_id = location.id) {
                return location
            }
        }
    }
    
    /**
     * Get the real kind name.
     */
    pub fn getKindName(self) -> string {
        return getRealKind(self.getKind())
    }
    
    /**
     * Get the real kind name.
     */
    pub fn getParentKindName(self) -> string {
        return getRealKind(self.getParentKind())
    }
    
    /**
     * Get the symbol.
     */
    pub fn getSymbol(self) -> Symbol {
        for (astNodeSymbol in AstNodeSymbol(__all_data__)) {
            if (astNodeSymbol.ast_node_id = self.id) {
                return astNodeSymbol.getSymbol()
            }
        }
    }
    
    /**
     * Get the type.
     */
    pub fn getType(self) -> Type {
        for (astNodeType in AstNodeType(__all_data__)) {
            if (astNodeType.ast_node_id = self.id) {
                return astNodeType.getType()
            }
        }
    }
    
    /**
     * Get the comment.
     */
    pub fn getComment(self) -> *Comment {
        for (astNodeComment in AstNodeComment(__all_data__)) {
            if (astNodeComment.ast_node_id = self.id) {
                yield astNodeComment.getComment()
            }
        }
    }
    
}

/**
 * A DotTokenDO load dot_token from db
 */
schema DotTokenDO {
    @primary id: int,
}

/**
 * A DotToken
 */
schema DotToken extends AstNode {
}
impl DotToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DotToken {
        for (fa in AstNode(db)) {
            for (son in DotTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield DotToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A DotDotDotTokenDO load dot_dot_dot_token from db
 */
schema DotDotDotTokenDO {
    @primary id: int,
}

/**
 * A DotDotDotToken
 */
schema DotDotDotToken extends AstNode {
}
impl DotDotDotToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DotDotDotToken {
        for (fa in AstNode(db)) {
            for (son in DotDotDotTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield DotDotDotToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A CommaTokenDO load comma_token from db
 */
schema CommaTokenDO {
    @primary id: int,
}

/**
 * A CommaToken
 */
schema CommaToken extends AstNode {
}
impl CommaToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CommaToken {
        for (fa in AstNode(db)) {
            for (son in CommaTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield CommaToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A QuestionDotTokenDO load question_dot_token from db
 */
schema QuestionDotTokenDO {
    @primary id: int,
}

/**
 * A QuestionDotToken
 */
schema QuestionDotToken extends AstNode {
}
impl QuestionDotToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *QuestionDotToken {
        for (fa in AstNode(db)) {
            for (son in QuestionDotTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield QuestionDotToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A LessThanTokenDO load less_than_token from db
 */
schema LessThanTokenDO {
    @primary id: int,
}

/**
 * A LessThanToken
 */
schema LessThanToken extends AstNode {
}
impl LessThanToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LessThanToken {
        for (fa in AstNode(db)) {
            for (son in LessThanTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield LessThanToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A GreaterThanTokenDO load greater_than_token from db
 */
schema GreaterThanTokenDO {
    @primary id: int,
}

/**
 * A GreaterThanToken
 */
schema GreaterThanToken extends AstNode {
}
impl GreaterThanToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *GreaterThanToken {
        for (fa in AstNode(db)) {
            for (son in GreaterThanTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield GreaterThanToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A LessThanEqualsTokenDO load less_than_equals_token from db
 */
schema LessThanEqualsTokenDO {
    @primary id: int,
}

/**
 * A LessThanEqualsToken
 */
schema LessThanEqualsToken extends AstNode {
}
impl LessThanEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LessThanEqualsToken {
        for (fa in AstNode(db)) {
            for (son in LessThanEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield LessThanEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A GreaterThanEqualsTokenDO load greater_than_equals_token from db
 */
schema GreaterThanEqualsTokenDO {
    @primary id: int,
}

/**
 * A GreaterThanEqualsToken
 */
schema GreaterThanEqualsToken extends AstNode {
}
impl GreaterThanEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *GreaterThanEqualsToken {
        for (fa in AstNode(db)) {
            for (son in GreaterThanEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield GreaterThanEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A EqualsEqualsTokenDO load equals_equals_token from db
 */
schema EqualsEqualsTokenDO {
    @primary id: int,
}

/**
 * A EqualsEqualsToken
 */
schema EqualsEqualsToken extends AstNode {
}
impl EqualsEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EqualsEqualsToken {
        for (fa in AstNode(db)) {
            for (son in EqualsEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield EqualsEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ExclamationEqualsTokenDO load exclamation_equals_token from db
 */
schema ExclamationEqualsTokenDO {
    @primary id: int,
}

/**
 * A ExclamationEqualsToken
 */
schema ExclamationEqualsToken extends AstNode {
}
impl ExclamationEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExclamationEqualsToken {
        for (fa in AstNode(db)) {
            for (son in ExclamationEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExclamationEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A EqualsEqualsEqualsTokenDO load equals_equals_equals_token from db
 */
schema EqualsEqualsEqualsTokenDO {
    @primary id: int,
}

/**
 * A EqualsEqualsEqualsToken
 */
schema EqualsEqualsEqualsToken extends AstNode {
}
impl EqualsEqualsEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EqualsEqualsEqualsToken {
        for (fa in AstNode(db)) {
            for (son in EqualsEqualsEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield EqualsEqualsEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ExclamationEqualsEqualsTokenDO load exclamation_equals_equals_token from db
 */
schema ExclamationEqualsEqualsTokenDO {
    @primary id: int,
}

/**
 * A ExclamationEqualsEqualsToken
 */
schema ExclamationEqualsEqualsToken extends AstNode {
}
impl ExclamationEqualsEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExclamationEqualsEqualsToken {
        for (fa in AstNode(db)) {
            for (son in ExclamationEqualsEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExclamationEqualsEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A EqualsGreaterThanTokenDO load equals_greater_than_token from db
 */
schema EqualsGreaterThanTokenDO {
    @primary id: int,
}

/**
 * A EqualsGreaterThanToken
 */
schema EqualsGreaterThanToken extends AstNode {
}
impl EqualsGreaterThanToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EqualsGreaterThanToken {
        for (fa in AstNode(db)) {
            for (son in EqualsGreaterThanTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield EqualsGreaterThanToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A PlusTokenDO load plus_token from db
 */
schema PlusTokenDO {
    @primary id: int,
}

/**
 * A PlusToken
 */
schema PlusToken extends AstNode {
}
impl PlusToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PlusToken {
        for (fa in AstNode(db)) {
            for (son in PlusTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield PlusToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A MinusTokenDO load minus_token from db
 */
schema MinusTokenDO {
    @primary id: int,
}

/**
 * A MinusToken
 */
schema MinusToken extends AstNode {
}
impl MinusToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MinusToken {
        for (fa in AstNode(db)) {
            for (son in MinusTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield MinusToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AsteriskTokenDO load asterisk_token from db
 */
schema AsteriskTokenDO {
    @primary id: int,
}

/**
 * A AsteriskToken
 */
schema AsteriskToken extends AstNode {
}
impl AsteriskToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AsteriskToken {
        for (fa in AstNode(db)) {
            for (son in AsteriskTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield AsteriskToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AsteriskAsteriskTokenDO load asterisk_asterisk_token from db
 */
schema AsteriskAsteriskTokenDO {
    @primary id: int,
}

/**
 * A AsteriskAsteriskToken
 */
schema AsteriskAsteriskToken extends AstNode {
}
impl AsteriskAsteriskToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AsteriskAsteriskToken {
        for (fa in AstNode(db)) {
            for (son in AsteriskAsteriskTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield AsteriskAsteriskToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A SlashTokenDO load slash_token from db
 */
schema SlashTokenDO {
    @primary id: int,
}

/**
 * A SlashToken
 */
schema SlashToken extends AstNode {
}
impl SlashToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SlashToken {
        for (fa in AstNode(db)) {
            for (son in SlashTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield SlashToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A PercentTokenDO load percent_token from db
 */
schema PercentTokenDO {
    @primary id: int,
}

/**
 * A PercentToken
 */
schema PercentToken extends AstNode {
}
impl PercentToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PercentToken {
        for (fa in AstNode(db)) {
            for (son in PercentTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield PercentToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A PlusPlusTokenDO load plus_plus_token from db
 */
schema PlusPlusTokenDO {
    @primary id: int,
}

/**
 * A PlusPlusToken
 */
schema PlusPlusToken extends AstNode {
}
impl PlusPlusToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PlusPlusToken {
        for (fa in AstNode(db)) {
            for (son in PlusPlusTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield PlusPlusToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A MinusMinusTokenDO load minus_minus_token from db
 */
schema MinusMinusTokenDO {
    @primary id: int,
}

/**
 * A MinusMinusToken
 */
schema MinusMinusToken extends AstNode {
}
impl MinusMinusToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MinusMinusToken {
        for (fa in AstNode(db)) {
            for (son in MinusMinusTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield MinusMinusToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A LessThanLessThanTokenDO load less_than_less_than_token from db
 */
schema LessThanLessThanTokenDO {
    @primary id: int,
}

/**
 * A LessThanLessThanToken
 */
schema LessThanLessThanToken extends AstNode {
}
impl LessThanLessThanToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LessThanLessThanToken {
        for (fa in AstNode(db)) {
            for (son in LessThanLessThanTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield LessThanLessThanToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A GreaterThanGreaterThanTokenDO load greater_than_greater_than_token from db
 */
schema GreaterThanGreaterThanTokenDO {
    @primary id: int,
}

/**
 * A GreaterThanGreaterThanToken
 */
schema GreaterThanGreaterThanToken extends AstNode {
}
impl GreaterThanGreaterThanToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *GreaterThanGreaterThanToken {
        for (fa in AstNode(db)) {
            for (son in GreaterThanGreaterThanTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield GreaterThanGreaterThanToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A GreaterThanGreaterThanGreaterThanTokenDO load greater_than_greater_than_greater_than_token from db
 */
schema GreaterThanGreaterThanGreaterThanTokenDO {
    @primary id: int,
}

/**
 * A GreaterThanGreaterThanGreaterThanToken
 */
schema GreaterThanGreaterThanGreaterThanToken extends AstNode {
}
impl GreaterThanGreaterThanGreaterThanToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *GreaterThanGreaterThanGreaterThanToken {
        for (fa in AstNode(db)) {
            for (son in GreaterThanGreaterThanGreaterThanTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield GreaterThanGreaterThanGreaterThanToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AmpersandTokenDO load ampersand_token from db
 */
schema AmpersandTokenDO {
    @primary id: int,
}

/**
 * A AmpersandToken
 */
schema AmpersandToken extends AstNode {
}
impl AmpersandToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AmpersandToken {
        for (fa in AstNode(db)) {
            for (son in AmpersandTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield AmpersandToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A BarTokenDO load bar_token from db
 */
schema BarTokenDO {
    @primary id: int,
}

/**
 * A BarToken
 */
schema BarToken extends AstNode {
}
impl BarToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BarToken {
        for (fa in AstNode(db)) {
            for (son in BarTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield BarToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A CaretTokenDO load caret_token from db
 */
schema CaretTokenDO {
    @primary id: int,
}

/**
 * A CaretToken
 */
schema CaretToken extends AstNode {
}
impl CaretToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CaretToken {
        for (fa in AstNode(db)) {
            for (son in CaretTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield CaretToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ExclamationTokenDO load exclamation_token from db
 */
schema ExclamationTokenDO {
    @primary id: int,
}

/**
 * A ExclamationToken
 */
schema ExclamationToken extends AstNode {
}
impl ExclamationToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExclamationToken {
        for (fa in AstNode(db)) {
            for (son in ExclamationTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExclamationToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A TildeTokenDO load tilde_token from db
 */
schema TildeTokenDO {
    @primary id: int,
}

/**
 * A TildeToken
 */
schema TildeToken extends AstNode {
}
impl TildeToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TildeToken {
        for (fa in AstNode(db)) {
            for (son in TildeTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield TildeToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AmpersandAmpersandTokenDO load ampersand_ampersand_token from db
 */
schema AmpersandAmpersandTokenDO {
    @primary id: int,
}

/**
 * A AmpersandAmpersandToken
 */
schema AmpersandAmpersandToken extends AstNode {
}
impl AmpersandAmpersandToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AmpersandAmpersandToken {
        for (fa in AstNode(db)) {
            for (son in AmpersandAmpersandTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield AmpersandAmpersandToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A BarBarTokenDO load bar_bar_token from db
 */
schema BarBarTokenDO {
    @primary id: int,
}

/**
 * A BarBarToken
 */
schema BarBarToken extends AstNode {
}
impl BarBarToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BarBarToken {
        for (fa in AstNode(db)) {
            for (son in BarBarTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield BarBarToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A QuestionTokenDO load question_token from db
 */
schema QuestionTokenDO {
    @primary id: int,
}

/**
 * A QuestionToken
 */
schema QuestionToken extends AstNode {
}
impl QuestionToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *QuestionToken {
        for (fa in AstNode(db)) {
            for (son in QuestionTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield QuestionToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ColonTokenDO load colon_token from db
 */
schema ColonTokenDO {
    @primary id: int,
}

/**
 * A ColonToken
 */
schema ColonToken extends AstNode {
}
impl ColonToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ColonToken {
        for (fa in AstNode(db)) {
            for (son in ColonTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield ColonToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A QuestionQuestionTokenDO load question_question_token from db
 */
schema QuestionQuestionTokenDO {
    @primary id: int,
}

/**
 * A QuestionQuestionToken
 */
schema QuestionQuestionToken extends AstNode {
}
impl QuestionQuestionToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *QuestionQuestionToken {
        for (fa in AstNode(db)) {
            for (son in QuestionQuestionTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield QuestionQuestionToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A EqualsTokenDO load equals_token from db
 */
schema EqualsTokenDO {
    @primary id: int,
}

/**
 * A EqualsToken
 */
schema EqualsToken extends AstNode {
}
impl EqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EqualsToken {
        for (fa in AstNode(db)) {
            for (son in EqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield EqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A PlusEqualsTokenDO load plus_equals_token from db
 */
schema PlusEqualsTokenDO {
    @primary id: int,
}

/**
 * A PlusEqualsToken
 */
schema PlusEqualsToken extends AstNode {
}
impl PlusEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PlusEqualsToken {
        for (fa in AstNode(db)) {
            for (son in PlusEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield PlusEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A MinusEqualsTokenDO load minus_equals_token from db
 */
schema MinusEqualsTokenDO {
    @primary id: int,
}

/**
 * A MinusEqualsToken
 */
schema MinusEqualsToken extends AstNode {
}
impl MinusEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MinusEqualsToken {
        for (fa in AstNode(db)) {
            for (son in MinusEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield MinusEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AsteriskEqualsTokenDO load asterisk_equals_token from db
 */
schema AsteriskEqualsTokenDO {
    @primary id: int,
}

/**
 * A AsteriskEqualsToken
 */
schema AsteriskEqualsToken extends AstNode {
}
impl AsteriskEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AsteriskEqualsToken {
        for (fa in AstNode(db)) {
            for (son in AsteriskEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield AsteriskEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AsteriskAsteriskEqualsTokenDO load asterisk_asterisk_equals_token from db
 */
schema AsteriskAsteriskEqualsTokenDO {
    @primary id: int,
}

/**
 * A AsteriskAsteriskEqualsToken
 */
schema AsteriskAsteriskEqualsToken extends AstNode {
}
impl AsteriskAsteriskEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AsteriskAsteriskEqualsToken {
        for (fa in AstNode(db)) {
            for (son in AsteriskAsteriskEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield AsteriskAsteriskEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A SlashEqualsTokenDO load slash_equals_token from db
 */
schema SlashEqualsTokenDO {
    @primary id: int,
}

/**
 * A SlashEqualsToken
 */
schema SlashEqualsToken extends AstNode {
}
impl SlashEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SlashEqualsToken {
        for (fa in AstNode(db)) {
            for (son in SlashEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield SlashEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A PercentEqualsTokenDO load percent_equals_token from db
 */
schema PercentEqualsTokenDO {
    @primary id: int,
}

/**
 * A PercentEqualsToken
 */
schema PercentEqualsToken extends AstNode {
}
impl PercentEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PercentEqualsToken {
        for (fa in AstNode(db)) {
            for (son in PercentEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield PercentEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A LessThanLessThanEqualsTokenDO load less_than_less_than_equals_token from db
 */
schema LessThanLessThanEqualsTokenDO {
    @primary id: int,
}

/**
 * A LessThanLessThanEqualsToken
 */
schema LessThanLessThanEqualsToken extends AstNode {
}
impl LessThanLessThanEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LessThanLessThanEqualsToken {
        for (fa in AstNode(db)) {
            for (son in LessThanLessThanEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield LessThanLessThanEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A GreaterThanGreaterThanEqualsTokenDO load greater_than_greater_than_equals_token from db
 */
schema GreaterThanGreaterThanEqualsTokenDO {
    @primary id: int,
}

/**
 * A GreaterThanGreaterThanEqualsToken
 */
schema GreaterThanGreaterThanEqualsToken extends AstNode {
}
impl GreaterThanGreaterThanEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *GreaterThanGreaterThanEqualsToken {
        for (fa in AstNode(db)) {
            for (son in GreaterThanGreaterThanEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield GreaterThanGreaterThanEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A GreaterThanGreaterThanGreaterThanEqualsTokenDO load greater_than_greater_than_greater_than_equals_token from db
 */
schema GreaterThanGreaterThanGreaterThanEqualsTokenDO {
    @primary id: int,
}

/**
 * A GreaterThanGreaterThanGreaterThanEqualsToken
 */
schema GreaterThanGreaterThanGreaterThanEqualsToken extends AstNode {
}
impl GreaterThanGreaterThanGreaterThanEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *GreaterThanGreaterThanGreaterThanEqualsToken {
        for (fa in AstNode(db)) {
            for (son in GreaterThanGreaterThanGreaterThanEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield GreaterThanGreaterThanGreaterThanEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AmpersandEqualsTokenDO load ampersand_equals_token from db
 */
schema AmpersandEqualsTokenDO {
    @primary id: int,
}

/**
 * A AmpersandEqualsToken
 */
schema AmpersandEqualsToken extends AstNode {
}
impl AmpersandEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AmpersandEqualsToken {
        for (fa in AstNode(db)) {
            for (son in AmpersandEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield AmpersandEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A BarEqualsTokenDO load bar_equals_token from db
 */
schema BarEqualsTokenDO {
    @primary id: int,
}

/**
 * A BarEqualsToken
 */
schema BarEqualsToken extends AstNode {
}
impl BarEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BarEqualsToken {
        for (fa in AstNode(db)) {
            for (son in BarEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield BarEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A BarBarEqualsTokenDO load bar_bar_equals_token from db
 */
schema BarBarEqualsTokenDO {
    @primary id: int,
}

/**
 * A BarBarEqualsToken
 */
schema BarBarEqualsToken extends AstNode {
}
impl BarBarEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BarBarEqualsToken {
        for (fa in AstNode(db)) {
            for (son in BarBarEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield BarBarEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AmpersandAmpersandEqualsTokenDO load ampersand_ampersand_equals_token from db
 */
schema AmpersandAmpersandEqualsTokenDO {
    @primary id: int,
}

/**
 * A AmpersandAmpersandEqualsToken
 */
schema AmpersandAmpersandEqualsToken extends AstNode {
}
impl AmpersandAmpersandEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AmpersandAmpersandEqualsToken {
        for (fa in AstNode(db)) {
            for (son in AmpersandAmpersandEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield AmpersandAmpersandEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A QuestionQuestionEqualsTokenDO load question_question_equals_token from db
 */
schema QuestionQuestionEqualsTokenDO {
    @primary id: int,
}

/**
 * A QuestionQuestionEqualsToken
 */
schema QuestionQuestionEqualsToken extends AstNode {
}
impl QuestionQuestionEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *QuestionQuestionEqualsToken {
        for (fa in AstNode(db)) {
            for (son in QuestionQuestionEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield QuestionQuestionEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A CaretEqualsTokenDO load caret_equals_token from db
 */
schema CaretEqualsTokenDO {
    @primary id: int,
}

/**
 * A CaretEqualsToken
 */
schema CaretEqualsToken extends AstNode {
}
impl CaretEqualsToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CaretEqualsToken {
        for (fa in AstNode(db)) {
            for (son in CaretEqualsTokenDO(db)) {
                if (son.key_eq(fa)) {
                    yield CaretEqualsToken {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ConstKeywordDO load const_keyword from db
 */
schema ConstKeywordDO {
    @primary id: int,
}

/**
 * A ConstKeyword
 */
schema ConstKeyword extends AstNode {
}
impl ConstKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ConstKeyword {
        for (fa in AstNode(db)) {
            for (son in ConstKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield ConstKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A DefaultKeywordDO load default_keyword from db
 */
schema DefaultKeywordDO {
    @primary id: int,
}

/**
 * A DefaultKeyword
 */
schema DefaultKeyword extends AstNode {
}
impl DefaultKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DefaultKeyword {
        for (fa in AstNode(db)) {
            for (son in DefaultKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield DefaultKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ExportKeywordDO load export_keyword from db
 */
schema ExportKeywordDO {
    @primary id: int,
}

/**
 * A ExportKeyword
 */
schema ExportKeyword extends AstNode {
}
impl ExportKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExportKeyword {
        for (fa in AstNode(db)) {
            for (son in ExportKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExportKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ExtendsKeywordDO load extends_keyword from db
 */
schema ExtendsKeywordDO {
    @primary id: int,
}

/**
 * A ExtendsKeyword
 */
schema ExtendsKeyword extends AstNode {
}
impl ExtendsKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExtendsKeyword {
        for (fa in AstNode(db)) {
            for (son in ExtendsKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExtendsKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ImportKeywordDO load import_keyword from db
 */
schema ImportKeywordDO {
    @primary id: int,
}

/**
 * A ImportKeyword
 */
schema ImportKeyword extends AstNode {
}
impl ImportKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportKeyword {
        for (fa in AstNode(db)) {
            for (son in ImportKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield ImportKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A InKeywordDO load in_keyword from db
 */
schema InKeywordDO {
    @primary id: int,
}

/**
 * A InKeyword
 */
schema InKeyword extends AstNode {
}
impl InKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *InKeyword {
        for (fa in AstNode(db)) {
            for (son in InKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield InKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A InstanceOfKeywordDO load instance_of_keyword from db
 */
schema InstanceOfKeywordDO {
    @primary id: int,
}

/**
 * A InstanceOfKeyword
 */
schema InstanceOfKeyword extends AstNode {
}
impl InstanceOfKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *InstanceOfKeyword {
        for (fa in AstNode(db)) {
            for (son in InstanceOfKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield InstanceOfKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A NewKeywordDO load new_keyword from db
 */
schema NewKeywordDO {
    @primary id: int,
}

/**
 * A NewKeyword
 */
schema NewKeyword extends AstNode {
}
impl NewKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NewKeyword {
        for (fa in AstNode(db)) {
            for (son in NewKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield NewKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ImplementsKeywordDO load implements_keyword from db
 */
schema ImplementsKeywordDO {
    @primary id: int,
}

/**
 * A ImplementsKeyword
 */
schema ImplementsKeyword extends AstNode {
}
impl ImplementsKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImplementsKeyword {
        for (fa in AstNode(db)) {
            for (son in ImplementsKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield ImplementsKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A PrivateKeywordDO load private_keyword from db
 */
schema PrivateKeywordDO {
    @primary id: int,
}

/**
 * A PrivateKeyword
 */
schema PrivateKeyword extends AstNode {
}
impl PrivateKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PrivateKeyword {
        for (fa in AstNode(db)) {
            for (son in PrivateKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield PrivateKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ProtectedKeywordDO load protected_keyword from db
 */
schema ProtectedKeywordDO {
    @primary id: int,
}

/**
 * A ProtectedKeyword
 */
schema ProtectedKeyword extends AstNode {
}
impl ProtectedKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ProtectedKeyword {
        for (fa in AstNode(db)) {
            for (son in ProtectedKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield ProtectedKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A PublicKeywordDO load public_keyword from db
 */
schema PublicKeywordDO {
    @primary id: int,
}

/**
 * A PublicKeyword
 */
schema PublicKeyword extends AstNode {
}
impl PublicKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PublicKeyword {
        for (fa in AstNode(db)) {
            for (son in PublicKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield PublicKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A StaticKeywordDO load static_keyword from db
 */
schema StaticKeywordDO {
    @primary id: int,
}

/**
 * A StaticKeyword
 */
schema StaticKeyword extends AstNode {
}
impl StaticKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *StaticKeyword {
        for (fa in AstNode(db)) {
            for (son in StaticKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield StaticKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AbstractKeywordDO load abstract_keyword from db
 */
schema AbstractKeywordDO {
    @primary id: int,
}

/**
 * A AbstractKeyword
 */
schema AbstractKeyword extends AstNode {
}
impl AbstractKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AbstractKeyword {
        for (fa in AstNode(db)) {
            for (son in AbstractKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield AbstractKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AccessorKeywordDO load accessor_keyword from db
 */
schema AccessorKeywordDO {
    @primary id: int,
}

/**
 * A AccessorKeyword
 */
schema AccessorKeyword extends AstNode {
}
impl AccessorKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AccessorKeyword {
        for (fa in AstNode(db)) {
            for (son in AccessorKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield AccessorKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AssertsKeywordDO load asserts_keyword from db
 */
schema AssertsKeywordDO {
    @primary id: int,
}

/**
 * A AssertsKeyword
 */
schema AssertsKeyword extends AstNode {
}
impl AssertsKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AssertsKeyword {
        for (fa in AstNode(db)) {
            for (son in AssertsKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield AssertsKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AssertKeywordDO load assert_keyword from db
 */
schema AssertKeywordDO {
    @primary id: int,
}

/**
 * A AssertKeyword
 */
schema AssertKeyword extends AstNode {
}
impl AssertKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AssertKeyword {
        for (fa in AstNode(db)) {
            for (son in AssertKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield AssertKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AsyncKeywordDO load async_keyword from db
 */
schema AsyncKeywordDO {
    @primary id: int,
}

/**
 * A AsyncKeyword
 */
schema AsyncKeyword extends AstNode {
}
impl AsyncKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AsyncKeyword {
        for (fa in AstNode(db)) {
            for (son in AsyncKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield AsyncKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AwaitKeywordDO load await_keyword from db
 */
schema AwaitKeywordDO {
    @primary id: int,
}

/**
 * A AwaitKeyword
 */
schema AwaitKeyword extends AstNode {
}
impl AwaitKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AwaitKeyword {
        for (fa in AstNode(db)) {
            for (son in AwaitKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield AwaitKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A DeclareKeywordDO load declare_keyword from db
 */
schema DeclareKeywordDO {
    @primary id: int,
}

/**
 * A DeclareKeyword
 */
schema DeclareKeyword extends AstNode {
}
impl DeclareKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DeclareKeyword {
        for (fa in AstNode(db)) {
            for (son in DeclareKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield DeclareKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A KeyOfKeywordDO load key_of_keyword from db
 */
schema KeyOfKeywordDO {
    @primary id: int,
}

/**
 * A KeyOfKeyword
 */
schema KeyOfKeyword extends AstNode {
}
impl KeyOfKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *KeyOfKeyword {
        for (fa in AstNode(db)) {
            for (son in KeyOfKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield KeyOfKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A OutKeywordDO load out_keyword from db
 */
schema OutKeywordDO {
    @primary id: int,
}

/**
 * A OutKeyword
 */
schema OutKeyword extends AstNode {
}
impl OutKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *OutKeyword {
        for (fa in AstNode(db)) {
            for (son in OutKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield OutKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ReadonlyKeywordDO load readonly_keyword from db
 */
schema ReadonlyKeywordDO {
    @primary id: int,
}

/**
 * A ReadonlyKeyword
 */
schema ReadonlyKeyword extends AstNode {
}
impl ReadonlyKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ReadonlyKeyword {
        for (fa in AstNode(db)) {
            for (son in ReadonlyKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield ReadonlyKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A UniqueKeywordDO load unique_keyword from db
 */
schema UniqueKeywordDO {
    @primary id: int,
}

/**
 * A UniqueKeyword
 */
schema UniqueKeyword extends AstNode {
}
impl UniqueKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *UniqueKeyword {
        for (fa in AstNode(db)) {
            for (son in UniqueKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield UniqueKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A OverrideKeywordDO load override_keyword from db
 */
schema OverrideKeywordDO {
    @primary id: int,
}

/**
 * A OverrideKeyword
 */
schema OverrideKeyword extends AstNode {
}
impl OverrideKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *OverrideKeyword {
        for (fa in AstNode(db)) {
            for (son in OverrideKeywordDO(db)) {
                if (son.key_eq(fa)) {
                    yield OverrideKeyword {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A DeclarationDO load declaration from db
 */
schema DeclarationDO {
    @primary id: int,
    kind: int
}

/**
 * A Declaration
 */
schema Declaration extends AstNode {
}
impl Declaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Declaration {
        for (fa in AstNode(db)) {
            for (son in DeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield Declaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> DeclarationName {
        for (declarationNameNode in DeclarationNameNode(__all_data__)) {
            if (declarationNameNode.declaration_id = self.id) {
                return declarationNameNode.getNameNode()
            }
        }
    }
    
}

/**
 * A DeclarationNameNodeDO load declaration_name_node from db
 */
schema DeclarationNameNodeDO {
    @primary declaration_id: int,
    name_node_id: int
}

/**
 * A DeclarationNameNode
 */
schema DeclarationNameNode {
    @primary declaration_id: int,
    name_node_id: int
}
impl DeclarationNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DeclarationNameNode {
        for (declarationNameNode in DeclarationNameNodeDO(db)) {
            yield DeclarationNameNode {
                declaration_id: declarationNameNode.declaration_id,
                name_node_id : declarationNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the declaration.
     */
    pub fn getDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.declaration_id = declaration.id) {
                return declaration
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> DeclarationName {
        for (declarationName in DeclarationName(__all_data__)) {
            if (self.name_node_id = declarationName.id) {
                return declarationName
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.declaration_id
    }
    
}

/**
 * A ExpressionDO load expression from db
 */
schema ExpressionDO {
    @primary id: int,
    kind: int
}

/**
 * A Expression
 */
schema Expression extends AstNode {
}
impl Expression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Expression {
        for (fa in AstNode(db)) {
            for (son in ExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield Expression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A UnaryExpressionDO load unary_expression from db
 */
schema UnaryExpressionDO {
    @primary id: int,
    kind: int
}

/**
 * A UnaryExpression
 */
schema UnaryExpression extends Expression {
}
impl UnaryExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *UnaryExpression {
        for (fa in Expression(db)) {
            for (son in UnaryExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield UnaryExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A UpdateExpressionDO load update_expression from db
 */
schema UpdateExpressionDO {
    @primary id: int,
    kind: int
}

/**
 * A UpdateExpression
 */
schema UpdateExpression extends UnaryExpression {
}
impl UpdateExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *UpdateExpression {
        for (fa in UnaryExpression(db)) {
            for (son in UpdateExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield UpdateExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A LeftHandSideExpressionDO load left_hand_side_expression from db
 */
schema LeftHandSideExpressionDO {
    @primary id: int,
    kind: int
}

/**
 * A LeftHandSideExpression
 */
schema LeftHandSideExpression extends UpdateExpression {
}
impl LeftHandSideExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LeftHandSideExpression {
        for (fa in UpdateExpression(db)) {
            for (son in LeftHandSideExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield LeftHandSideExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A MemberExpressionDO load member_expression from db
 */
schema MemberExpressionDO {
    @primary id: int,
    kind: int
}

/**
 * A MemberExpression
 */
schema MemberExpression extends LeftHandSideExpression {
}
impl MemberExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MemberExpression {
        for (fa in LeftHandSideExpression(db)) {
            for (son in MemberExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield MemberExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A PrimaryExpressionDO load primary_expression from db
 */
schema PrimaryExpressionDO {
    @primary id: int,
    kind: int
}

/**
 * A PrimaryExpression
 */
schema PrimaryExpression extends MemberExpression {
}
impl PrimaryExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PrimaryExpression {
        for (fa in MemberExpression(db)) {
            for (son in PrimaryExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield PrimaryExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A NullLiteralDO load null_literal from db
 */
schema NullLiteralDO {
    @primary id: int,
}

/**
 * A NullLiteral
 */
schema NullLiteral extends PrimaryExpression {
}
impl NullLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NullLiteral {
        for (fa in PrimaryExpression(db)) {
            for (son in NullLiteralDO(db)) {
                if (son.key_eq(fa)) {
                    yield NullLiteral {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A TrueLiteralDO load true_literal from db
 */
schema TrueLiteralDO {
    @primary id: int,
}

/**
 * A TrueLiteral
 */
schema TrueLiteral extends PrimaryExpression {
}
impl TrueLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TrueLiteral {
        for (fa in PrimaryExpression(db)) {
            for (son in TrueLiteralDO(db)) {
                if (son.key_eq(fa)) {
                    yield TrueLiteral {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A FalseLiteralDO load false_literal from db
 */
schema FalseLiteralDO {
    @primary id: int,
}

/**
 * A FalseLiteral
 */
schema FalseLiteral extends PrimaryExpression {
}
impl FalseLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FalseLiteral {
        for (fa in PrimaryExpression(db)) {
            for (son in FalseLiteralDO(db)) {
                if (son.key_eq(fa)) {
                    yield FalseLiteral {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A LiteralLikeNodeDO load literal_like_node from db
 */
schema LiteralLikeNodeDO {
    @primary id: int,
    kind: int,
    value: string
}

/**
 * A LiteralLikeNode
 */
schema LiteralLikeNode extends AstNode {
    value: string
}
impl LiteralLikeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LiteralLikeNode {
        for (fa in AstNode(db)) {
            for (son in LiteralLikeNodeDO(db)) {
                if (son.key_eq(fa)) {
                    yield LiteralLikeNode {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : son.value
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the value.
     */
    pub fn getValue(self) -> string {
        return self.value
    }
    
}

/**
 * A LiteralExpressionDO load literal_expression from db
 */
schema LiteralExpressionDO {
    @primary id: int,
    kind: int
}

/**
 * A LiteralExpression
 */
schema LiteralExpression extends LiteralLikeNode {
}
impl LiteralExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LiteralExpression {
        for (fa in LiteralLikeNode(db)) {
            for (son in LiteralExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield LiteralExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to PrimaryExpression to use func.
     */
    pub fn toPrimaryExpression(self) -> PrimaryExpression {
        for (primaryExpression in PrimaryExpression(__all_data__)) {
            if (self.id = primaryExpression.id) {
                return primaryExpression
            }
        }
    }
    
}

/**
 * A NumericLiteralDO load numeric_literal from db
 */
schema NumericLiteralDO {
    @primary id: int,
    flags: int
}

/**
 * A NumericLiteral
 */
schema NumericLiteral extends LiteralExpression {
    flags: int
}
impl NumericLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NumericLiteral {
        for (fa in LiteralExpression(db)) {
            for (son in NumericLiteralDO(db)) {
                if (son.key_eq(fa)) {
                    yield NumericLiteral {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                        flags : son.flags
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the flags.
     */
    pub fn getFlags(self) -> int {
        return self.flags
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
}

/**
 * A BigIntLiteralDO load big_int_literal from db
 */
schema BigIntLiteralDO {
    @primary id: int,
}

/**
 * A BigIntLiteral
 */
schema BigIntLiteral extends LiteralExpression {
}
impl BigIntLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BigIntLiteral {
        for (fa in LiteralExpression(db)) {
            for (son in BigIntLiteralDO(db)) {
                if (son.key_eq(fa)) {
                    yield BigIntLiteral {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A StringLiteralDO load string_literal from db
 */
schema StringLiteralDO {
    @primary id: int,
    single_quote: int
}

/**
 * A StringLiteral
 */
schema StringLiteral extends LiteralExpression {
    single_quote: int
}
impl StringLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *StringLiteral {
        for (fa in LiteralExpression(db)) {
            for (son in StringLiteralDO(db)) {
                if (son.key_eq(fa)) {
                    yield StringLiteral {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                        single_quote : son.single_quote
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the singleQuote.
     */
    pub fn getSingleQuote(self) -> bool {
        return self.single_quote = 1
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
}

/**
 * A RegularExpressionLiteralDO load regular_expression_literal from db
 */
schema RegularExpressionLiteralDO {
    @primary id: int,
}

/**
 * A RegularExpressionLiteral
 */
schema RegularExpressionLiteral extends LiteralExpression {
}
impl RegularExpressionLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *RegularExpressionLiteral {
        for (fa in LiteralExpression(db)) {
            for (son in RegularExpressionLiteralDO(db)) {
                if (son.key_eq(fa)) {
                    yield RegularExpressionLiteral {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A TemplateLiteralLikeNodeDO load template_literal_like_node from db
 */
schema TemplateLiteralLikeNodeDO {
    @primary id: int,
    kind: int,
    raw_text: string
}

/**
 * A TemplateLiteralLikeNode
 */
schema TemplateLiteralLikeNode extends LiteralLikeNode {
    raw_text: string
}
impl TemplateLiteralLikeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateLiteralLikeNode {
        for (fa in LiteralLikeNode(db)) {
            for (son in TemplateLiteralLikeNodeDO(db)) {
                if (son.key_eq(fa)) {
                    yield TemplateLiteralLikeNode {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                        raw_text : son.raw_text
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the rawText.
     */
    pub fn getRawText(self) -> string {
        return self.raw_text
    }
    
}

/**
 * A NoSubstitutionTemplateLiteralDO load no_substitution_template_literal from db
 */
schema NoSubstitutionTemplateLiteralDO {
    @primary id: int,
}

/**
 * A NoSubstitutionTemplateLiteral
 */
schema NoSubstitutionTemplateLiteral extends LiteralExpression {
}
impl NoSubstitutionTemplateLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NoSubstitutionTemplateLiteral {
        for (fa in LiteralExpression(db)) {
            for (son in NoSubstitutionTemplateLiteralDO(db)) {
                if (son.key_eq(fa)) {
                    yield NoSubstitutionTemplateLiteral {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to TemplateLiteralLikeNode to use func.
     */
    pub fn toTemplateLiteralLikeNode(self) -> TemplateLiteralLikeNode {
        for (templateLiteralLikeNode in TemplateLiteralLikeNode(__all_data__)) {
            if (self.id = templateLiteralLikeNode.id) {
                return templateLiteralLikeNode
            }
        }
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
}

/**
 * A TemplateHeadDO load template_head from db
 */
schema TemplateHeadDO {
    @primary id: int,
}

/**
 * A TemplateHead
 */
schema TemplateHead extends TemplateLiteralLikeNode {
}
impl TemplateHead {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateHead {
        for (fa in TemplateLiteralLikeNode(db)) {
            for (son in TemplateHeadDO(db)) {
                if (son.key_eq(fa)) {
                    yield TemplateHead {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                        raw_text : fa.raw_text,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A TemplateMiddleDO load template_middle from db
 */
schema TemplateMiddleDO {
    @primary id: int,
}

/**
 * A TemplateMiddle
 */
schema TemplateMiddle extends TemplateLiteralLikeNode {
}
impl TemplateMiddle {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateMiddle {
        for (fa in TemplateLiteralLikeNode(db)) {
            for (son in TemplateMiddleDO(db)) {
                if (son.key_eq(fa)) {
                    yield TemplateMiddle {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                        raw_text : fa.raw_text,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A TemplateTailDO load template_tail from db
 */
schema TemplateTailDO {
    @primary id: int,
}

/**
 * A TemplateTail
 */
schema TemplateTail extends TemplateLiteralLikeNode {
}
impl TemplateTail {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateTail {
        for (fa in TemplateLiteralLikeNode(db)) {
            for (son in TemplateTailDO(db)) {
                if (son.key_eq(fa)) {
                    yield TemplateTail {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        value : fa.value,
                        raw_text : fa.raw_text,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A TemplateSpanDO load template_span from db
 */
schema TemplateSpanDO {
    @primary id: int,
    parent_id: int,
    index: int,
    expression_id: int,
    literal_id: int
}

/**
 * A TemplateSpan
 */
schema TemplateSpan extends AstNode {
    expression_id: int,
    literal_id: int
}
impl TemplateSpan {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateSpan {
        for (fa in AstNode(db)) {
            for (son in TemplateSpanDO(db)) {
                if (son.key_eq(fa)) {
                    yield TemplateSpan {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id,
                        literal_id : son.literal_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> TemplateExpression {
        for (templateExpression in TemplateExpression(__all_data__)) {
            if (self.parent_id = templateExpression.id) {
                return templateExpression
            }
        }
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the literal.
     */
    pub fn getLiteral(self) -> TemplateMiddleOrTail {
        for (templateMiddleOrTail in TemplateMiddleOrTail(__all_data__)) {
            if (self.literal_id = templateMiddleOrTail.id) {
                return templateMiddleOrTail
            }
        }
    }
    
}

/**
 * A ModifierDO load modifier from db
 */
schema ModifierDO {
    @primary id: int,
    kind: int,
    parent_id: int,
    parent_kind: int,
    index: int
}

/**
 * A Modifier
 */
schema Modifier extends AstNode {
}
impl Modifier {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Modifier {
        for (fa in AstNode(db)) {
            for (son in ModifierDO(db)) {
                if (son.key_eq(fa)) {
                    yield Modifier {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> HasModifiersNode {
        for (hasModifiersNode in HasModifiersNode(__all_data__)) {
            if (self.parent_id = hasModifiersNode.id) {
                return hasModifiersNode
            }
        }
    }
    
}

/**
 * A IdentifierDO load identifier from db
 */
schema IdentifierDO {
    @primary id: int,
    name: string
}

/**
 * A Identifier
 */
schema Identifier extends PrimaryExpression {
    name: string
}
impl Identifier {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Identifier {
        for (fa in PrimaryExpression(db)) {
            for (son in IdentifierDO(db)) {
                if (son.key_eq(fa)) {
                    yield Identifier {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name : son.name
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the name.
     */
    pub fn getName(self) -> string {
        return self.name
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
}

/**
 * A PrivateIdentifierDO load private_identifier from db
 */
schema PrivateIdentifierDO {
    @primary id: int,
    name: string
}

/**
 * A PrivateIdentifier
 */
schema PrivateIdentifier extends PrimaryExpression {
    name: string
}
impl PrivateIdentifier {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PrivateIdentifier {
        for (fa in PrimaryExpression(db)) {
            for (son in PrivateIdentifierDO(db)) {
                if (son.key_eq(fa)) {
                    yield PrivateIdentifier {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name : son.name
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the name.
     */
    pub fn getName(self) -> string {
        return self.name
    }
    
}

/**
 * A QualifiedNameDO load qualified_name from db
 */
schema QualifiedNameDO {
    @primary id: int,
    left_id: int,
    right_id: int
}

/**
 * A QualifiedName
 */
schema QualifiedName extends AstNode {
    left_id: int,
    right_id: int
}
impl QualifiedName {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *QualifiedName {
        for (fa in AstNode(db)) {
            for (son in QualifiedNameDO(db)) {
                if (son.key_eq(fa)) {
                    yield QualifiedName {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        left_id : son.left_id,
                        right_id : son.right_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the left.
     */
    pub fn getLeft(self) -> EntityName {
        for (entityName in EntityName(__all_data__)) {
            if (self.left_id = entityName.id) {
                return entityName
            }
        }
    }
    
    /**
     * Gets the right.
     */
    pub fn getRight(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.right_id = identifier.id) {
                return identifier
            }
        }
    }
    
}

/**
 * A ComputedPropertyNameDO load computed_property_name from db
 */
schema ComputedPropertyNameDO {
    @primary id: int,
    expression_id: int
}

/**
 * A ComputedPropertyName
 */
schema ComputedPropertyName extends AstNode {
    expression_id: int
}
impl ComputedPropertyName {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ComputedPropertyName {
        for (fa in AstNode(db)) {
            for (son in ComputedPropertyNameDO(db)) {
                if (son.key_eq(fa)) {
                    yield ComputedPropertyName {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A TypeNodeDO load type_node from db
 */
schema TypeNodeDO {
    @primary id: int,
    kind: int
}

/**
 * A TypeNode
 */
schema TypeNode extends AstNode {
}
impl TypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeNode {
        for (fa in AstNode(db)) {
            for (son in TypeNodeDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeNode {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A AnyTypeDO load any_type from db
 */
schema AnyTypeDO {
    @primary id: int,
}

/**
 * A AnyType
 */
schema AnyType extends TypeNode {
}
impl AnyType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AnyType {
        for (fa in TypeNode(db)) {
            for (son in AnyTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield AnyType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A BigIntTypeDO load big_int_type from db
 */
schema BigIntTypeDO {
    @primary id: int,
}

/**
 * A BigIntType
 */
schema BigIntType extends TypeNode {
}
impl BigIntType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BigIntType {
        for (fa in TypeNode(db)) {
            for (son in BigIntTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield BigIntType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A BooleanTypeDO load boolean_type from db
 */
schema BooleanTypeDO {
    @primary id: int,
}

/**
 * A BooleanType
 */
schema BooleanType extends TypeNode {
}
impl BooleanType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BooleanType {
        for (fa in TypeNode(db)) {
            for (son in BooleanTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield BooleanType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A IntrinsicTypeDO load intrinsic_type from db
 */
schema IntrinsicTypeDO {
    @primary id: int,
}

/**
 * A IntrinsicType
 */
schema IntrinsicType extends TypeNode {
}
impl IntrinsicType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IntrinsicType {
        for (fa in TypeNode(db)) {
            for (son in IntrinsicTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield IntrinsicType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A NeverTypeDO load never_type from db
 */
schema NeverTypeDO {
    @primary id: int,
}

/**
 * A NeverType
 */
schema NeverType extends TypeNode {
}
impl NeverType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NeverType {
        for (fa in TypeNode(db)) {
            for (son in NeverTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield NeverType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A NumberTypeDO load number_type from db
 */
schema NumberTypeDO {
    @primary id: int,
}

/**
 * A NumberType
 */
schema NumberType extends TypeNode {
}
impl NumberType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NumberType {
        for (fa in TypeNode(db)) {
            for (son in NumberTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield NumberType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ObjectTypeDO load object_type from db
 */
schema ObjectTypeDO {
    @primary id: int,
}

/**
 * A ObjectType
 */
schema ObjectType extends TypeNode {
}
impl ObjectType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ObjectType {
        for (fa in TypeNode(db)) {
            for (son in ObjectTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield ObjectType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A StringTypeDO load string_type from db
 */
schema StringTypeDO {
    @primary id: int,
}

/**
 * A StringType
 */
schema StringType extends TypeNode {
}
impl StringType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *StringType {
        for (fa in TypeNode(db)) {
            for (son in StringTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield StringType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A SymbolTypeDO load symbol_type from db
 */
schema SymbolTypeDO {
    @primary id: int,
}

/**
 * A SymbolType
 */
schema SymbolType extends TypeNode {
}
impl SymbolType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SymbolType {
        for (fa in TypeNode(db)) {
            for (son in SymbolTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield SymbolType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A UndefinedTypeDO load undefined_type from db
 */
schema UndefinedTypeDO {
    @primary id: int,
}

/**
 * A UndefinedType
 */
schema UndefinedType extends TypeNode {
}
impl UndefinedType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *UndefinedType {
        for (fa in TypeNode(db)) {
            for (son in UndefinedTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield UndefinedType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A UnknownTypeDO load unknown_type from db
 */
schema UnknownTypeDO {
    @primary id: int,
}

/**
 * A UnknownType
 */
schema UnknownType extends TypeNode {
}
impl UnknownType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *UnknownType {
        for (fa in TypeNode(db)) {
            for (son in UnknownTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield UnknownType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A VoidTypeDO load void_type from db
 */
schema VoidTypeDO {
    @primary id: int,
}

/**
 * A VoidType
 */
schema VoidType extends TypeNode {
}
impl VoidType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *VoidType {
        for (fa in TypeNode(db)) {
            for (son in VoidTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield VoidType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A TypeParameterDO load type_parameter from db
 */
schema TypeParameterDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A TypeParameter
 */
schema TypeParameter extends Declaration {
    name_node_id: int
}
impl TypeParameter {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeParameter {
        for (fa in Declaration(db)) {
            for (son in TypeParameterDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeParameter {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A TypeParameterConstraintDO load type_parameter_constraint from db
 */
schema TypeParameterConstraintDO {
    @primary type_parameter_id: int,
    constraint_id: int
}

/**
 * A TypeParameterConstraint
 */
schema TypeParameterConstraint {
    @primary type_parameter_id: int,
    constraint_id: int
}
impl TypeParameterConstraint {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeParameterConstraint {
        for (typeParameterConstraint in TypeParameterConstraintDO(db)) {
            yield TypeParameterConstraint {
                type_parameter_id: typeParameterConstraint.type_parameter_id,
                constraint_id : typeParameterConstraint.constraint_id
            }
        }
    }
    
    /**
     * Gets the typeParameter.
     */
    pub fn getTypeParameter(self) -> TypeParameter {
        for (typeParameter in TypeParameter(__all_data__)) {
            if (self.type_parameter_id = typeParameter.id) {
                return typeParameter
            }
        }
    }
    
    /**
     * Gets the constraint.
     */
    pub fn getConstraint(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.constraint_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_parameter_id
    }
    
}

/**
 * A TypeParameterDefaultDO load type_parameter_default from db
 */
schema TypeParameterDefaultDO {
    @primary type_parameter_id: int,
    default_id: int
}

/**
 * A TypeParameterDefault
 */
schema TypeParameterDefault {
    @primary type_parameter_id: int,
    default_id: int
}
impl TypeParameterDefault {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeParameterDefault {
        for (typeParameterDefault in TypeParameterDefaultDO(db)) {
            yield TypeParameterDefault {
                type_parameter_id: typeParameterDefault.type_parameter_id,
                default_id : typeParameterDefault.default_id
            }
        }
    }
    
    /**
     * Gets the typeParameter.
     */
    pub fn getTypeParameter(self) -> TypeParameter {
        for (typeParameter in TypeParameter(__all_data__)) {
            if (self.type_parameter_id = typeParameter.id) {
                return typeParameter
            }
        }
    }
    
    /**
     * Gets the default.
     */
    pub fn getDefault(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.default_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_parameter_id
    }
    
}

/**
 * A ParameterDO load parameter from db
 */
schema ParameterDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A Parameter
 */
schema Parameter extends Declaration {
    name_node_id: int
}
impl Parameter {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Parameter {
        for (fa in Declaration(db)) {
            for (son in ParameterDO(db)) {
                if (son.key_eq(fa)) {
                    yield Parameter {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> BindingName {
        for (bindingName in BindingName(__all_data__)) {
            if (self.name_node_id = bindingName.id) {
                return bindingName
            }
        }
    }
    
    /**
     * Get the dotDotDotToken.
     */
    pub fn getDotDotDotToken(self) -> DotDotDotToken {
        for (parameterDotDotDotToken in ParameterDotDotDotToken(__all_data__)) {
            if (parameterDotDotDotToken.parameter_id = self.id) {
                return parameterDotDotDotToken.getDotDotDotToken()
            }
        }
    }
    
    /**
     * Get the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (parameterQuestionToken in ParameterQuestionToken(__all_data__)) {
            if (parameterQuestionToken.parameter_id = self.id) {
                return parameterQuestionToken.getQuestionToken()
            }
        }
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (parameterTypeNode in ParameterTypeNode(__all_data__)) {
            if (parameterTypeNode.parameter_id = self.id) {
                return parameterTypeNode.getTypeNode()
            }
        }
    }
    
    /**
     * Get the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (parameterInitializer in ParameterInitializer(__all_data__)) {
            if (parameterInitializer.parameter_id = self.id) {
                return parameterInitializer.getInitializer()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A ParameterDotDotDotTokenDO load parameter_dot_dot_dot_token from db
 */
schema ParameterDotDotDotTokenDO {
    @primary parameter_id: int,
    dot_dot_dot_token_id: int
}

/**
 * A ParameterDotDotDotToken
 */
schema ParameterDotDotDotToken {
    @primary parameter_id: int,
    dot_dot_dot_token_id: int
}
impl ParameterDotDotDotToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ParameterDotDotDotToken {
        for (parameterDotDotDotToken in ParameterDotDotDotTokenDO(db)) {
            yield ParameterDotDotDotToken {
                parameter_id: parameterDotDotDotToken.parameter_id,
                dot_dot_dot_token_id : parameterDotDotDotToken.dot_dot_dot_token_id
            }
        }
    }
    
    /**
     * Gets the parameter.
     */
    pub fn getParameter(self) -> Parameter {
        for (parameter in Parameter(__all_data__)) {
            if (self.parameter_id = parameter.id) {
                return parameter
            }
        }
    }
    
    /**
     * Gets the dotDotDotToken.
     */
    pub fn getDotDotDotToken(self) -> DotDotDotToken {
        for (dotDotDotToken in DotDotDotToken(__all_data__)) {
            if (self.dot_dot_dot_token_id = dotDotDotToken.id) {
                return dotDotDotToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.parameter_id
    }
    
}

/**
 * A ParameterQuestionTokenDO load parameter_question_token from db
 */
schema ParameterQuestionTokenDO {
    @primary parameter_id: int,
    question_token_id: int
}

/**
 * A ParameterQuestionToken
 */
schema ParameterQuestionToken {
    @primary parameter_id: int,
    question_token_id: int
}
impl ParameterQuestionToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ParameterQuestionToken {
        for (parameterQuestionToken in ParameterQuestionTokenDO(db)) {
            yield ParameterQuestionToken {
                parameter_id: parameterQuestionToken.parameter_id,
                question_token_id : parameterQuestionToken.question_token_id
            }
        }
    }
    
    /**
     * Gets the parameter.
     */
    pub fn getParameter(self) -> Parameter {
        for (parameter in Parameter(__all_data__)) {
            if (self.parameter_id = parameter.id) {
                return parameter
            }
        }
    }
    
    /**
     * Gets the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (questionToken in QuestionToken(__all_data__)) {
            if (self.question_token_id = questionToken.id) {
                return questionToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.parameter_id
    }
    
}

/**
 * A ParameterTypeNodeDO load parameter_type_node from db
 */
schema ParameterTypeNodeDO {
    @primary parameter_id: int,
    type_node_id: int
}

/**
 * A ParameterTypeNode
 */
schema ParameterTypeNode {
    @primary parameter_id: int,
    type_node_id: int
}
impl ParameterTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ParameterTypeNode {
        for (parameterTypeNode in ParameterTypeNodeDO(db)) {
            yield ParameterTypeNode {
                parameter_id: parameterTypeNode.parameter_id,
                type_node_id : parameterTypeNode.type_node_id
            }
        }
    }
    
    /**
     * Gets the parameter.
     */
    pub fn getParameter(self) -> Parameter {
        for (parameter in Parameter(__all_data__)) {
            if (self.parameter_id = parameter.id) {
                return parameter
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.parameter_id
    }
    
}

/**
 * A ParameterInitializerDO load parameter_initializer from db
 */
schema ParameterInitializerDO {
    @primary parameter_id: int,
    initializer_id: int
}

/**
 * A ParameterInitializer
 */
schema ParameterInitializer {
    @primary parameter_id: int,
    initializer_id: int
}
impl ParameterInitializer {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ParameterInitializer {
        for (parameterInitializer in ParameterInitializerDO(db)) {
            yield ParameterInitializer {
                parameter_id: parameterInitializer.parameter_id,
                initializer_id : parameterInitializer.initializer_id
            }
        }
    }
    
    /**
     * Gets the parameter.
     */
    pub fn getParameter(self) -> Parameter {
        for (parameter in Parameter(__all_data__)) {
            if (self.parameter_id = parameter.id) {
                return parameter
            }
        }
    }
    
    /**
     * Gets the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.initializer_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.parameter_id
    }
    
}

/**
 * A DecoratorDO load decorator from db
 */
schema DecoratorDO {
    @primary id: int,
    expression_id: int
}

/**
 * A Decorator
 */
schema Decorator extends AstNode {
    expression_id: int
}
impl Decorator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Decorator {
        for (fa in AstNode(db)) {
            for (son in DecoratorDO(db)) {
                if (son.key_eq(fa)) {
                    yield Decorator {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A ObjectLiteralElementDO load object_literal_element from db
 */
schema ObjectLiteralElementDO {
    @primary id: int,
    kind: int
}

/**
 * A ObjectLiteralElement
 */
schema ObjectLiteralElement extends Declaration {
}
impl ObjectLiteralElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ObjectLiteralElement {
        for (fa in Declaration(db)) {
            for (son in ObjectLiteralElementDO(db)) {
                if (son.key_eq(fa)) {
                    yield ObjectLiteralElement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (objectLiteralElementNameNode in ObjectLiteralElementNameNode(__all_data__)) {
            if (objectLiteralElementNameNode.object_literal_element_id = self.id) {
                return objectLiteralElementNameNode.getNameNode()
            }
        }
    }
    
}

/**
 * A ObjectLiteralElementNameNodeDO load object_literal_element_name_node from db
 */
schema ObjectLiteralElementNameNodeDO {
    @primary object_literal_element_id: int,
    name_node_id: int
}

/**
 * A ObjectLiteralElementNameNode
 */
schema ObjectLiteralElementNameNode {
    @primary object_literal_element_id: int,
    name_node_id: int
}
impl ObjectLiteralElementNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ObjectLiteralElementNameNode {
        for (objectLiteralElementNameNode in ObjectLiteralElementNameNodeDO(db)) {
            yield ObjectLiteralElementNameNode {
                object_literal_element_id: objectLiteralElementNameNode.object_literal_element_id,
                name_node_id : objectLiteralElementNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the objectLiteralElement.
     */
    pub fn getObjectLiteralElement(self) -> ObjectLiteralElement {
        for (objectLiteralElement in ObjectLiteralElement(__all_data__)) {
            if (self.object_literal_element_id = objectLiteralElement.id) {
                return objectLiteralElement
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.object_literal_element_id
    }
    
}

/**
 * A ClassElementDO load class_element from db
 */
schema ClassElementDO {
    @primary id: int,
    kind: int
}

/**
 * A ClassElement
 */
schema ClassElement extends Declaration {
}
impl ClassElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassElement {
        for (fa in Declaration(db)) {
            for (son in ClassElementDO(db)) {
                if (son.key_eq(fa)) {
                    yield ClassElement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (classElementNameNode in ClassElementNameNode(__all_data__)) {
            if (classElementNameNode.class_element_id = self.id) {
                return classElementNameNode.getNameNode()
            }
        }
    }
    
}

/**
 * A ClassElementNameNodeDO load class_element_name_node from db
 */
schema ClassElementNameNodeDO {
    @primary class_element_id: int,
    name_node_id: int
}

/**
 * A ClassElementNameNode
 */
schema ClassElementNameNode {
    @primary class_element_id: int,
    name_node_id: int
}
impl ClassElementNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassElementNameNode {
        for (classElementNameNode in ClassElementNameNodeDO(db)) {
            yield ClassElementNameNode {
                class_element_id: classElementNameNode.class_element_id,
                name_node_id : classElementNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the classElement.
     */
    pub fn getClassElement(self) -> ClassElement {
        for (classElement in ClassElement(__all_data__)) {
            if (self.class_element_id = classElement.id) {
                return classElement
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.class_element_id
    }
    
}

/**
 * A TypeElementDO load type_element from db
 */
schema TypeElementDO {
    @primary id: int,
    kind: int
}

/**
 * A TypeElement
 */
schema TypeElement extends Declaration {
}
impl TypeElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeElement {
        for (fa in Declaration(db)) {
            for (son in TypeElementDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeElement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (typeElementNameNode in TypeElementNameNode(__all_data__)) {
            if (typeElementNameNode.type_element_id = self.id) {
                return typeElementNameNode.getNameNode()
            }
        }
    }
    
    /**
     * Get the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (typeElementQuestionToken in TypeElementQuestionToken(__all_data__)) {
            if (typeElementQuestionToken.type_element_id = self.id) {
                return typeElementQuestionToken.getQuestionToken()
            }
        }
    }
    
}

/**
 * A TypeElementNameNodeDO load type_element_name_node from db
 */
schema TypeElementNameNodeDO {
    @primary type_element_id: int,
    name_node_id: int
}

/**
 * A TypeElementNameNode
 */
schema TypeElementNameNode {
    @primary type_element_id: int,
    name_node_id: int
}
impl TypeElementNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeElementNameNode {
        for (typeElementNameNode in TypeElementNameNodeDO(db)) {
            yield TypeElementNameNode {
                type_element_id: typeElementNameNode.type_element_id,
                name_node_id : typeElementNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the typeElement.
     */
    pub fn getTypeElement(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.type_element_id = typeElement.id) {
                return typeElement
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_element_id
    }
    
}

/**
 * A TypeElementQuestionTokenDO load type_element_question_token from db
 */
schema TypeElementQuestionTokenDO {
    @primary type_element_id: int,
    question_token_id: int
}

/**
 * A TypeElementQuestionToken
 */
schema TypeElementQuestionToken {
    @primary type_element_id: int,
    question_token_id: int
}
impl TypeElementQuestionToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeElementQuestionToken {
        for (typeElementQuestionToken in TypeElementQuestionTokenDO(db)) {
            yield TypeElementQuestionToken {
                type_element_id: typeElementQuestionToken.type_element_id,
                question_token_id : typeElementQuestionToken.question_token_id
            }
        }
    }
    
    /**
     * Gets the typeElement.
     */
    pub fn getTypeElement(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.type_element_id = typeElement.id) {
                return typeElement
            }
        }
    }
    
    /**
     * Gets the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (questionToken in QuestionToken(__all_data__)) {
            if (self.question_token_id = questionToken.id) {
                return questionToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_element_id
    }
    
}

/**
 * A PropertySignatureDO load property_signature from db
 */
schema PropertySignatureDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A PropertySignature
 */
schema PropertySignature extends TypeElement {
    name_node_id: int
}
impl PropertySignature {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertySignature {
        for (fa in TypeElement(db)) {
            for (son in PropertySignatureDO(db)) {
                if (son.key_eq(fa)) {
                    yield PropertySignature {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * Get the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (propertySignatureQuestionToken in PropertySignatureQuestionToken(__all_data__)) {
            if (propertySignatureQuestionToken.property_signature_id = self.id) {
                return propertySignatureQuestionToken.getQuestionToken()
            }
        }
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (propertySignatureTypeNode in PropertySignatureTypeNode(__all_data__)) {
            if (propertySignatureTypeNode.property_signature_id = self.id) {
                return propertySignatureTypeNode.getTypeNode()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A PropertySignatureQuestionTokenDO load property_signature_question_token from db
 */
schema PropertySignatureQuestionTokenDO {
    @primary property_signature_id: int,
    question_token_id: int
}

/**
 * A PropertySignatureQuestionToken
 */
schema PropertySignatureQuestionToken {
    @primary property_signature_id: int,
    question_token_id: int
}
impl PropertySignatureQuestionToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertySignatureQuestionToken {
        for (propertySignatureQuestionToken in PropertySignatureQuestionTokenDO(db)) {
            yield PropertySignatureQuestionToken {
                property_signature_id: propertySignatureQuestionToken.property_signature_id,
                question_token_id : propertySignatureQuestionToken.question_token_id
            }
        }
    }
    
    /**
     * Gets the propertySignature.
     */
    pub fn getPropertySignature(self) -> PropertySignature {
        for (propertySignature in PropertySignature(__all_data__)) {
            if (self.property_signature_id = propertySignature.id) {
                return propertySignature
            }
        }
    }
    
    /**
     * Gets the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (questionToken in QuestionToken(__all_data__)) {
            if (self.question_token_id = questionToken.id) {
                return questionToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.property_signature_id
    }
    
}

/**
 * A PropertySignatureTypeNodeDO load property_signature_type_node from db
 */
schema PropertySignatureTypeNodeDO {
    @primary property_signature_id: int,
    type_node_id: int
}

/**
 * A PropertySignatureTypeNode
 */
schema PropertySignatureTypeNode {
    @primary property_signature_id: int,
    type_node_id: int
}
impl PropertySignatureTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertySignatureTypeNode {
        for (propertySignatureTypeNode in PropertySignatureTypeNodeDO(db)) {
            yield PropertySignatureTypeNode {
                property_signature_id: propertySignatureTypeNode.property_signature_id,
                type_node_id : propertySignatureTypeNode.type_node_id
            }
        }
    }
    
    /**
     * Gets the propertySignature.
     */
    pub fn getPropertySignature(self) -> PropertySignature {
        for (propertySignature in PropertySignature(__all_data__)) {
            if (self.property_signature_id = propertySignature.id) {
                return propertySignature
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.property_signature_id
    }
    
}

/**
 * A PropertyDeclarationDO load property_declaration from db
 */
schema PropertyDeclarationDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A PropertyDeclaration
 */
schema PropertyDeclaration extends ClassElement {
    name_node_id: int
}
impl PropertyDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertyDeclaration {
        for (fa in ClassElement(db)) {
            for (son in PropertyDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield PropertyDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * Get the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (propertyDeclarationQuestionToken in PropertyDeclarationQuestionToken(__all_data__)) {
            if (propertyDeclarationQuestionToken.property_declaration_id = self.id) {
                return propertyDeclarationQuestionToken.getQuestionToken()
            }
        }
    }
    
    /**
     * Get the exclamationToken.
     */
    pub fn getExclamationToken(self) -> ExclamationToken {
        for (propertyDeclarationExclamationToken in PropertyDeclarationExclamationToken(__all_data__)) {
            if (propertyDeclarationExclamationToken.property_declaration_id = self.id) {
                return propertyDeclarationExclamationToken.getExclamationToken()
            }
        }
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (propertyDeclarationTypeNode in PropertyDeclarationTypeNode(__all_data__)) {
            if (propertyDeclarationTypeNode.property_declaration_id = self.id) {
                return propertyDeclarationTypeNode.getTypeNode()
            }
        }
    }
    
    /**
     * Get the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (propertyDeclarationInitializer in PropertyDeclarationInitializer(__all_data__)) {
            if (propertyDeclarationInitializer.property_declaration_id = self.id) {
                return propertyDeclarationInitializer.getInitializer()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A PropertyDeclarationQuestionTokenDO load property_declaration_question_token from db
 */
schema PropertyDeclarationQuestionTokenDO {
    @primary property_declaration_id: int,
    question_token_id: int
}

/**
 * A PropertyDeclarationQuestionToken
 */
schema PropertyDeclarationQuestionToken {
    @primary property_declaration_id: int,
    question_token_id: int
}
impl PropertyDeclarationQuestionToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertyDeclarationQuestionToken {
        for (propertyDeclarationQuestionToken in PropertyDeclarationQuestionTokenDO(db)) {
            yield PropertyDeclarationQuestionToken {
                property_declaration_id: propertyDeclarationQuestionToken.property_declaration_id,
                question_token_id : propertyDeclarationQuestionToken.question_token_id
            }
        }
    }
    
    /**
     * Gets the propertyDeclaration.
     */
    pub fn getPropertyDeclaration(self) -> PropertyDeclaration {
        for (propertyDeclaration in PropertyDeclaration(__all_data__)) {
            if (self.property_declaration_id = propertyDeclaration.id) {
                return propertyDeclaration
            }
        }
    }
    
    /**
     * Gets the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (questionToken in QuestionToken(__all_data__)) {
            if (self.question_token_id = questionToken.id) {
                return questionToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.property_declaration_id
    }
    
}

/**
 * A PropertyDeclarationExclamationTokenDO load property_declaration_exclamation_token from db
 */
schema PropertyDeclarationExclamationTokenDO {
    @primary property_declaration_id: int,
    exclamation_token_id: int
}

/**
 * A PropertyDeclarationExclamationToken
 */
schema PropertyDeclarationExclamationToken {
    @primary property_declaration_id: int,
    exclamation_token_id: int
}
impl PropertyDeclarationExclamationToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertyDeclarationExclamationToken {
        for (propertyDeclarationExclamationToken in PropertyDeclarationExclamationTokenDO(db)) {
            yield PropertyDeclarationExclamationToken {
                property_declaration_id: propertyDeclarationExclamationToken.property_declaration_id,
                exclamation_token_id : propertyDeclarationExclamationToken.exclamation_token_id
            }
        }
    }
    
    /**
     * Gets the propertyDeclaration.
     */
    pub fn getPropertyDeclaration(self) -> PropertyDeclaration {
        for (propertyDeclaration in PropertyDeclaration(__all_data__)) {
            if (self.property_declaration_id = propertyDeclaration.id) {
                return propertyDeclaration
            }
        }
    }
    
    /**
     * Gets the exclamationToken.
     */
    pub fn getExclamationToken(self) -> ExclamationToken {
        for (exclamationToken in ExclamationToken(__all_data__)) {
            if (self.exclamation_token_id = exclamationToken.id) {
                return exclamationToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.property_declaration_id
    }
    
}

/**
 * A PropertyDeclarationTypeNodeDO load property_declaration_type_node from db
 */
schema PropertyDeclarationTypeNodeDO {
    @primary property_declaration_id: int,
    type_node_id: int
}

/**
 * A PropertyDeclarationTypeNode
 */
schema PropertyDeclarationTypeNode {
    @primary property_declaration_id: int,
    type_node_id: int
}
impl PropertyDeclarationTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertyDeclarationTypeNode {
        for (propertyDeclarationTypeNode in PropertyDeclarationTypeNodeDO(db)) {
            yield PropertyDeclarationTypeNode {
                property_declaration_id: propertyDeclarationTypeNode.property_declaration_id,
                type_node_id : propertyDeclarationTypeNode.type_node_id
            }
        }
    }
    
    /**
     * Gets the propertyDeclaration.
     */
    pub fn getPropertyDeclaration(self) -> PropertyDeclaration {
        for (propertyDeclaration in PropertyDeclaration(__all_data__)) {
            if (self.property_declaration_id = propertyDeclaration.id) {
                return propertyDeclaration
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.property_declaration_id
    }
    
}

/**
 * A PropertyDeclarationInitializerDO load property_declaration_initializer from db
 */
schema PropertyDeclarationInitializerDO {
    @primary property_declaration_id: int,
    initializer_id: int
}

/**
 * A PropertyDeclarationInitializer
 */
schema PropertyDeclarationInitializer {
    @primary property_declaration_id: int,
    initializer_id: int
}
impl PropertyDeclarationInitializer {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertyDeclarationInitializer {
        for (propertyDeclarationInitializer in PropertyDeclarationInitializerDO(db)) {
            yield PropertyDeclarationInitializer {
                property_declaration_id: propertyDeclarationInitializer.property_declaration_id,
                initializer_id : propertyDeclarationInitializer.initializer_id
            }
        }
    }
    
    /**
     * Gets the propertyDeclaration.
     */
    pub fn getPropertyDeclaration(self) -> PropertyDeclaration {
        for (propertyDeclaration in PropertyDeclaration(__all_data__)) {
            if (self.property_declaration_id = propertyDeclaration.id) {
                return propertyDeclaration
            }
        }
    }
    
    /**
     * Gets the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.initializer_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.property_declaration_id
    }
    
}

/**
 * A MethodSignatureDO load method_signature from db
 */
schema MethodSignatureDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A MethodSignature
 */
schema MethodSignature extends SignatureDeclaration {
    name_node_id: int
}
impl MethodSignature {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MethodSignature {
        for (fa in SignatureDeclaration(db)) {
            for (son in MethodSignatureDO(db)) {
                if (son.key_eq(fa)) {
                    yield MethodSignature {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * trans to TypeElement to use func.
     */
    pub fn toTypeElement(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.id = typeElement.id) {
                return typeElement
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A MethodDeclarationDO load method_declaration from db
 */
schema MethodDeclarationDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A MethodDeclaration
 */
schema MethodDeclaration extends ClassElement {
    name_node_id: int
}
impl MethodDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MethodDeclaration {
        for (fa in ClassElement(db)) {
            for (son in MethodDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield MethodDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * trans to ObjectLiteralElement to use func.
     */
    pub fn toObjectLiteralElement(self) -> ObjectLiteralElement {
        for (objectLiteralElement in ObjectLiteralElement(__all_data__)) {
            if (self.id = objectLiteralElement.id) {
                return objectLiteralElement
            }
        }
    }
    
    /**
     * Get the body.
     */
    pub fn getBody(self) -> Block {
        for (methodDeclarationBody in MethodDeclarationBody(__all_data__)) {
            if (methodDeclarationBody.method_declaration_id = self.id) {
                return methodDeclarationBody.getBody()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A MethodDeclarationBodyDO load method_declaration_body from db
 */
schema MethodDeclarationBodyDO {
    @primary method_declaration_id: int,
    body_id: int
}

/**
 * A MethodDeclarationBody
 */
schema MethodDeclarationBody {
    @primary method_declaration_id: int,
    body_id: int
}
impl MethodDeclarationBody {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MethodDeclarationBody {
        for (methodDeclarationBody in MethodDeclarationBodyDO(db)) {
            yield MethodDeclarationBody {
                method_declaration_id: methodDeclarationBody.method_declaration_id,
                body_id : methodDeclarationBody.body_id
            }
        }
    }
    
    /**
     * Gets the methodDeclaration.
     */
    pub fn getMethodDeclaration(self) -> MethodDeclaration {
        for (methodDeclaration in MethodDeclaration(__all_data__)) {
            if (self.method_declaration_id = methodDeclaration.id) {
                return methodDeclaration
            }
        }
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.body_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.method_declaration_id
    }
    
}

/**
 * A ClassStaticBlockDeclarationDO load class_static_block_declaration from db
 */
schema ClassStaticBlockDeclarationDO {
    @primary id: int,
    body_id: int
}

/**
 * A ClassStaticBlockDeclaration
 */
schema ClassStaticBlockDeclaration extends ClassElement {
    body_id: int
}
impl ClassStaticBlockDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassStaticBlockDeclaration {
        for (fa in ClassElement(db)) {
            for (son in ClassStaticBlockDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield ClassStaticBlockDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        body_id : son.body_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.body_id = block.id) {
                return block
            }
        }
    }
    
}

/**
 * A ConstructorDO load constructor from db
 */
schema ConstructorDO {
    @primary id: int,
}

/**
 * A Constructor
 */
schema Constructor extends ClassElement {
}
impl Constructor {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Constructor {
        for (fa in ClassElement(db)) {
            for (son in ConstructorDO(db)) {
                if (son.key_eq(fa)) {
                    yield Constructor {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the body.
     */
    pub fn getBody(self) -> Block {
        for (constructorBody in ConstructorBody(__all_data__)) {
            if (constructorBody.constructor_id = self.id) {
                return constructorBody.getBody()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A ConstructorBodyDO load constructor_body from db
 */
schema ConstructorBodyDO {
    @primary constructor_id: int,
    body_id: int
}

/**
 * A ConstructorBody
 */
schema ConstructorBody {
    @primary constructor_id: int,
    body_id: int
}
impl ConstructorBody {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ConstructorBody {
        for (constructorBody in ConstructorBodyDO(db)) {
            yield ConstructorBody {
                constructor_id: constructorBody.constructor_id,
                body_id : constructorBody.body_id
            }
        }
    }
    
    /**
     * Gets the constructor.
     */
    pub fn getConstructor(self) -> int {
        return self.constructor_id
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.body_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.constructor_id
    }
    
}

/**
 * A GetAccessorDO load get_accessor from db
 */
schema GetAccessorDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A GetAccessor
 */
schema GetAccessor extends ClassElement {
    name_node_id: int
}
impl GetAccessor {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *GetAccessor {
        for (fa in ClassElement(db)) {
            for (son in GetAccessorDO(db)) {
                if (son.key_eq(fa)) {
                    yield GetAccessor {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * trans to TypeElement to use func.
     */
    pub fn toTypeElement(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.id = typeElement.id) {
                return typeElement
            }
        }
    }
    
    /**
     * trans to ObjectLiteralElement to use func.
     */
    pub fn toObjectLiteralElement(self) -> ObjectLiteralElement {
        for (objectLiteralElement in ObjectLiteralElement(__all_data__)) {
            if (self.id = objectLiteralElement.id) {
                return objectLiteralElement
            }
        }
    }
    
    /**
     * Get the body.
     */
    pub fn getBody(self) -> Block {
        for (getAccessorBody in GetAccessorBody(__all_data__)) {
            if (getAccessorBody.get_accessor_id = self.id) {
                return getAccessorBody.getBody()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A GetAccessorBodyDO load get_accessor_body from db
 */
schema GetAccessorBodyDO {
    @primary get_accessor_id: int,
    body_id: int
}

/**
 * A GetAccessorBody
 */
schema GetAccessorBody {
    @primary get_accessor_id: int,
    body_id: int
}
impl GetAccessorBody {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *GetAccessorBody {
        for (getAccessorBody in GetAccessorBodyDO(db)) {
            yield GetAccessorBody {
                get_accessor_id: getAccessorBody.get_accessor_id,
                body_id : getAccessorBody.body_id
            }
        }
    }
    
    /**
     * Gets the getAccessor.
     */
    pub fn getGetAccessor(self) -> GetAccessor {
        for (getAccessor in GetAccessor(__all_data__)) {
            if (self.get_accessor_id = getAccessor.id) {
                return getAccessor
            }
        }
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.body_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.get_accessor_id
    }
    
}

/**
 * A SetAccessorDO load set_accessor from db
 */
schema SetAccessorDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A SetAccessor
 */
schema SetAccessor extends ClassElement {
    name_node_id: int
}
impl SetAccessor {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SetAccessor {
        for (fa in ClassElement(db)) {
            for (son in SetAccessorDO(db)) {
                if (son.key_eq(fa)) {
                    yield SetAccessor {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * trans to TypeElement to use func.
     */
    pub fn toTypeElement(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.id = typeElement.id) {
                return typeElement
            }
        }
    }
    
    /**
     * trans to ObjectLiteralElement to use func.
     */
    pub fn toObjectLiteralElement(self) -> ObjectLiteralElement {
        for (objectLiteralElement in ObjectLiteralElement(__all_data__)) {
            if (self.id = objectLiteralElement.id) {
                return objectLiteralElement
            }
        }
    }
    
    /**
     * Get the body.
     */
    pub fn getBody(self) -> Block {
        for (setAccessorBody in SetAccessorBody(__all_data__)) {
            if (setAccessorBody.set_accessor_id = self.id) {
                return setAccessorBody.getBody()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A SetAccessorBodyDO load set_accessor_body from db
 */
schema SetAccessorBodyDO {
    @primary set_accessor_id: int,
    body_id: int
}

/**
 * A SetAccessorBody
 */
schema SetAccessorBody {
    @primary set_accessor_id: int,
    body_id: int
}
impl SetAccessorBody {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SetAccessorBody {
        for (setAccessorBody in SetAccessorBodyDO(db)) {
            yield SetAccessorBody {
                set_accessor_id: setAccessorBody.set_accessor_id,
                body_id : setAccessorBody.body_id
            }
        }
    }
    
    /**
     * Gets the setAccessor.
     */
    pub fn getSetAccessor(self) -> SetAccessor {
        for (setAccessor in SetAccessor(__all_data__)) {
            if (self.set_accessor_id = setAccessor.id) {
                return setAccessor
            }
        }
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.body_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.set_accessor_id
    }
    
}

/**
 * A CallSignatureDO load call_signature from db
 */
schema CallSignatureDO {
    @primary id: int,
}

/**
 * A CallSignature
 */
schema CallSignature extends SignatureDeclaration {
}
impl CallSignature {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CallSignature {
        for (fa in SignatureDeclaration(db)) {
            for (son in CallSignatureDO(db)) {
                if (son.key_eq(fa)) {
                    yield CallSignature {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to TypeElement to use func.
     */
    pub fn toTypeElement(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.id = typeElement.id) {
                return typeElement
            }
        }
    }
    
}

/**
 * A ConstructSignatureDO load construct_signature from db
 */
schema ConstructSignatureDO {
    @primary id: int,
}

/**
 * A ConstructSignature
 */
schema ConstructSignature extends SignatureDeclaration {
}
impl ConstructSignature {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ConstructSignature {
        for (fa in SignatureDeclaration(db)) {
            for (son in ConstructSignatureDO(db)) {
                if (son.key_eq(fa)) {
                    yield ConstructSignature {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to TypeElement to use func.
     */
    pub fn toTypeElement(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.id = typeElement.id) {
                return typeElement
            }
        }
    }
    
}

/**
 * A IndexSignatureDO load index_signature from db
 */
schema IndexSignatureDO {
    @primary id: int,
    type_node_id: int
}

/**
 * A IndexSignature
 */
schema IndexSignature extends SignatureDeclaration {
    type_node_id: int
}
impl IndexSignature {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IndexSignature {
        for (fa in SignatureDeclaration(db)) {
            for (son in IndexSignatureDO(db)) {
                if (son.key_eq(fa)) {
                    yield IndexSignature {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * trans to ClassElement to use func.
     */
    pub fn toClassElement(self) -> ClassElement {
        for (classElement in ClassElement(__all_data__)) {
            if (self.id = classElement.id) {
                return classElement
            }
        }
    }
    
    /**
     * trans to TypeElement to use func.
     */
    pub fn toTypeElement(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.id = typeElement.id) {
                return typeElement
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A SemicolonClassElementDO load semicolon_class_element from db
 */
schema SemicolonClassElementDO {
    @primary id: int,
}

/**
 * A SemicolonClassElement
 */
schema SemicolonClassElement extends ClassElement {
}
impl SemicolonClassElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SemicolonClassElement {
        for (fa in ClassElement(db)) {
            for (son in SemicolonClassElementDO(db)) {
                if (son.key_eq(fa)) {
                    yield SemicolonClassElement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A PropertyAssignmentDO load property_assignment from db
 */
schema PropertyAssignmentDO {
    @primary id: int,
    name_node_id: int,
    initializer_id: int
}

/**
 * A PropertyAssignment
 */
schema PropertyAssignment extends ObjectLiteralElement {
    name_node_id: int,
    initializer_id: int
}
impl PropertyAssignment {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertyAssignment {
        for (fa in ObjectLiteralElement(db)) {
            for (son in PropertyAssignmentDO(db)) {
                if (son.key_eq(fa)) {
                    yield PropertyAssignment {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id,
                        initializer_id : son.initializer_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * Gets the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.initializer_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A ShorthandPropertyAssignmentDO load shorthand_property_assignment from db
 */
schema ShorthandPropertyAssignmentDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A ShorthandPropertyAssignment
 */
schema ShorthandPropertyAssignment extends ObjectLiteralElement {
    name_node_id: int
}
impl ShorthandPropertyAssignment {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ShorthandPropertyAssignment {
        for (fa in ObjectLiteralElement(db)) {
            for (son in ShorthandPropertyAssignmentDO(db)) {
                if (son.key_eq(fa)) {
                    yield ShorthandPropertyAssignment {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Gets the value symbol associated with this shorthand property assignment.
     */
    pub fn getSymbol(self) -> Symbol {
        for (shorthandPropertyAssignmentValueSymbol in ShorthandPropertyAssignmentValueSymbol(__all_data__)) {
            if (shorthandPropertyAssignmentValueSymbol.shorthand_property_assignment_id = self.id) {
                return shorthandPropertyAssignmentValueSymbol.getSymbol()
            }
        }
    }
    
}

/**
 * A SpreadAssignmentDO load spread_assignment from db
 */
schema SpreadAssignmentDO {
    @primary id: int,
    expression_id: int
}

/**
 * A SpreadAssignment
 */
schema SpreadAssignment extends ObjectLiteralElement {
    expression_id: int
}
impl SpreadAssignment {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SpreadAssignment {
        for (fa in ObjectLiteralElement(db)) {
            for (son in SpreadAssignmentDO(db)) {
                if (son.key_eq(fa)) {
                    yield SpreadAssignment {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A EnumMemberDO load enum_member from db
 */
schema EnumMemberDO {
    @primary id: int,
    parent_id: int,
    index: int,
    name_node_id: int
}

/**
 * A EnumMember
 */
schema EnumMember extends Declaration {
    name_node_id: int
}
impl EnumMember {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EnumMember {
        for (fa in Declaration(db)) {
            for (son in EnumMemberDO(db)) {
                if (son.key_eq(fa)) {
                    yield EnumMember {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> EnumDeclaration {
        for (enumDeclaration in EnumDeclaration(__all_data__)) {
            if (self.parent_id = enumDeclaration.id) {
                return enumDeclaration
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * Get the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (enumMemberInitializer in EnumMemberInitializer(__all_data__)) {
            if (enumMemberInitializer.enum_member_id = self.id) {
                return enumMemberInitializer.getInitializer()
            }
        }
    }
    
}

/**
 * A EnumMemberInitializerDO load enum_member_initializer from db
 */
schema EnumMemberInitializerDO {
    @primary enum_member_id: int,
    initializer_id: int
}

/**
 * A EnumMemberInitializer
 */
schema EnumMemberInitializer {
    @primary enum_member_id: int,
    initializer_id: int
}
impl EnumMemberInitializer {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EnumMemberInitializer {
        for (enumMemberInitializer in EnumMemberInitializerDO(db)) {
            yield EnumMemberInitializer {
                enum_member_id: enumMemberInitializer.enum_member_id,
                initializer_id : enumMemberInitializer.initializer_id
            }
        }
    }
    
    /**
     * Gets the enumMember.
     */
    pub fn getEnumMember(self) -> EnumMember {
        for (enumMember in EnumMember(__all_data__)) {
            if (self.enum_member_id = enumMember.id) {
                return enumMember
            }
        }
    }
    
    /**
     * Gets the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.initializer_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.enum_member_id
    }
    
}

/**
 * A SignatureDeclarationDO load signature_declaration from db
 */
schema SignatureDeclarationDO {
    @primary id: int,
    kind: int
}

/**
 * A SignatureDeclaration
 */
schema SignatureDeclaration extends Declaration {
}
impl SignatureDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SignatureDeclaration {
        for (fa in Declaration(db)) {
            for (son in SignatureDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield SignatureDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (signatureDeclarationNameNode in SignatureDeclarationNameNode(__all_data__)) {
            if (signatureDeclarationNameNode.signature_declaration_id = self.id) {
                return signatureDeclarationNameNode.getNameNode()
            }
        }
    }
    
    /**
     * Get the typeParameter.
     */
    pub fn getTypeParameter(self) -> *TypeParameter {
        for (signatureDeclarationTypeParameter in SignatureDeclarationTypeParameter(__all_data__)) {
            if (signatureDeclarationTypeParameter.signature_declaration_id = self.id) {
                yield signatureDeclarationTypeParameter.getTypeParameter()
            }
        }
    }
    
    /**
     * Get the parameter.
     */
    pub fn getParameter(self) -> *Parameter {
        for (signatureDeclarationParameter in SignatureDeclarationParameter(__all_data__)) {
            if (signatureDeclarationParameter.signature_declaration_id = self.id) {
                yield signatureDeclarationParameter.getParameter()
            }
        }
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (signatureDeclarationTypeNode in SignatureDeclarationTypeNode(__all_data__)) {
            if (signatureDeclarationTypeNode.signature_declaration_id = self.id) {
                return signatureDeclarationTypeNode.getTypeNode()
            }
        }
    }
    
}

/**
 * A SignatureDeclarationNameNodeDO load signature_declaration_name_node from db
 */
schema SignatureDeclarationNameNodeDO {
    @primary signature_declaration_id: int,
    name_node_id: int
}

/**
 * A SignatureDeclarationNameNode
 */
schema SignatureDeclarationNameNode {
    @primary signature_declaration_id: int,
    name_node_id: int
}
impl SignatureDeclarationNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SignatureDeclarationNameNode {
        for (signatureDeclarationNameNode in SignatureDeclarationNameNodeDO(db)) {
            yield SignatureDeclarationNameNode {
                signature_declaration_id: signatureDeclarationNameNode.signature_declaration_id,
                name_node_id : signatureDeclarationNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the signatureDeclaration.
     */
    pub fn getSignatureDeclaration(self) -> SignatureDeclaration {
        for (signatureDeclaration in SignatureDeclaration(__all_data__)) {
            if (self.signature_declaration_id = signatureDeclaration.id) {
                return signatureDeclaration
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.signature_declaration_id
    }
    
}

/**
 * A SignatureDeclarationTypeParameterDO load signature_declaration_type_parameter from db
 */
schema SignatureDeclarationTypeParameterDO {
    @primary type_parameter_id: int,
    signature_declaration_id: int,
    index: int
}

/**
 * A SignatureDeclarationTypeParameter
 */
schema SignatureDeclarationTypeParameter {
    @primary type_parameter_id: int,
    signature_declaration_id: int,
    index: int
}
impl SignatureDeclarationTypeParameter {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SignatureDeclarationTypeParameter {
        for (signatureDeclarationTypeParameter in SignatureDeclarationTypeParameterDO(db)) {
            yield SignatureDeclarationTypeParameter {
                type_parameter_id: signatureDeclarationTypeParameter.type_parameter_id,
                signature_declaration_id : signatureDeclarationTypeParameter.signature_declaration_id,
                index : signatureDeclarationTypeParameter.index
            }
        }
    }
    
    /**
     * Gets the typeParameter.
     */
    pub fn getTypeParameter(self) -> TypeParameter {
        for (typeParameter in TypeParameter(__all_data__)) {
            if (self.type_parameter_id = typeParameter.id) {
                return typeParameter
            }
        }
    }
    
    /**
     * Gets the signatureDeclaration.
     */
    pub fn getSignatureDeclaration(self) -> SignatureDeclaration {
        for (signatureDeclaration in SignatureDeclaration(__all_data__)) {
            if (self.signature_declaration_id = signatureDeclaration.id) {
                return signatureDeclaration
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_parameter_id
    }
    
}

/**
 * A SignatureDeclarationParameterDO load signature_declaration_parameter from db
 */
schema SignatureDeclarationParameterDO {
    @primary parameter_id: int,
    signature_declaration_id: int,
    index: int
}

/**
 * A SignatureDeclarationParameter
 */
schema SignatureDeclarationParameter {
    @primary parameter_id: int,
    signature_declaration_id: int,
    index: int
}
impl SignatureDeclarationParameter {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SignatureDeclarationParameter {
        for (signatureDeclarationParameter in SignatureDeclarationParameterDO(db)) {
            yield SignatureDeclarationParameter {
                parameter_id: signatureDeclarationParameter.parameter_id,
                signature_declaration_id : signatureDeclarationParameter.signature_declaration_id,
                index : signatureDeclarationParameter.index
            }
        }
    }
    
    /**
     * Gets the parameter.
     */
    pub fn getParameter(self) -> Parameter {
        for (parameter in Parameter(__all_data__)) {
            if (self.parameter_id = parameter.id) {
                return parameter
            }
        }
    }
    
    /**
     * Gets the signatureDeclaration.
     */
    pub fn getSignatureDeclaration(self) -> SignatureDeclaration {
        for (signatureDeclaration in SignatureDeclaration(__all_data__)) {
            if (self.signature_declaration_id = signatureDeclaration.id) {
                return signatureDeclaration
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.parameter_id
    }
    
}

/**
 * A SignatureDeclarationTypeNodeDO load signature_declaration_type_node from db
 */
schema SignatureDeclarationTypeNodeDO {
    @primary signature_declaration_id: int,
    type_node_id: int
}

/**
 * A SignatureDeclarationTypeNode
 */
schema SignatureDeclarationTypeNode {
    @primary signature_declaration_id: int,
    type_node_id: int
}
impl SignatureDeclarationTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SignatureDeclarationTypeNode {
        for (signatureDeclarationTypeNode in SignatureDeclarationTypeNodeDO(db)) {
            yield SignatureDeclarationTypeNode {
                signature_declaration_id: signatureDeclarationTypeNode.signature_declaration_id,
                type_node_id : signatureDeclarationTypeNode.type_node_id
            }
        }
    }
    
    /**
     * Gets the signatureDeclaration.
     */
    pub fn getSignatureDeclaration(self) -> SignatureDeclaration {
        for (signatureDeclaration in SignatureDeclaration(__all_data__)) {
            if (self.signature_declaration_id = signatureDeclaration.id) {
                return signatureDeclaration
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.signature_declaration_id
    }
    
}

/**
 * A FunctionLikeDeclarationDO load function_like_declaration from db
 */
schema FunctionLikeDeclarationDO {
    @primary id: int,
    kind: int
}

/**
 * A FunctionLikeDeclaration
 */
schema FunctionLikeDeclaration extends SignatureDeclaration {
}
impl FunctionLikeDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionLikeDeclaration {
        for (fa in SignatureDeclaration(db)) {
            for (son in FunctionLikeDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield FunctionLikeDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the asteriskToken.
     */
    pub fn getAsteriskToken(self) -> AsteriskToken {
        for (functionLikeDeclarationAsteriskToken in FunctionLikeDeclarationAsteriskToken(__all_data__)) {
            if (functionLikeDeclarationAsteriskToken.function_like_declaration_id = self.id) {
                return functionLikeDeclarationAsteriskToken.getAsteriskToken()
            }
        }
    }
    
    /**
     * Get the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (functionLikeDeclarationQuestionToken in FunctionLikeDeclarationQuestionToken(__all_data__)) {
            if (functionLikeDeclarationQuestionToken.function_like_declaration_id = self.id) {
                return functionLikeDeclarationQuestionToken.getQuestionToken()
            }
        }
    }
    
    /**
     * Get the exclamationToken.
     */
    pub fn getExclamationToken(self) -> ExclamationToken {
        for (functionLikeDeclarationExclamationToken in FunctionLikeDeclarationExclamationToken(__all_data__)) {
            if (functionLikeDeclarationExclamationToken.function_like_declaration_id = self.id) {
                return functionLikeDeclarationExclamationToken.getExclamationToken()
            }
        }
    }
    
    /**
     * Get the body.
     */
    pub fn getBody(self) -> BlockOrExpression {
        for (functionLikeDeclarationBody in FunctionLikeDeclarationBody(__all_data__)) {
            if (functionLikeDeclarationBody.function_like_declaration_id = self.id) {
                return functionLikeDeclarationBody.getBody()
            }
        }
    }
    
}

/**
 * A FunctionLikeDeclarationAsteriskTokenDO load function_like_declaration_asterisk_token from db
 */
schema FunctionLikeDeclarationAsteriskTokenDO {
    @primary function_like_declaration_id: int,
    asterisk_token_id: int
}

/**
 * A FunctionLikeDeclarationAsteriskToken
 */
schema FunctionLikeDeclarationAsteriskToken {
    @primary function_like_declaration_id: int,
    asterisk_token_id: int
}
impl FunctionLikeDeclarationAsteriskToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionLikeDeclarationAsteriskToken {
        for (functionLikeDeclarationAsteriskToken in FunctionLikeDeclarationAsteriskTokenDO(db)) {
            yield FunctionLikeDeclarationAsteriskToken {
                function_like_declaration_id: functionLikeDeclarationAsteriskToken.function_like_declaration_id,
                asterisk_token_id : functionLikeDeclarationAsteriskToken.asterisk_token_id
            }
        }
    }
    
    /**
     * Gets the functionLikeDeclaration.
     */
    pub fn getFunctionLikeDeclaration(self) -> FunctionLikeDeclaration {
        for (functionLikeDeclaration in FunctionLikeDeclaration(__all_data__)) {
            if (self.function_like_declaration_id = functionLikeDeclaration.id) {
                return functionLikeDeclaration
            }
        }
    }
    
    /**
     * Gets the asteriskToken.
     */
    pub fn getAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (self.asterisk_token_id = asteriskToken.id) {
                return asteriskToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.function_like_declaration_id
    }
    
}

/**
 * A FunctionLikeDeclarationQuestionTokenDO load function_like_declaration_question_token from db
 */
schema FunctionLikeDeclarationQuestionTokenDO {
    @primary function_like_declaration_id: int,
    question_token_id: int
}

/**
 * A FunctionLikeDeclarationQuestionToken
 */
schema FunctionLikeDeclarationQuestionToken {
    @primary function_like_declaration_id: int,
    question_token_id: int
}
impl FunctionLikeDeclarationQuestionToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionLikeDeclarationQuestionToken {
        for (functionLikeDeclarationQuestionToken in FunctionLikeDeclarationQuestionTokenDO(db)) {
            yield FunctionLikeDeclarationQuestionToken {
                function_like_declaration_id: functionLikeDeclarationQuestionToken.function_like_declaration_id,
                question_token_id : functionLikeDeclarationQuestionToken.question_token_id
            }
        }
    }
    
    /**
     * Gets the functionLikeDeclaration.
     */
    pub fn getFunctionLikeDeclaration(self) -> FunctionLikeDeclaration {
        for (functionLikeDeclaration in FunctionLikeDeclaration(__all_data__)) {
            if (self.function_like_declaration_id = functionLikeDeclaration.id) {
                return functionLikeDeclaration
            }
        }
    }
    
    /**
     * Gets the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (questionToken in QuestionToken(__all_data__)) {
            if (self.question_token_id = questionToken.id) {
                return questionToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.function_like_declaration_id
    }
    
}

/**
 * A FunctionLikeDeclarationExclamationTokenDO load function_like_declaration_exclamation_token from db
 */
schema FunctionLikeDeclarationExclamationTokenDO {
    @primary function_like_declaration_id: int,
    exclamation_token_id: int
}

/**
 * A FunctionLikeDeclarationExclamationToken
 */
schema FunctionLikeDeclarationExclamationToken {
    @primary function_like_declaration_id: int,
    exclamation_token_id: int
}
impl FunctionLikeDeclarationExclamationToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionLikeDeclarationExclamationToken {
        for (functionLikeDeclarationExclamationToken in FunctionLikeDeclarationExclamationTokenDO(db)) {
            yield FunctionLikeDeclarationExclamationToken {
                function_like_declaration_id: functionLikeDeclarationExclamationToken.function_like_declaration_id,
                exclamation_token_id : functionLikeDeclarationExclamationToken.exclamation_token_id
            }
        }
    }
    
    /**
     * Gets the functionLikeDeclaration.
     */
    pub fn getFunctionLikeDeclaration(self) -> FunctionLikeDeclaration {
        for (functionLikeDeclaration in FunctionLikeDeclaration(__all_data__)) {
            if (self.function_like_declaration_id = functionLikeDeclaration.id) {
                return functionLikeDeclaration
            }
        }
    }
    
    /**
     * Gets the exclamationToken.
     */
    pub fn getExclamationToken(self) -> ExclamationToken {
        for (exclamationToken in ExclamationToken(__all_data__)) {
            if (self.exclamation_token_id = exclamationToken.id) {
                return exclamationToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.function_like_declaration_id
    }
    
}

/**
 * A FunctionLikeDeclarationBodyDO load function_like_declaration_body from db
 */
schema FunctionLikeDeclarationBodyDO {
    @primary function_like_declaration_id: int,
    body_id: int
}

/**
 * A FunctionLikeDeclarationBody
 */
schema FunctionLikeDeclarationBody {
    @primary function_like_declaration_id: int,
    body_id: int
}
impl FunctionLikeDeclarationBody {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionLikeDeclarationBody {
        for (functionLikeDeclarationBody in FunctionLikeDeclarationBodyDO(db)) {
            yield FunctionLikeDeclarationBody {
                function_like_declaration_id: functionLikeDeclarationBody.function_like_declaration_id,
                body_id : functionLikeDeclarationBody.body_id
            }
        }
    }
    
    /**
     * Gets the functionLikeDeclaration.
     */
    pub fn getFunctionLikeDeclaration(self) -> FunctionLikeDeclaration {
        for (functionLikeDeclaration in FunctionLikeDeclaration(__all_data__)) {
            if (self.function_like_declaration_id = functionLikeDeclaration.id) {
                return functionLikeDeclaration
            }
        }
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> BlockOrExpression {
        for (blockOrExpression in BlockOrExpression(__all_data__)) {
            if (self.body_id = blockOrExpression.id) {
                return blockOrExpression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.function_like_declaration_id
    }
    
}

/**
 * A ClassLikeDeclarationDO load class_like_declaration from db
 */
schema ClassLikeDeclarationDO {
    @primary id: int,
    kind: int
}

/**
 * A ClassLikeDeclaration
 */
schema ClassLikeDeclaration extends Declaration {
}
impl ClassLikeDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassLikeDeclaration {
        for (fa in Declaration(db)) {
            for (son in ClassLikeDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield ClassLikeDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (classLikeDeclarationNameNode in ClassLikeDeclarationNameNode(__all_data__)) {
            if (classLikeDeclarationNameNode.class_like_declaration_id = self.id) {
                return classLikeDeclarationNameNode.getNameNode()
            }
        }
    }
    
    /**
     * Get the typeParameter.
     */
    pub fn getTypeParameter(self) -> *TypeParameter {
        for (classLikeDeclarationTypeParameter in ClassLikeDeclarationTypeParameter(__all_data__)) {
            if (classLikeDeclarationTypeParameter.class_like_declaration_id = self.id) {
                yield classLikeDeclarationTypeParameter.getTypeParameter()
            }
        }
    }
    
    /**
     * Get the member.
     */
    pub fn getMember(self) -> *ClassElement {
        for (classLikeDeclarationMember in ClassLikeDeclarationMember(__all_data__)) {
            if (classLikeDeclarationMember.class_like_declaration_id = self.id) {
                yield classLikeDeclarationMember.getMember()
            }
        }
    }
    
    /**
     * Get the heritageClauses.
     */
    pub fn getHeritageClauses(self) -> *HeritageClause {
        for (heritageClause in HeritageClause(__all_data__)) {
            if (heritageClause.parent_id = self.id) {
                yield heritageClause
            }
        }
    }
    
}

/**
 * A ClassLikeDeclarationNameNodeDO load class_like_declaration_name_node from db
 */
schema ClassLikeDeclarationNameNodeDO {
    @primary class_like_declaration_id: int,
    name_node_id: int
}

/**
 * A ClassLikeDeclarationNameNode
 */
schema ClassLikeDeclarationNameNode {
    @primary class_like_declaration_id: int,
    name_node_id: int
}
impl ClassLikeDeclarationNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassLikeDeclarationNameNode {
        for (classLikeDeclarationNameNode in ClassLikeDeclarationNameNodeDO(db)) {
            yield ClassLikeDeclarationNameNode {
                class_like_declaration_id: classLikeDeclarationNameNode.class_like_declaration_id,
                name_node_id : classLikeDeclarationNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the classLikeDeclaration.
     */
    pub fn getClassLikeDeclaration(self) -> ClassLikeDeclaration {
        for (classLikeDeclaration in ClassLikeDeclaration(__all_data__)) {
            if (self.class_like_declaration_id = classLikeDeclaration.id) {
                return classLikeDeclaration
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.class_like_declaration_id
    }
    
}

/**
 * A ClassLikeDeclarationTypeParameterDO load class_like_declaration_type_parameter from db
 */
schema ClassLikeDeclarationTypeParameterDO {
    @primary type_parameter_id: int,
    class_like_declaration_id: int,
    index: int
}

/**
 * A ClassLikeDeclarationTypeParameter
 */
schema ClassLikeDeclarationTypeParameter {
    @primary type_parameter_id: int,
    class_like_declaration_id: int,
    index: int
}
impl ClassLikeDeclarationTypeParameter {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassLikeDeclarationTypeParameter {
        for (classLikeDeclarationTypeParameter in ClassLikeDeclarationTypeParameterDO(db)) {
            yield ClassLikeDeclarationTypeParameter {
                type_parameter_id: classLikeDeclarationTypeParameter.type_parameter_id,
                class_like_declaration_id : classLikeDeclarationTypeParameter.class_like_declaration_id,
                index : classLikeDeclarationTypeParameter.index
            }
        }
    }
    
    /**
     * Gets the typeParameter.
     */
    pub fn getTypeParameter(self) -> TypeParameter {
        for (typeParameter in TypeParameter(__all_data__)) {
            if (self.type_parameter_id = typeParameter.id) {
                return typeParameter
            }
        }
    }
    
    /**
     * Gets the classLikeDeclaration.
     */
    pub fn getClassLikeDeclaration(self) -> ClassLikeDeclaration {
        for (classLikeDeclaration in ClassLikeDeclaration(__all_data__)) {
            if (self.class_like_declaration_id = classLikeDeclaration.id) {
                return classLikeDeclaration
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_parameter_id
    }
    
}

/**
 * A ClassLikeDeclarationMemberDO load class_like_declaration_member from db
 */
schema ClassLikeDeclarationMemberDO {
    @primary member_id: int,
    class_like_declaration_id: int,
    index: int
}

/**
 * A ClassLikeDeclarationMember
 */
schema ClassLikeDeclarationMember {
    @primary member_id: int,
    class_like_declaration_id: int,
    index: int
}
impl ClassLikeDeclarationMember {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassLikeDeclarationMember {
        for (classLikeDeclarationMember in ClassLikeDeclarationMemberDO(db)) {
            yield ClassLikeDeclarationMember {
                member_id: classLikeDeclarationMember.member_id,
                class_like_declaration_id : classLikeDeclarationMember.class_like_declaration_id,
                index : classLikeDeclarationMember.index
            }
        }
    }
    
    /**
     * Gets the member.
     */
    pub fn getMember(self) -> ClassElement {
        for (classElement in ClassElement(__all_data__)) {
            if (self.member_id = classElement.id) {
                return classElement
            }
        }
    }
    
    /**
     * Gets the classLikeDeclaration.
     */
    pub fn getClassLikeDeclaration(self) -> ClassLikeDeclaration {
        for (classLikeDeclaration in ClassLikeDeclaration(__all_data__)) {
            if (self.class_like_declaration_id = classLikeDeclaration.id) {
                return classLikeDeclaration
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.member_id
    }
    
}

/**
 * A ThisTypeDO load this_type from db
 */
schema ThisTypeDO {
    @primary id: int,
}

/**
 * A ThisType
 */
schema ThisType extends TypeNode {
}
impl ThisType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ThisType {
        for (fa in TypeNode(db)) {
            for (son in ThisTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield ThisType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A TypePredicateDO load type_predicate from db
 */
schema TypePredicateDO {
    @primary id: int,
    parameter_name_node_id: int
}

/**
 * A TypePredicate
 */
schema TypePredicate extends TypeNode {
    parameter_name_node_id: int
}
impl TypePredicate {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypePredicate {
        for (fa in TypeNode(db)) {
            for (son in TypePredicateDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypePredicate {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        parameter_name_node_id : son.parameter_name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parameterNameNode.
     */
    pub fn getParameterNameNode(self) -> IdentifierOrThisType {
        for (identifierOrThisType in IdentifierOrThisType(__all_data__)) {
            if (self.parameter_name_node_id = identifierOrThisType.id) {
                return identifierOrThisType
            }
        }
    }
    
    /**
     * Get the assertsModifier.
     */
    pub fn getAssertsModifier(self) -> AssertsKeyword {
        for (typePredicateAssertsModifier in TypePredicateAssertsModifier(__all_data__)) {
            if (typePredicateAssertsModifier.type_predicate_id = self.id) {
                return typePredicateAssertsModifier.getAssertsModifier()
            }
        }
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typePredicateTypeNode in TypePredicateTypeNode(__all_data__)) {
            if (typePredicateTypeNode.type_predicate_id = self.id) {
                return typePredicateTypeNode.getTypeNode()
            }
        }
    }
    
}

/**
 * A TypePredicateAssertsModifierDO load type_predicate_asserts_modifier from db
 */
schema TypePredicateAssertsModifierDO {
    @primary type_predicate_id: int,
    asserts_modifier_id: int
}

/**
 * A TypePredicateAssertsModifier
 */
schema TypePredicateAssertsModifier {
    @primary type_predicate_id: int,
    asserts_modifier_id: int
}
impl TypePredicateAssertsModifier {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypePredicateAssertsModifier {
        for (typePredicateAssertsModifier in TypePredicateAssertsModifierDO(db)) {
            yield TypePredicateAssertsModifier {
                type_predicate_id: typePredicateAssertsModifier.type_predicate_id,
                asserts_modifier_id : typePredicateAssertsModifier.asserts_modifier_id
            }
        }
    }
    
    /**
     * Gets the typePredicate.
     */
    pub fn getTypePredicate(self) -> TypePredicate {
        for (typePredicate in TypePredicate(__all_data__)) {
            if (self.type_predicate_id = typePredicate.id) {
                return typePredicate
            }
        }
    }
    
    /**
     * Gets the assertsModifier.
     */
    pub fn getAssertsModifier(self) -> AssertsKeyword {
        for (assertsKeyword in AssertsKeyword(__all_data__)) {
            if (self.asserts_modifier_id = assertsKeyword.id) {
                return assertsKeyword
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_predicate_id
    }
    
}

/**
 * A TypePredicateTypeNodeDO load type_predicate_type_node from db
 */
schema TypePredicateTypeNodeDO {
    @primary type_predicate_id: int,
    type_node_id: int
}

/**
 * A TypePredicateTypeNode
 */
schema TypePredicateTypeNode {
    @primary type_predicate_id: int,
    type_node_id: int
}
impl TypePredicateTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypePredicateTypeNode {
        for (typePredicateTypeNode in TypePredicateTypeNodeDO(db)) {
            yield TypePredicateTypeNode {
                type_predicate_id: typePredicateTypeNode.type_predicate_id,
                type_node_id : typePredicateTypeNode.type_node_id
            }
        }
    }
    
    /**
     * Gets the typePredicate.
     */
    pub fn getTypePredicate(self) -> TypePredicate {
        for (typePredicate in TypePredicate(__all_data__)) {
            if (self.type_predicate_id = typePredicate.id) {
                return typePredicate
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_predicate_id
    }
    
}

/**
 * A NodeWithTypeArgumentsDO load node_with_type_arguments from db
 */
schema NodeWithTypeArgumentsDO {
    @primary id: int,
    kind: int
}

/**
 * A NodeWithTypeArguments
 */
schema NodeWithTypeArguments extends TypeNode {
}
impl NodeWithTypeArguments {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NodeWithTypeArguments {
        for (fa in TypeNode(db)) {
            for (son in NodeWithTypeArgumentsDO(db)) {
                if (son.key_eq(fa)) {
                    yield NodeWithTypeArguments {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the typeArgument.
     */
    pub fn getTypeArgument(self) -> *TypeNode {
        for (nodeWithTypeArgumentsTypeArgument in NodeWithTypeArgumentsTypeArgument(__all_data__)) {
            if (nodeWithTypeArgumentsTypeArgument.node_with_type_arguments_id = self.id) {
                yield nodeWithTypeArgumentsTypeArgument.getTypeArgument()
            }
        }
    }
    
}

/**
 * A NodeWithTypeArgumentsTypeArgumentDO load node_with_type_arguments_type_argument from db
 */
schema NodeWithTypeArgumentsTypeArgumentDO {
    @primary type_argument_id: int,
    node_with_type_arguments_id: int,
    index: int
}

/**
 * A NodeWithTypeArgumentsTypeArgument
 */
schema NodeWithTypeArgumentsTypeArgument {
    @primary type_argument_id: int,
    node_with_type_arguments_id: int,
    index: int
}
impl NodeWithTypeArgumentsTypeArgument {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NodeWithTypeArgumentsTypeArgument {
        for (nodeWithTypeArgumentsTypeArgument in NodeWithTypeArgumentsTypeArgumentDO(db)) {
            yield NodeWithTypeArgumentsTypeArgument {
                type_argument_id: nodeWithTypeArgumentsTypeArgument.type_argument_id,
                node_with_type_arguments_id : nodeWithTypeArgumentsTypeArgument.node_with_type_arguments_id,
                index : nodeWithTypeArgumentsTypeArgument.index
            }
        }
    }
    
    /**
     * Gets the typeArgument.
     */
    pub fn getTypeArgument(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_argument_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the nodeWithTypeArguments.
     */
    pub fn getNodeWithTypeArguments(self) -> NodeWithTypeArguments {
        for (nodeWithTypeArguments in NodeWithTypeArguments(__all_data__)) {
            if (self.node_with_type_arguments_id = nodeWithTypeArguments.id) {
                return nodeWithTypeArguments
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_argument_id
    }
    
}

/**
 * A TypeReferenceDO load type_reference from db
 */
schema TypeReferenceDO {
    @primary id: int,
    type_name_node_id: int
}

/**
 * A TypeReference
 */
schema TypeReference extends NodeWithTypeArguments {
    type_name_node_id: int
}
impl TypeReference {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeReference {
        for (fa in NodeWithTypeArguments(db)) {
            for (son in TypeReferenceDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeReference {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_name_node_id : son.type_name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the typeNameNode.
     */
    pub fn getTypeNameNode(self) -> EntityName {
        for (entityName in EntityName(__all_data__)) {
            if (self.type_name_node_id = entityName.id) {
                return entityName
            }
        }
    }
    
}

/**
 * A FunctionOrConstructorTypeDO load function_or_constructor_type from db
 */
schema FunctionOrConstructorTypeDO {
    @primary id: int,
    kind: int,
    type_node_id: int
}

/**
 * A FunctionOrConstructorType
 */
schema FunctionOrConstructorType extends TypeNode {
    type_node_id: int
}
impl FunctionOrConstructorType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionOrConstructorType {
        for (fa in TypeNode(db)) {
            for (son in FunctionOrConstructorTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield FunctionOrConstructorType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * trans to SignatureDeclaration to use func.
     */
    pub fn toSignatureDeclaration(self) -> SignatureDeclaration {
        for (signatureDeclaration in SignatureDeclaration(__all_data__)) {
            if (self.id = signatureDeclaration.id) {
                return signatureDeclaration
            }
        }
    }
    
}

/**
 * A FunctionTypeDO load function_type from db
 */
schema FunctionTypeDO {
    @primary id: int,
}

/**
 * A FunctionType
 */
schema FunctionType extends FunctionOrConstructorType {
}
impl FunctionType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionType {
        for (fa in FunctionOrConstructorType(db)) {
            for (son in FunctionTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield FunctionType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_node_id : fa.type_node_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ConstructorTypeDO load constructor_type from db
 */
schema ConstructorTypeDO {
    @primary id: int,
}

/**
 * A ConstructorType
 */
schema ConstructorType extends FunctionOrConstructorType {
}
impl ConstructorType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ConstructorType {
        for (fa in FunctionOrConstructorType(db)) {
            for (son in ConstructorTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield ConstructorType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_node_id : fa.type_node_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A TypeQueryDO load type_query from db
 */
schema TypeQueryDO {
    @primary id: int,
    expression_name_node_id: int
}

/**
 * A TypeQuery
 */
schema TypeQuery extends NodeWithTypeArguments {
    expression_name_node_id: int
}
impl TypeQuery {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeQuery {
        for (fa in NodeWithTypeArguments(db)) {
            for (son in TypeQueryDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeQuery {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_name_node_id : son.expression_name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expressionNameNode.
     */
    pub fn getExpressionNameNode(self) -> EntityName {
        for (entityName in EntityName(__all_data__)) {
            if (self.expression_name_node_id = entityName.id) {
                return entityName
            }
        }
    }
    
}

/**
 * A TypeLiteralDO load type_literal from db
 */
schema TypeLiteralDO {
    @primary id: int,
}

/**
 * A TypeLiteral
 */
schema TypeLiteral extends TypeNode {
}
impl TypeLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeLiteral {
        for (fa in TypeNode(db)) {
            for (son in TypeLiteralDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeLiteral {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
    /**
     * Get the member.
     */
    pub fn getMember(self) -> *TypeElement {
        for (typeLiteralMember in TypeLiteralMember(__all_data__)) {
            if (typeLiteralMember.type_literal_id = self.id) {
                yield typeLiteralMember.getMember()
            }
        }
    }
    
}

/**
 * A TypeLiteralMemberDO load type_literal_member from db
 */
schema TypeLiteralMemberDO {
    @primary member_id: int,
    type_literal_id: int,
    index: int
}

/**
 * A TypeLiteralMember
 */
schema TypeLiteralMember {
    @primary member_id: int,
    type_literal_id: int,
    index: int
}
impl TypeLiteralMember {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeLiteralMember {
        for (typeLiteralMember in TypeLiteralMemberDO(db)) {
            yield TypeLiteralMember {
                member_id: typeLiteralMember.member_id,
                type_literal_id : typeLiteralMember.type_literal_id,
                index : typeLiteralMember.index
            }
        }
    }
    
    /**
     * Gets the member.
     */
    pub fn getMember(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.member_id = typeElement.id) {
                return typeElement
            }
        }
    }
    
    /**
     * Gets the typeLiteral.
     */
    pub fn getTypeLiteral(self) -> TypeLiteral {
        for (typeLiteral in TypeLiteral(__all_data__)) {
            if (self.type_literal_id = typeLiteral.id) {
                return typeLiteral
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.member_id
    }
    
}

/**
 * A ArrayTypeDO load array_type from db
 */
schema ArrayTypeDO {
    @primary id: int,
    element_type_node_id: int
}

/**
 * A ArrayType
 */
schema ArrayType extends TypeNode {
    element_type_node_id: int
}
impl ArrayType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ArrayType {
        for (fa in TypeNode(db)) {
            for (son in ArrayTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield ArrayType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        element_type_node_id : son.element_type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the elementTypeNode.
     */
    pub fn getElementTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.element_type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
}

/**
 * A TupleTypeDO load tuple_type from db
 */
schema TupleTypeDO {
    @primary id: int,
}

/**
 * A TupleType
 */
schema TupleType extends TypeNode {
}
impl TupleType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TupleType {
        for (fa in TypeNode(db)) {
            for (son in TupleTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield TupleType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the element.
     */
    pub fn getElement(self) -> *TypeNode {
        for (tupleTypeElement in TupleTypeElement(__all_data__)) {
            if (tupleTypeElement.tuple_type_id = self.id) {
                yield tupleTypeElement.getElement()
            }
        }
    }
    
}

/**
 * A TupleTypeElementDO load tuple_type_element from db
 */
schema TupleTypeElementDO {
    @primary element_id: int,
    tuple_type_id: int,
    index: int
}

/**
 * A TupleTypeElement
 */
schema TupleTypeElement {
    @primary element_id: int,
    tuple_type_id: int,
    index: int
}
impl TupleTypeElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TupleTypeElement {
        for (tupleTypeElement in TupleTypeElementDO(db)) {
            yield TupleTypeElement {
                element_id: tupleTypeElement.element_id,
                tuple_type_id : tupleTypeElement.tuple_type_id,
                index : tupleTypeElement.index
            }
        }
    }
    
    /**
     * Gets the element.
     */
    pub fn getElement(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.element_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the tupleType.
     */
    pub fn getTupleType(self) -> TupleType {
        for (tupleType in TupleType(__all_data__)) {
            if (self.tuple_type_id = tupleType.id) {
                return tupleType
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.element_id
    }
    
}

/**
 * A OptionalTypeDO load optional_type from db
 */
schema OptionalTypeDO {
    @primary id: int,
    type_node_id: int
}

/**
 * A OptionalType
 */
schema OptionalType extends TypeNode {
    type_node_id: int
}
impl OptionalType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *OptionalType {
        for (fa in TypeNode(db)) {
            for (son in OptionalTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield OptionalType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
}

/**
 * A RestTypeDO load rest_type from db
 */
schema RestTypeDO {
    @primary id: int,
    type_node_id: int
}

/**
 * A RestType
 */
schema RestType extends TypeNode {
    type_node_id: int
}
impl RestType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *RestType {
        for (fa in TypeNode(db)) {
            for (son in RestTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield RestType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
}

/**
 * A UnionTypeDO load union_type from db
 */
schema UnionTypeDO {
    @primary id: int,
}

/**
 * A UnionType
 */
schema UnionType extends TypeNode {
}
impl UnionType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *UnionType {
        for (fa in TypeNode(db)) {
            for (son in UnionTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield UnionType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> *TypeNode {
        for (unionTypeTypeNode in UnionTypeTypeNode(__all_data__)) {
            if (unionTypeTypeNode.union_type_id = self.id) {
                yield unionTypeTypeNode.getTypeNode()
            }
        }
    }
    
}

/**
 * A UnionTypeTypeNodeDO load union_type_type_node from db
 */
schema UnionTypeTypeNodeDO {
    @primary type_node_id: int,
    union_type_id: int,
    index: int
}

/**
 * A UnionTypeTypeNode
 */
schema UnionTypeTypeNode {
    @primary type_node_id: int,
    union_type_id: int,
    index: int
}
impl UnionTypeTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *UnionTypeTypeNode {
        for (unionTypeTypeNode in UnionTypeTypeNodeDO(db)) {
            yield UnionTypeTypeNode {
                type_node_id: unionTypeTypeNode.type_node_id,
                union_type_id : unionTypeTypeNode.union_type_id,
                index : unionTypeTypeNode.index
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the unionType.
     */
    pub fn getUnionType(self) -> UnionType {
        for (unionType in UnionType(__all_data__)) {
            if (self.union_type_id = unionType.id) {
                return unionType
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_node_id
    }
    
}

/**
 * A IntersectionTypeDO load intersection_type from db
 */
schema IntersectionTypeDO {
    @primary id: int,
}

/**
 * A IntersectionType
 */
schema IntersectionType extends TypeNode {
}
impl IntersectionType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IntersectionType {
        for (fa in TypeNode(db)) {
            for (son in IntersectionTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield IntersectionType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> *TypeNode {
        for (intersectionTypeTypeNode in IntersectionTypeTypeNode(__all_data__)) {
            if (intersectionTypeTypeNode.intersection_type_id = self.id) {
                yield intersectionTypeTypeNode.getTypeNode()
            }
        }
    }
    
}

/**
 * A IntersectionTypeTypeNodeDO load intersection_type_type_node from db
 */
schema IntersectionTypeTypeNodeDO {
    @primary type_node_id: int,
    intersection_type_id: int,
    index: int
}

/**
 * A IntersectionTypeTypeNode
 */
schema IntersectionTypeTypeNode {
    @primary type_node_id: int,
    intersection_type_id: int,
    index: int
}
impl IntersectionTypeTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IntersectionTypeTypeNode {
        for (intersectionTypeTypeNode in IntersectionTypeTypeNodeDO(db)) {
            yield IntersectionTypeTypeNode {
                type_node_id: intersectionTypeTypeNode.type_node_id,
                intersection_type_id : intersectionTypeTypeNode.intersection_type_id,
                index : intersectionTypeTypeNode.index
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the intersectionType.
     */
    pub fn getIntersectionType(self) -> IntersectionType {
        for (intersectionType in IntersectionType(__all_data__)) {
            if (self.intersection_type_id = intersectionType.id) {
                return intersectionType
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_node_id
    }
    
}

/**
 * A ConditionalTypeDO load conditional_type from db
 */
schema ConditionalTypeDO {
    @primary id: int,
    check_type_node_id: int,
    extends_type_node_id: int,
    then_type_node_id: int,
    else_type_node_id: int
}

/**
 * A ConditionalType
 */
schema ConditionalType extends TypeNode {
    check_type_node_id: int,
    extends_type_node_id: int,
    then_type_node_id: int,
    else_type_node_id: int
}
impl ConditionalType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ConditionalType {
        for (fa in TypeNode(db)) {
            for (son in ConditionalTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield ConditionalType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        check_type_node_id : son.check_type_node_id,
                        extends_type_node_id : son.extends_type_node_id,
                        then_type_node_id : son.then_type_node_id,
                        else_type_node_id : son.else_type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the checkTypeNode.
     */
    pub fn getCheckTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.check_type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the extendsTypeNode.
     */
    pub fn getExtendsTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.extends_type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the thenTypeNode.
     */
    pub fn getThenTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.then_type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the elseTypeNode.
     */
    pub fn getElseTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.else_type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
}

/**
 * A InferTypeDO load infer_type from db
 */
schema InferTypeDO {
    @primary id: int,
    type_parameter_id: int
}

/**
 * A InferType
 */
schema InferType extends TypeNode {
    type_parameter_id: int
}
impl InferType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *InferType {
        for (fa in TypeNode(db)) {
            for (son in InferTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield InferType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_parameter_id : son.type_parameter_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the typeParameter.
     */
    pub fn getTypeParameter(self) -> TypeParameter {
        for (typeParameter in TypeParameter(__all_data__)) {
            if (self.type_parameter_id = typeParameter.id) {
                return typeParameter
            }
        }
    }
    
}

/**
 * A ParenthesizedTypeDO load parenthesized_type from db
 */
schema ParenthesizedTypeDO {
    @primary id: int,
    type_node_id: int
}

/**
 * A ParenthesizedType
 */
schema ParenthesizedType extends TypeNode {
    type_node_id: int
}
impl ParenthesizedType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ParenthesizedType {
        for (fa in TypeNode(db)) {
            for (son in ParenthesizedTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield ParenthesizedType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
}

/**
 * A TypeOperatorDO load type_operator from db
 */
schema TypeOperatorDO {
    @primary id: int,
    operator_id: int,
    type_node_id: int
}

/**
 * A TypeOperator
 */
schema TypeOperator extends TypeNode {
    operator_id: int,
    type_node_id: int
}
impl TypeOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeOperator {
        for (fa in TypeNode(db)) {
            for (son in TypeOperatorDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeOperator {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        operator_id : son.operator_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the operator.
     */
    pub fn getOperator(self) -> TypeOperatorOperatorType {
        for (typeOperatorOperatorType in TypeOperatorOperatorType(__all_data__)) {
            if (self.operator_id = typeOperatorOperatorType.id) {
                return typeOperatorOperatorType
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
}

/**
 * A IndexedAccessTypeDO load indexed_access_type from db
 */
schema IndexedAccessTypeDO {
    @primary id: int,
    object_type_node_id: int,
    index_type_node_id: int
}

/**
 * A IndexedAccessType
 */
schema IndexedAccessType extends TypeNode {
    object_type_node_id: int,
    index_type_node_id: int
}
impl IndexedAccessType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IndexedAccessType {
        for (fa in TypeNode(db)) {
            for (son in IndexedAccessTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield IndexedAccessType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        object_type_node_id : son.object_type_node_id,
                        index_type_node_id : son.index_type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the objectTypeNode.
     */
    pub fn getObjectTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.object_type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the indexTypeNode.
     */
    pub fn getIndexTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.index_type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
}

/**
 * A MappedTypeDO load mapped_type from db
 */
schema MappedTypeDO {
    @primary id: int,
    type_parameter_id: int
}

/**
 * A MappedType
 */
schema MappedType extends TypeNode {
    type_parameter_id: int
}
impl MappedType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MappedType {
        for (fa in TypeNode(db)) {
            for (son in MappedTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield MappedType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_parameter_id : son.type_parameter_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the typeParameter.
     */
    pub fn getTypeParameter(self) -> TypeParameter {
        for (typeParameter in TypeParameter(__all_data__)) {
            if (self.type_parameter_id = typeParameter.id) {
                return typeParameter
            }
        }
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
    /**
     * Get the readonlyToken.
     */
    pub fn getReadonlyToken(self) -> MappedTypeReadonlyTokenType {
        for (mappedTypeReadonlyToken in MappedTypeReadonlyToken(__all_data__)) {
            if (mappedTypeReadonlyToken.mapped_type_id = self.id) {
                return mappedTypeReadonlyToken.getReadonlyToken()
            }
        }
    }
    
    /**
     * Get the nameTypeNode.
     */
    pub fn getNameTypeNode(self) -> TypeNode {
        for (mappedTypeNameTypeNode in MappedTypeNameTypeNode(__all_data__)) {
            if (mappedTypeNameTypeNode.mapped_type_id = self.id) {
                return mappedTypeNameTypeNode.getNameTypeNode()
            }
        }
    }
    
    /**
     * Get the questionToken.
     */
    pub fn getQuestionToken(self) -> MappedTypeQuestionTokenType {
        for (mappedTypeQuestionToken in MappedTypeQuestionToken(__all_data__)) {
            if (mappedTypeQuestionToken.mapped_type_id = self.id) {
                return mappedTypeQuestionToken.getQuestionToken()
            }
        }
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (mappedTypeTypeNode in MappedTypeTypeNode(__all_data__)) {
            if (mappedTypeTypeNode.mapped_type_id = self.id) {
                return mappedTypeTypeNode.getTypeNode()
            }
        }
    }
    
}

/**
 * A MappedTypeReadonlyTokenDO load mapped_type_readonly_token from db
 */
schema MappedTypeReadonlyTokenDO {
    @primary mapped_type_id: int,
    readonly_token_id: int
}

/**
 * A MappedTypeReadonlyToken
 */
schema MappedTypeReadonlyToken {
    @primary mapped_type_id: int,
    readonly_token_id: int
}
impl MappedTypeReadonlyToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MappedTypeReadonlyToken {
        for (mappedTypeReadonlyToken in MappedTypeReadonlyTokenDO(db)) {
            yield MappedTypeReadonlyToken {
                mapped_type_id: mappedTypeReadonlyToken.mapped_type_id,
                readonly_token_id : mappedTypeReadonlyToken.readonly_token_id
            }
        }
    }
    
    /**
     * Gets the mappedType.
     */
    pub fn getMappedType(self) -> MappedType {
        for (mappedType in MappedType(__all_data__)) {
            if (self.mapped_type_id = mappedType.id) {
                return mappedType
            }
        }
    }
    
    /**
     * Gets the readonlyToken.
     */
    pub fn getReadonlyToken(self) -> MappedTypeReadonlyTokenType {
        for (mappedTypeReadonlyTokenType in MappedTypeReadonlyTokenType(__all_data__)) {
            if (self.readonly_token_id = mappedTypeReadonlyTokenType.id) {
                return mappedTypeReadonlyTokenType
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.mapped_type_id
    }
    
}

/**
 * A MappedTypeNameTypeNodeDO load mapped_type_name_type_node from db
 */
schema MappedTypeNameTypeNodeDO {
    @primary mapped_type_id: int,
    name_type_node_id: int
}

/**
 * A MappedTypeNameTypeNode
 */
schema MappedTypeNameTypeNode {
    @primary mapped_type_id: int,
    name_type_node_id: int
}
impl MappedTypeNameTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MappedTypeNameTypeNode {
        for (mappedTypeNameTypeNode in MappedTypeNameTypeNodeDO(db)) {
            yield MappedTypeNameTypeNode {
                mapped_type_id: mappedTypeNameTypeNode.mapped_type_id,
                name_type_node_id : mappedTypeNameTypeNode.name_type_node_id
            }
        }
    }
    
    /**
     * Gets the mappedType.
     */
    pub fn getMappedType(self) -> MappedType {
        for (mappedType in MappedType(__all_data__)) {
            if (self.mapped_type_id = mappedType.id) {
                return mappedType
            }
        }
    }
    
    /**
     * Gets the nameTypeNode.
     */
    pub fn getNameTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.name_type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.mapped_type_id
    }
    
}

/**
 * A MappedTypeQuestionTokenDO load mapped_type_question_token from db
 */
schema MappedTypeQuestionTokenDO {
    @primary mapped_type_id: int,
    question_token_id: int
}

/**
 * A MappedTypeQuestionToken
 */
schema MappedTypeQuestionToken {
    @primary mapped_type_id: int,
    question_token_id: int
}
impl MappedTypeQuestionToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MappedTypeQuestionToken {
        for (mappedTypeQuestionToken in MappedTypeQuestionTokenDO(db)) {
            yield MappedTypeQuestionToken {
                mapped_type_id: mappedTypeQuestionToken.mapped_type_id,
                question_token_id : mappedTypeQuestionToken.question_token_id
            }
        }
    }
    
    /**
     * Gets the mappedType.
     */
    pub fn getMappedType(self) -> MappedType {
        for (mappedType in MappedType(__all_data__)) {
            if (self.mapped_type_id = mappedType.id) {
                return mappedType
            }
        }
    }
    
    /**
     * Gets the questionToken.
     */
    pub fn getQuestionToken(self) -> MappedTypeQuestionTokenType {
        for (mappedTypeQuestionTokenType in MappedTypeQuestionTokenType(__all_data__)) {
            if (self.question_token_id = mappedTypeQuestionTokenType.id) {
                return mappedTypeQuestionTokenType
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.mapped_type_id
    }
    
}

/**
 * A MappedTypeTypeNodeDO load mapped_type_type_node from db
 */
schema MappedTypeTypeNodeDO {
    @primary mapped_type_id: int,
    type_node_id: int
}

/**
 * A MappedTypeTypeNode
 */
schema MappedTypeTypeNode {
    @primary mapped_type_id: int,
    type_node_id: int
}
impl MappedTypeTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MappedTypeTypeNode {
        for (mappedTypeTypeNode in MappedTypeTypeNodeDO(db)) {
            yield MappedTypeTypeNode {
                mapped_type_id: mappedTypeTypeNode.mapped_type_id,
                type_node_id : mappedTypeTypeNode.type_node_id
            }
        }
    }
    
    /**
     * Gets the mappedType.
     */
    pub fn getMappedType(self) -> MappedType {
        for (mappedType in MappedType(__all_data__)) {
            if (self.mapped_type_id = mappedType.id) {
                return mappedType
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.mapped_type_id
    }
    
}

/**
 * A LiteralTypeDO load literal_type from db
 */
schema LiteralTypeDO {
    @primary id: int,
    literal_id: int
}

/**
 * A LiteralType
 */
schema LiteralType extends TypeNode {
    literal_id: int
}
impl LiteralType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LiteralType {
        for (fa in TypeNode(db)) {
            for (son in LiteralTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield LiteralType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        literal_id : son.literal_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the literal.
     */
    pub fn getLiteral(self) -> LiteralTypeLiteralType {
        for (literalTypeLiteralType in LiteralTypeLiteralType(__all_data__)) {
            if (self.literal_id = literalTypeLiteralType.id) {
                return literalTypeLiteralType
            }
        }
    }
    
}

/**
 * A NamedTupleMemberDO load named_tuple_member from db
 */
schema NamedTupleMemberDO {
    @primary id: int,
    name_node_id: int,
    type_node_id: int
}

/**
 * A NamedTupleMember
 */
schema NamedTupleMember extends TypeNode {
    name_node_id: int,
    type_node_id: int
}
impl NamedTupleMember {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamedTupleMember {
        for (fa in TypeNode(db)) {
            for (son in NamedTupleMemberDO(db)) {
                if (son.key_eq(fa)) {
                    yield NamedTupleMember {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
    /**
     * Get the dotDotDotToken.
     */
    pub fn getDotDotDotToken(self) -> DotDotDotToken {
        for (namedTupleMemberDotDotDotToken in NamedTupleMemberDotDotDotToken(__all_data__)) {
            if (namedTupleMemberDotDotDotToken.named_tuple_member_id = self.id) {
                return namedTupleMemberDotDotDotToken.getDotDotDotToken()
            }
        }
    }
    
    /**
     * Get the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (namedTupleMemberQuestionToken in NamedTupleMemberQuestionToken(__all_data__)) {
            if (namedTupleMemberQuestionToken.named_tuple_member_id = self.id) {
                return namedTupleMemberQuestionToken.getQuestionToken()
            }
        }
    }
    
}

/**
 * A NamedTupleMemberDotDotDotTokenDO load named_tuple_member_dot_dot_dot_token from db
 */
schema NamedTupleMemberDotDotDotTokenDO {
    @primary named_tuple_member_id: int,
    dot_dot_dot_token_id: int
}

/**
 * A NamedTupleMemberDotDotDotToken
 */
schema NamedTupleMemberDotDotDotToken {
    @primary named_tuple_member_id: int,
    dot_dot_dot_token_id: int
}
impl NamedTupleMemberDotDotDotToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamedTupleMemberDotDotDotToken {
        for (namedTupleMemberDotDotDotToken in NamedTupleMemberDotDotDotTokenDO(db)) {
            yield NamedTupleMemberDotDotDotToken {
                named_tuple_member_id: namedTupleMemberDotDotDotToken.named_tuple_member_id,
                dot_dot_dot_token_id : namedTupleMemberDotDotDotToken.dot_dot_dot_token_id
            }
        }
    }
    
    /**
     * Gets the namedTupleMember.
     */
    pub fn getNamedTupleMember(self) -> NamedTupleMember {
        for (namedTupleMember in NamedTupleMember(__all_data__)) {
            if (self.named_tuple_member_id = namedTupleMember.id) {
                return namedTupleMember
            }
        }
    }
    
    /**
     * Gets the dotDotDotToken.
     */
    pub fn getDotDotDotToken(self) -> DotDotDotToken {
        for (dotDotDotToken in DotDotDotToken(__all_data__)) {
            if (self.dot_dot_dot_token_id = dotDotDotToken.id) {
                return dotDotDotToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.named_tuple_member_id
    }
    
}

/**
 * A NamedTupleMemberQuestionTokenDO load named_tuple_member_question_token from db
 */
schema NamedTupleMemberQuestionTokenDO {
    @primary named_tuple_member_id: int,
    question_token_id: int
}

/**
 * A NamedTupleMemberQuestionToken
 */
schema NamedTupleMemberQuestionToken {
    @primary named_tuple_member_id: int,
    question_token_id: int
}
impl NamedTupleMemberQuestionToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamedTupleMemberQuestionToken {
        for (namedTupleMemberQuestionToken in NamedTupleMemberQuestionTokenDO(db)) {
            yield NamedTupleMemberQuestionToken {
                named_tuple_member_id: namedTupleMemberQuestionToken.named_tuple_member_id,
                question_token_id : namedTupleMemberQuestionToken.question_token_id
            }
        }
    }
    
    /**
     * Gets the namedTupleMember.
     */
    pub fn getNamedTupleMember(self) -> NamedTupleMember {
        for (namedTupleMember in NamedTupleMember(__all_data__)) {
            if (self.named_tuple_member_id = namedTupleMember.id) {
                return namedTupleMember
            }
        }
    }
    
    /**
     * Gets the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (questionToken in QuestionToken(__all_data__)) {
            if (self.question_token_id = questionToken.id) {
                return questionToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.named_tuple_member_id
    }
    
}

/**
 * A TemplateLiteralTypeSpanDO load template_literal_type_span from db
 */
schema TemplateLiteralTypeSpanDO {
    @primary id: int,
    parent_id: int,
    index: int,
    type_node_id: int,
    literal_id: int
}

/**
 * A TemplateLiteralTypeSpan
 */
schema TemplateLiteralTypeSpan extends TypeNode {
    type_node_id: int,
    literal_id: int
}
impl TemplateLiteralTypeSpan {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateLiteralTypeSpan {
        for (fa in TypeNode(db)) {
            for (son in TemplateLiteralTypeSpanDO(db)) {
                if (son.key_eq(fa)) {
                    yield TemplateLiteralTypeSpan {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_node_id : son.type_node_id,
                        literal_id : son.literal_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> TemplateLiteralType {
        for (templateLiteralType in TemplateLiteralType(__all_data__)) {
            if (self.parent_id = templateLiteralType.id) {
                return templateLiteralType
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the literal.
     */
    pub fn getLiteral(self) -> TemplateMiddleOrTail {
        for (templateMiddleOrTail in TemplateMiddleOrTail(__all_data__)) {
            if (self.literal_id = templateMiddleOrTail.id) {
                return templateMiddleOrTail
            }
        }
    }
    
}

/**
 * A TemplateLiteralTypeDO load template_literal_type from db
 */
schema TemplateLiteralTypeDO {
    @primary id: int,
    head_id: int
}

/**
 * A TemplateLiteralType
 */
schema TemplateLiteralType extends TypeNode {
    head_id: int
}
impl TemplateLiteralType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateLiteralType {
        for (fa in TypeNode(db)) {
            for (son in TemplateLiteralTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield TemplateLiteralType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        head_id : son.head_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the head.
     */
    pub fn getHead(self) -> TemplateHead {
        for (templateHead in TemplateHead(__all_data__)) {
            if (self.head_id = templateHead.id) {
                return templateHead
            }
        }
    }
    
    /**
     * Get the templateSpans.
     */
    pub fn getTemplateSpans(self) -> *TemplateLiteralTypeSpan {
        for (templateLiteralTypeSpan in TemplateLiteralTypeSpan(__all_data__)) {
            if (templateLiteralTypeSpan.parent_id = self.id) {
                yield templateLiteralTypeSpan
            }
        }
    }
    
}

/**
 * A ImportTypeAssertionContainerDO load import_type_assertion_container from db
 */
schema ImportTypeAssertionContainerDO {
    @primary id: int,
    parent_id: int,
    assert_clause_id: int
}

/**
 * A ImportTypeAssertionContainer
 */
schema ImportTypeAssertionContainer extends AstNode {
    assert_clause_id: int
}
impl ImportTypeAssertionContainer {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportTypeAssertionContainer {
        for (fa in AstNode(db)) {
            for (son in ImportTypeAssertionContainerDO(db)) {
                if (son.key_eq(fa)) {
                    yield ImportTypeAssertionContainer {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        assert_clause_id : son.assert_clause_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> ImportType {
        for (importType in ImportType(__all_data__)) {
            if (self.parent_id = importType.id) {
                return importType
            }
        }
    }
    
    /**
     * Gets the assertClause.
     */
    pub fn getAssertClause(self) -> AssertClause {
        for (assertClause in AssertClause(__all_data__)) {
            if (self.assert_clause_id = assertClause.id) {
                return assertClause
            }
        }
    }
    
}

/**
 * A ImportTypeDO load import_type from db
 */
schema ImportTypeDO {
    @primary id: int,
    is_type_of: int,
    argument_id: int
}

/**
 * A ImportType
 */
schema ImportType extends NodeWithTypeArguments {
    is_type_of: int,
    argument_id: int
}
impl ImportType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportType {
        for (fa in NodeWithTypeArguments(db)) {
            for (son in ImportTypeDO(db)) {
                if (son.key_eq(fa)) {
                    yield ImportType {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        is_type_of : son.is_type_of,
                        argument_id : son.argument_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the ypeOf.
     */
    pub fn IsTypeOf(self) -> bool {
        return self.is_type_of = 1
    }
    
    /**
     * Gets the argument.
     */
    pub fn getArgument(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.argument_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get the qualifier.
     */
    pub fn getQualifier(self) -> EntityName {
        for (importTypeQualifier in ImportTypeQualifier(__all_data__)) {
            if (importTypeQualifier.import_type_id = self.id) {
                return importTypeQualifier.getQualifier()
            }
        }
    }
    
    /**
     * Get the assertions.
     */
    pub fn getAssertions(self) -> ImportTypeAssertionContainer {
        for (importTypeAssertionContainer in ImportTypeAssertionContainer(__all_data__)) {
            if (importTypeAssertionContainer.parent_id = self.id) {
                return importTypeAssertionContainer
            }
        }
    }
    
}

/**
 * A ImportTypeQualifierDO load import_type_qualifier from db
 */
schema ImportTypeQualifierDO {
    @primary import_type_id: int,
    qualifier_id: int
}

/**
 * A ImportTypeQualifier
 */
schema ImportTypeQualifier {
    @primary import_type_id: int,
    qualifier_id: int
}
impl ImportTypeQualifier {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportTypeQualifier {
        for (importTypeQualifier in ImportTypeQualifierDO(db)) {
            yield ImportTypeQualifier {
                import_type_id: importTypeQualifier.import_type_id,
                qualifier_id : importTypeQualifier.qualifier_id
            }
        }
    }
    
    /**
     * Gets the importType.
     */
    pub fn getImportType(self) -> ImportType {
        for (importType in ImportType(__all_data__)) {
            if (self.import_type_id = importType.id) {
                return importType
            }
        }
    }
    
    /**
     * Gets the qualifier.
     */
    pub fn getQualifier(self) -> EntityName {
        for (entityName in EntityName(__all_data__)) {
            if (self.qualifier_id = entityName.id) {
                return entityName
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.import_type_id
    }
    
}

/**
 * A BindingElementDO load binding_element from db
 */
schema BindingElementDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A BindingElement
 */
schema BindingElement extends Declaration {
    name_node_id: int
}
impl BindingElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BindingElement {
        for (fa in Declaration(db)) {
            for (son in BindingElementDO(db)) {
                if (son.key_eq(fa)) {
                    yield BindingElement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> BindingName {
        for (bindingName in BindingName(__all_data__)) {
            if (self.name_node_id = bindingName.id) {
                return bindingName
            }
        }
    }
    
    /**
     * Get the propertyNameNode.
     */
    pub fn getPropertyNameNode(self) -> PropertyName {
        for (bindingElementPropertyNameNode in BindingElementPropertyNameNode(__all_data__)) {
            if (bindingElementPropertyNameNode.binding_element_id = self.id) {
                return bindingElementPropertyNameNode.getPropertyNameNode()
            }
        }
    }
    
    /**
     * Get the dotDotDotToken.
     */
    pub fn getDotDotDotToken(self) -> DotDotDotToken {
        for (bindingElementDotDotDotToken in BindingElementDotDotDotToken(__all_data__)) {
            if (bindingElementDotDotDotToken.binding_element_id = self.id) {
                return bindingElementDotDotDotToken.getDotDotDotToken()
            }
        }
    }
    
    /**
     * Get the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (bindingElementInitializer in BindingElementInitializer(__all_data__)) {
            if (bindingElementInitializer.binding_element_id = self.id) {
                return bindingElementInitializer.getInitializer()
            }
        }
    }
    
}

/**
 * A BindingElementPropertyNameNodeDO load binding_element_property_name_node from db
 */
schema BindingElementPropertyNameNodeDO {
    @primary binding_element_id: int,
    property_name_node_id: int
}

/**
 * A BindingElementPropertyNameNode
 */
schema BindingElementPropertyNameNode {
    @primary binding_element_id: int,
    property_name_node_id: int
}
impl BindingElementPropertyNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BindingElementPropertyNameNode {
        for (bindingElementPropertyNameNode in BindingElementPropertyNameNodeDO(db)) {
            yield BindingElementPropertyNameNode {
                binding_element_id: bindingElementPropertyNameNode.binding_element_id,
                property_name_node_id : bindingElementPropertyNameNode.property_name_node_id
            }
        }
    }
    
    /**
     * Gets the bindingElement.
     */
    pub fn getBindingElement(self) -> BindingElement {
        for (bindingElement in BindingElement(__all_data__)) {
            if (self.binding_element_id = bindingElement.id) {
                return bindingElement
            }
        }
    }
    
    /**
     * Gets the propertyNameNode.
     */
    pub fn getPropertyNameNode(self) -> PropertyName {
        for (propertyName in PropertyName(__all_data__)) {
            if (self.property_name_node_id = propertyName.id) {
                return propertyName
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.binding_element_id
    }
    
}

/**
 * A BindingElementDotDotDotTokenDO load binding_element_dot_dot_dot_token from db
 */
schema BindingElementDotDotDotTokenDO {
    @primary binding_element_id: int,
    dot_dot_dot_token_id: int
}

/**
 * A BindingElementDotDotDotToken
 */
schema BindingElementDotDotDotToken {
    @primary binding_element_id: int,
    dot_dot_dot_token_id: int
}
impl BindingElementDotDotDotToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BindingElementDotDotDotToken {
        for (bindingElementDotDotDotToken in BindingElementDotDotDotTokenDO(db)) {
            yield BindingElementDotDotDotToken {
                binding_element_id: bindingElementDotDotDotToken.binding_element_id,
                dot_dot_dot_token_id : bindingElementDotDotDotToken.dot_dot_dot_token_id
            }
        }
    }
    
    /**
     * Gets the bindingElement.
     */
    pub fn getBindingElement(self) -> BindingElement {
        for (bindingElement in BindingElement(__all_data__)) {
            if (self.binding_element_id = bindingElement.id) {
                return bindingElement
            }
        }
    }
    
    /**
     * Gets the dotDotDotToken.
     */
    pub fn getDotDotDotToken(self) -> DotDotDotToken {
        for (dotDotDotToken in DotDotDotToken(__all_data__)) {
            if (self.dot_dot_dot_token_id = dotDotDotToken.id) {
                return dotDotDotToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.binding_element_id
    }
    
}

/**
 * A BindingElementInitializerDO load binding_element_initializer from db
 */
schema BindingElementInitializerDO {
    @primary binding_element_id: int,
    initializer_id: int
}

/**
 * A BindingElementInitializer
 */
schema BindingElementInitializer {
    @primary binding_element_id: int,
    initializer_id: int
}
impl BindingElementInitializer {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BindingElementInitializer {
        for (bindingElementInitializer in BindingElementInitializerDO(db)) {
            yield BindingElementInitializer {
                binding_element_id: bindingElementInitializer.binding_element_id,
                initializer_id : bindingElementInitializer.initializer_id
            }
        }
    }
    
    /**
     * Gets the bindingElement.
     */
    pub fn getBindingElement(self) -> BindingElement {
        for (bindingElement in BindingElement(__all_data__)) {
            if (self.binding_element_id = bindingElement.id) {
                return bindingElement
            }
        }
    }
    
    /**
     * Gets the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.initializer_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.binding_element_id
    }
    
}

/**
 * A ObjectBindingPatternDO load object_binding_pattern from db
 */
schema ObjectBindingPatternDO {
    @primary id: int,
}

/**
 * A ObjectBindingPattern
 */
schema ObjectBindingPattern extends AstNode {
}
impl ObjectBindingPattern {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ObjectBindingPattern {
        for (fa in AstNode(db)) {
            for (son in ObjectBindingPatternDO(db)) {
                if (son.key_eq(fa)) {
                    yield ObjectBindingPattern {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the element.
     */
    pub fn getElement(self) -> *BindingElement {
        for (objectBindingPatternElement in ObjectBindingPatternElement(__all_data__)) {
            if (objectBindingPatternElement.object_binding_pattern_id = self.id) {
                yield objectBindingPatternElement.getElement()
            }
        }
    }
    
}

/**
 * A ObjectBindingPatternElementDO load object_binding_pattern_element from db
 */
schema ObjectBindingPatternElementDO {
    @primary element_id: int,
    object_binding_pattern_id: int,
    index: int
}

/**
 * A ObjectBindingPatternElement
 */
schema ObjectBindingPatternElement {
    @primary element_id: int,
    object_binding_pattern_id: int,
    index: int
}
impl ObjectBindingPatternElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ObjectBindingPatternElement {
        for (objectBindingPatternElement in ObjectBindingPatternElementDO(db)) {
            yield ObjectBindingPatternElement {
                element_id: objectBindingPatternElement.element_id,
                object_binding_pattern_id : objectBindingPatternElement.object_binding_pattern_id,
                index : objectBindingPatternElement.index
            }
        }
    }
    
    /**
     * Gets the element.
     */
    pub fn getElement(self) -> BindingElement {
        for (bindingElement in BindingElement(__all_data__)) {
            if (self.element_id = bindingElement.id) {
                return bindingElement
            }
        }
    }
    
    /**
     * Gets the objectBindingPattern.
     */
    pub fn getObjectBindingPattern(self) -> ObjectBindingPattern {
        for (objectBindingPattern in ObjectBindingPattern(__all_data__)) {
            if (self.object_binding_pattern_id = objectBindingPattern.id) {
                return objectBindingPattern
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.element_id
    }
    
}

/**
 * A ArrayBindingPatternDO load array_binding_pattern from db
 */
schema ArrayBindingPatternDO {
    @primary id: int,
}

/**
 * A ArrayBindingPattern
 */
schema ArrayBindingPattern extends AstNode {
}
impl ArrayBindingPattern {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ArrayBindingPattern {
        for (fa in AstNode(db)) {
            for (son in ArrayBindingPatternDO(db)) {
                if (son.key_eq(fa)) {
                    yield ArrayBindingPattern {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the element.
     */
    pub fn getElement(self) -> *ArrayBindingElement {
        for (arrayBindingPatternElement in ArrayBindingPatternElement(__all_data__)) {
            if (arrayBindingPatternElement.array_binding_pattern_id = self.id) {
                yield arrayBindingPatternElement.getElement()
            }
        }
    }
    
}

/**
 * A ArrayBindingPatternElementDO load array_binding_pattern_element from db
 */
schema ArrayBindingPatternElementDO {
    @primary element_id: int,
    array_binding_pattern_id: int,
    index: int
}

/**
 * A ArrayBindingPatternElement
 */
schema ArrayBindingPatternElement {
    @primary element_id: int,
    array_binding_pattern_id: int,
    index: int
}
impl ArrayBindingPatternElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ArrayBindingPatternElement {
        for (arrayBindingPatternElement in ArrayBindingPatternElementDO(db)) {
            yield ArrayBindingPatternElement {
                element_id: arrayBindingPatternElement.element_id,
                array_binding_pattern_id : arrayBindingPatternElement.array_binding_pattern_id,
                index : arrayBindingPatternElement.index
            }
        }
    }
    
    /**
     * Gets the element.
     */
    pub fn getElement(self) -> ArrayBindingElement {
        for (arrayBindingElement in ArrayBindingElement(__all_data__)) {
            if (self.element_id = arrayBindingElement.id) {
                return arrayBindingElement
            }
        }
    }
    
    /**
     * Gets the arrayBindingPattern.
     */
    pub fn getArrayBindingPattern(self) -> ArrayBindingPattern {
        for (arrayBindingPattern in ArrayBindingPattern(__all_data__)) {
            if (self.array_binding_pattern_id = arrayBindingPattern.id) {
                return arrayBindingPattern
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.element_id
    }
    
}

/**
 * A ThisExpressionDO load this_expression from db
 */
schema ThisExpressionDO {
    @primary id: int,
}

/**
 * A ThisExpression
 */
schema ThisExpression extends PrimaryExpression {
}
impl ThisExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ThisExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in ThisExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield ThisExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A SuperExpressionDO load super_expression from db
 */
schema SuperExpressionDO {
    @primary id: int,
}

/**
 * A SuperExpression
 */
schema SuperExpression extends PrimaryExpression {
}
impl SuperExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SuperExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in SuperExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield SuperExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ImportExpressionDO load import_expression from db
 */
schema ImportExpressionDO {
    @primary id: int,
}

/**
 * A ImportExpression
 */
schema ImportExpression extends PrimaryExpression {
}
impl ImportExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in ImportExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield ImportExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ArrayLiteralExpressionDO load array_literal_expression from db
 */
schema ArrayLiteralExpressionDO {
    @primary id: int,
}

/**
 * A ArrayLiteralExpression
 */
schema ArrayLiteralExpression extends PrimaryExpression {
}
impl ArrayLiteralExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ArrayLiteralExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in ArrayLiteralExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield ArrayLiteralExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the element.
     */
    pub fn getElement(self) -> *Expression {
        for (arrayLiteralExpressionElement in ArrayLiteralExpressionElement(__all_data__)) {
            if (arrayLiteralExpressionElement.array_literal_expression_id = self.id) {
                yield arrayLiteralExpressionElement.getElement()
            }
        }
    }
    
}

/**
 * A ArrayLiteralExpressionElementDO load array_literal_expression_element from db
 */
schema ArrayLiteralExpressionElementDO {
    @primary element_id: int,
    array_literal_expression_id: int,
    index: int
}

/**
 * A ArrayLiteralExpressionElement
 */
schema ArrayLiteralExpressionElement {
    @primary element_id: int,
    array_literal_expression_id: int,
    index: int
}
impl ArrayLiteralExpressionElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ArrayLiteralExpressionElement {
        for (arrayLiteralExpressionElement in ArrayLiteralExpressionElementDO(db)) {
            yield ArrayLiteralExpressionElement {
                element_id: arrayLiteralExpressionElement.element_id,
                array_literal_expression_id : arrayLiteralExpressionElement.array_literal_expression_id,
                index : arrayLiteralExpressionElement.index
            }
        }
    }
    
    /**
     * Gets the element.
     */
    pub fn getElement(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.element_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the arrayLiteralExpression.
     */
    pub fn getArrayLiteralExpression(self) -> ArrayLiteralExpression {
        for (arrayLiteralExpression in ArrayLiteralExpression(__all_data__)) {
            if (self.array_literal_expression_id = arrayLiteralExpression.id) {
                return arrayLiteralExpression
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.element_id
    }
    
}

/**
 * A ObjectLiteralExpressionDO load object_literal_expression from db
 */
schema ObjectLiteralExpressionDO {
    @primary id: int,
}

/**
 * A ObjectLiteralExpression
 */
schema ObjectLiteralExpression extends PrimaryExpression {
}
impl ObjectLiteralExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ObjectLiteralExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in ObjectLiteralExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield ObjectLiteralExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
    /**
     * Get the property.
     */
    pub fn getProperty(self) -> *ObjectLiteralElement {
        for (objectLiteralExpressionProperty in ObjectLiteralExpressionProperty(__all_data__)) {
            if (objectLiteralExpressionProperty.object_literal_expression_id = self.id) {
                yield objectLiteralExpressionProperty.getProperty()
            }
        }
    }
    
}

/**
 * A ObjectLiteralExpressionPropertyDO load object_literal_expression_property from db
 */
schema ObjectLiteralExpressionPropertyDO {
    @primary property_id: int,
    object_literal_expression_id: int,
    index: int
}

/**
 * A ObjectLiteralExpressionProperty
 */
schema ObjectLiteralExpressionProperty {
    @primary property_id: int,
    object_literal_expression_id: int,
    index: int
}
impl ObjectLiteralExpressionProperty {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ObjectLiteralExpressionProperty {
        for (objectLiteralExpressionProperty in ObjectLiteralExpressionPropertyDO(db)) {
            yield ObjectLiteralExpressionProperty {
                property_id: objectLiteralExpressionProperty.property_id,
                object_literal_expression_id : objectLiteralExpressionProperty.object_literal_expression_id,
                index : objectLiteralExpressionProperty.index
            }
        }
    }
    
    /**
     * Gets the property.
     */
    pub fn getProperty(self) -> ObjectLiteralElement {
        for (objectLiteralElement in ObjectLiteralElement(__all_data__)) {
            if (self.property_id = objectLiteralElement.id) {
                return objectLiteralElement
            }
        }
    }
    
    /**
     * Gets the objectLiteralExpression.
     */
    pub fn getObjectLiteralExpression(self) -> ObjectLiteralExpression {
        for (objectLiteralExpression in ObjectLiteralExpression(__all_data__)) {
            if (self.object_literal_expression_id = objectLiteralExpression.id) {
                return objectLiteralExpression
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.property_id
    }
    
}

/**
 * A PropertyAccessExpressionDO load property_access_expression from db
 */
schema PropertyAccessExpressionDO {
    @primary id: int,
    expression_id: int,
    name_node_id: int
}

/**
 * A PropertyAccessExpression
 */
schema PropertyAccessExpression extends MemberExpression {
    expression_id: int,
    name_node_id: int
}
impl PropertyAccessExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertyAccessExpression {
        for (fa in MemberExpression(db)) {
            for (son in PropertyAccessExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield PropertyAccessExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> LeftHandSideExpression {
        for (leftHandSideExpression in LeftHandSideExpression(__all_data__)) {
            if (self.expression_id = leftHandSideExpression.id) {
                return leftHandSideExpression
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> MemberName {
        for (memberName in MemberName(__all_data__)) {
            if (self.name_node_id = memberName.id) {
                return memberName
            }
        }
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
    /**
     * Get the questionDotToken.
     */
    pub fn getQuestionDotToken(self) -> QuestionDotToken {
        for (propertyAccessExpressionQuestionDotToken in PropertyAccessExpressionQuestionDotToken(__all_data__)) {
            if (propertyAccessExpressionQuestionDotToken.property_access_expression_id = self.id) {
                return propertyAccessExpressionQuestionDotToken.getQuestionDotToken()
            }
        }
    }
    
}

/**
 * A PropertyAccessExpressionQuestionDotTokenDO load property_access_expression_question_dot_token from db
 */
schema PropertyAccessExpressionQuestionDotTokenDO {
    @primary property_access_expression_id: int,
    question_dot_token_id: int
}

/**
 * A PropertyAccessExpressionQuestionDotToken
 */
schema PropertyAccessExpressionQuestionDotToken {
    @primary property_access_expression_id: int,
    question_dot_token_id: int
}
impl PropertyAccessExpressionQuestionDotToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertyAccessExpressionQuestionDotToken {
        for (propertyAccessExpressionQuestionDotToken in PropertyAccessExpressionQuestionDotTokenDO(db)) {
            yield PropertyAccessExpressionQuestionDotToken {
                property_access_expression_id: propertyAccessExpressionQuestionDotToken.property_access_expression_id,
                question_dot_token_id : propertyAccessExpressionQuestionDotToken.question_dot_token_id
            }
        }
    }
    
    /**
     * Gets the propertyAccessExpression.
     */
    pub fn getPropertyAccessExpression(self) -> PropertyAccessExpression {
        for (propertyAccessExpression in PropertyAccessExpression(__all_data__)) {
            if (self.property_access_expression_id = propertyAccessExpression.id) {
                return propertyAccessExpression
            }
        }
    }
    
    /**
     * Gets the questionDotToken.
     */
    pub fn getQuestionDotToken(self) -> QuestionDotToken {
        for (questionDotToken in QuestionDotToken(__all_data__)) {
            if (self.question_dot_token_id = questionDotToken.id) {
                return questionDotToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.property_access_expression_id
    }
    
}

/**
 * A ElementAccessExpressionDO load element_access_expression from db
 */
schema ElementAccessExpressionDO {
    @primary id: int,
    expression_id: int,
    argument_expression_id: int
}

/**
 * A ElementAccessExpression
 */
schema ElementAccessExpression extends MemberExpression {
    expression_id: int,
    argument_expression_id: int
}
impl ElementAccessExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ElementAccessExpression {
        for (fa in MemberExpression(db)) {
            for (son in ElementAccessExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield ElementAccessExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id,
                        argument_expression_id : son.argument_expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> LeftHandSideExpression {
        for (leftHandSideExpression in LeftHandSideExpression(__all_data__)) {
            if (self.expression_id = leftHandSideExpression.id) {
                return leftHandSideExpression
            }
        }
    }
    
    /**
     * Gets the argumentExpression.
     */
    pub fn getArgumentExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.argument_expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get the questionDotToken.
     */
    pub fn getQuestionDotToken(self) -> QuestionDotToken {
        for (elementAccessExpressionQuestionDotToken in ElementAccessExpressionQuestionDotToken(__all_data__)) {
            if (elementAccessExpressionQuestionDotToken.element_access_expression_id = self.id) {
                return elementAccessExpressionQuestionDotToken.getQuestionDotToken()
            }
        }
    }
    
}

/**
 * A ElementAccessExpressionQuestionDotTokenDO load element_access_expression_question_dot_token from db
 */
schema ElementAccessExpressionQuestionDotTokenDO {
    @primary element_access_expression_id: int,
    question_dot_token_id: int
}

/**
 * A ElementAccessExpressionQuestionDotToken
 */
schema ElementAccessExpressionQuestionDotToken {
    @primary element_access_expression_id: int,
    question_dot_token_id: int
}
impl ElementAccessExpressionQuestionDotToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ElementAccessExpressionQuestionDotToken {
        for (elementAccessExpressionQuestionDotToken in ElementAccessExpressionQuestionDotTokenDO(db)) {
            yield ElementAccessExpressionQuestionDotToken {
                element_access_expression_id: elementAccessExpressionQuestionDotToken.element_access_expression_id,
                question_dot_token_id : elementAccessExpressionQuestionDotToken.question_dot_token_id
            }
        }
    }
    
    /**
     * Gets the elementAccessExpression.
     */
    pub fn getElementAccessExpression(self) -> ElementAccessExpression {
        for (elementAccessExpression in ElementAccessExpression(__all_data__)) {
            if (self.element_access_expression_id = elementAccessExpression.id) {
                return elementAccessExpression
            }
        }
    }
    
    /**
     * Gets the questionDotToken.
     */
    pub fn getQuestionDotToken(self) -> QuestionDotToken {
        for (questionDotToken in QuestionDotToken(__all_data__)) {
            if (self.question_dot_token_id = questionDotToken.id) {
                return questionDotToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.element_access_expression_id
    }
    
}

/**
 * A CallExpressionDO load call_expression from db
 */
schema CallExpressionDO {
    @primary id: int,
    expression_id: int
}

/**
 * A CallExpression
 */
schema CallExpression extends LeftHandSideExpression {
    expression_id: int
}
impl CallExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CallExpression {
        for (fa in LeftHandSideExpression(db)) {
            for (son in CallExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield CallExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
    /**
     * Get the questionDotToken.
     */
    pub fn getQuestionDotToken(self) -> QuestionDotToken {
        for (callExpressionQuestionDotToken in CallExpressionQuestionDotToken(__all_data__)) {
            if (callExpressionQuestionDotToken.call_expression_id = self.id) {
                return callExpressionQuestionDotToken.getQuestionDotToken()
            }
        }
    }
    
    /**
     * Get the typeArgument.
     */
    pub fn getTypeArgument(self) -> *TypeNode {
        for (callExpressionTypeArgument in CallExpressionTypeArgument(__all_data__)) {
            if (callExpressionTypeArgument.call_expression_id = self.id) {
                yield callExpressionTypeArgument.getTypeArgument()
            }
        }
    }
    
    /**
     * Get the argument.
     */
    pub fn getArgument(self) -> *Expression {
        for (callExpressionArgument in CallExpressionArgument(__all_data__)) {
            if (callExpressionArgument.call_expression_id = self.id) {
                yield callExpressionArgument.getArgument()
            }
        }
    }
    
}

/**
 * A CallExpressionQuestionDotTokenDO load call_expression_question_dot_token from db
 */
schema CallExpressionQuestionDotTokenDO {
    @primary call_expression_id: int,
    question_dot_token_id: int
}

/**
 * A CallExpressionQuestionDotToken
 */
schema CallExpressionQuestionDotToken {
    @primary call_expression_id: int,
    question_dot_token_id: int
}
impl CallExpressionQuestionDotToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CallExpressionQuestionDotToken {
        for (callExpressionQuestionDotToken in CallExpressionQuestionDotTokenDO(db)) {
            yield CallExpressionQuestionDotToken {
                call_expression_id: callExpressionQuestionDotToken.call_expression_id,
                question_dot_token_id : callExpressionQuestionDotToken.question_dot_token_id
            }
        }
    }
    
    /**
     * Gets the callExpression.
     */
    pub fn getCallExpression(self) -> CallExpression {
        for (callExpression in CallExpression(__all_data__)) {
            if (self.call_expression_id = callExpression.id) {
                return callExpression
            }
        }
    }
    
    /**
     * Gets the questionDotToken.
     */
    pub fn getQuestionDotToken(self) -> QuestionDotToken {
        for (questionDotToken in QuestionDotToken(__all_data__)) {
            if (self.question_dot_token_id = questionDotToken.id) {
                return questionDotToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.call_expression_id
    }
    
}

/**
 * A CallExpressionTypeArgumentDO load call_expression_type_argument from db
 */
schema CallExpressionTypeArgumentDO {
    @primary type_argument_id: int,
    call_expression_id: int,
    index: int
}

/**
 * A CallExpressionTypeArgument
 */
schema CallExpressionTypeArgument {
    @primary type_argument_id: int,
    call_expression_id: int,
    index: int
}
impl CallExpressionTypeArgument {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CallExpressionTypeArgument {
        for (callExpressionTypeArgument in CallExpressionTypeArgumentDO(db)) {
            yield CallExpressionTypeArgument {
                type_argument_id: callExpressionTypeArgument.type_argument_id,
                call_expression_id : callExpressionTypeArgument.call_expression_id,
                index : callExpressionTypeArgument.index
            }
        }
    }
    
    /**
     * Gets the typeArgument.
     */
    pub fn getTypeArgument(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_argument_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the callExpression.
     */
    pub fn getCallExpression(self) -> CallExpression {
        for (callExpression in CallExpression(__all_data__)) {
            if (self.call_expression_id = callExpression.id) {
                return callExpression
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_argument_id
    }
    
}

/**
 * A CallExpressionArgumentDO load call_expression_argument from db
 */
schema CallExpressionArgumentDO {
    @primary argument_id: int,
    call_expression_id: int,
    index: int
}

/**
 * A CallExpressionArgument
 */
schema CallExpressionArgument {
    @primary argument_id: int,
    call_expression_id: int,
    index: int
}
impl CallExpressionArgument {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CallExpressionArgument {
        for (callExpressionArgument in CallExpressionArgumentDO(db)) {
            yield CallExpressionArgument {
                argument_id: callExpressionArgument.argument_id,
                call_expression_id : callExpressionArgument.call_expression_id,
                index : callExpressionArgument.index
            }
        }
    }
    
    /**
     * Gets the argument.
     */
    pub fn getArgument(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.argument_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the callExpression.
     */
    pub fn getCallExpression(self) -> CallExpression {
        for (callExpression in CallExpression(__all_data__)) {
            if (self.call_expression_id = callExpression.id) {
                return callExpression
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.argument_id
    }
    
}

/**
 * A NewExpressionDO load new_expression from db
 */
schema NewExpressionDO {
    @primary id: int,
    expression_id: int
}

/**
 * A NewExpression
 */
schema NewExpression extends PrimaryExpression {
    expression_id: int
}
impl NewExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NewExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in NewExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield NewExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> LeftHandSideExpression {
        for (leftHandSideExpression in LeftHandSideExpression(__all_data__)) {
            if (self.expression_id = leftHandSideExpression.id) {
                return leftHandSideExpression
            }
        }
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
    /**
     * Get the typeArgument.
     */
    pub fn getTypeArgument(self) -> *TypeNode {
        for (newExpressionTypeArgument in NewExpressionTypeArgument(__all_data__)) {
            if (newExpressionTypeArgument.new_expression_id = self.id) {
                yield newExpressionTypeArgument.getTypeArgument()
            }
        }
    }
    
    /**
     * Get the argument.
     */
    pub fn getArgument(self) -> *Expression {
        for (newExpressionArgument in NewExpressionArgument(__all_data__)) {
            if (newExpressionArgument.new_expression_id = self.id) {
                yield newExpressionArgument.getArgument()
            }
        }
    }
    
}

/**
 * A NewExpressionTypeArgumentDO load new_expression_type_argument from db
 */
schema NewExpressionTypeArgumentDO {
    @primary type_argument_id: int,
    new_expression_id: int,
    index: int
}

/**
 * A NewExpressionTypeArgument
 */
schema NewExpressionTypeArgument {
    @primary type_argument_id: int,
    new_expression_id: int,
    index: int
}
impl NewExpressionTypeArgument {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NewExpressionTypeArgument {
        for (newExpressionTypeArgument in NewExpressionTypeArgumentDO(db)) {
            yield NewExpressionTypeArgument {
                type_argument_id: newExpressionTypeArgument.type_argument_id,
                new_expression_id : newExpressionTypeArgument.new_expression_id,
                index : newExpressionTypeArgument.index
            }
        }
    }
    
    /**
     * Gets the typeArgument.
     */
    pub fn getTypeArgument(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_argument_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the newExpression.
     */
    pub fn getNewExpression(self) -> NewExpression {
        for (newExpression in NewExpression(__all_data__)) {
            if (self.new_expression_id = newExpression.id) {
                return newExpression
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_argument_id
    }
    
}

/**
 * A NewExpressionArgumentDO load new_expression_argument from db
 */
schema NewExpressionArgumentDO {
    @primary argument_id: int,
    new_expression_id: int,
    index: int
}

/**
 * A NewExpressionArgument
 */
schema NewExpressionArgument {
    @primary argument_id: int,
    new_expression_id: int,
    index: int
}
impl NewExpressionArgument {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NewExpressionArgument {
        for (newExpressionArgument in NewExpressionArgumentDO(db)) {
            yield NewExpressionArgument {
                argument_id: newExpressionArgument.argument_id,
                new_expression_id : newExpressionArgument.new_expression_id,
                index : newExpressionArgument.index
            }
        }
    }
    
    /**
     * Gets the argument.
     */
    pub fn getArgument(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.argument_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the newExpression.
     */
    pub fn getNewExpression(self) -> NewExpression {
        for (newExpression in NewExpression(__all_data__)) {
            if (self.new_expression_id = newExpression.id) {
                return newExpression
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.argument_id
    }
    
}

/**
 * A TemplateExpressionDO load template_expression from db
 */
schema TemplateExpressionDO {
    @primary id: int,
    head_id: int
}

/**
 * A TemplateExpression
 */
schema TemplateExpression extends PrimaryExpression {
    head_id: int
}
impl TemplateExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in TemplateExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield TemplateExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        head_id : son.head_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the head.
     */
    pub fn getHead(self) -> TemplateHead {
        for (templateHead in TemplateHead(__all_data__)) {
            if (self.head_id = templateHead.id) {
                return templateHead
            }
        }
    }
    
    /**
     * Get the templateSpans.
     */
    pub fn getTemplateSpans(self) -> *TemplateSpan {
        for (templateSpan in TemplateSpan(__all_data__)) {
            if (templateSpan.parent_id = self.id) {
                yield templateSpan
            }
        }
    }
    
}

/**
 * A TaggedTemplateExpressionDO load tagged_template_expression from db
 */
schema TaggedTemplateExpressionDO {
    @primary id: int,
    tag_id: int,
    template_id: int
}

/**
 * A TaggedTemplateExpression
 */
schema TaggedTemplateExpression extends MemberExpression {
    tag_id: int,
    template_id: int
}
impl TaggedTemplateExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TaggedTemplateExpression {
        for (fa in MemberExpression(db)) {
            for (son in TaggedTemplateExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield TaggedTemplateExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        tag_id : son.tag_id,
                        template_id : son.template_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the tag.
     */
    pub fn getTag(self) -> LeftHandSideExpression {
        for (leftHandSideExpression in LeftHandSideExpression(__all_data__)) {
            if (self.tag_id = leftHandSideExpression.id) {
                return leftHandSideExpression
            }
        }
    }
    
    /**
     * Gets the template.
     */
    pub fn getTemplate(self) -> TemplateLiteral {
        for (templateLiteral in TemplateLiteral(__all_data__)) {
            if (self.template_id = templateLiteral.id) {
                return templateLiteral
            }
        }
    }
    
    /**
     * Get the typeArgument.
     */
    pub fn getTypeArgument(self) -> *TypeNode {
        for (taggedTemplateExpressionTypeArgument in TaggedTemplateExpressionTypeArgument(__all_data__)) {
            if (taggedTemplateExpressionTypeArgument.tagged_template_expression_id = self.id) {
                yield taggedTemplateExpressionTypeArgument.getTypeArgument()
            }
        }
    }
    
}

/**
 * A TaggedTemplateExpressionTypeArgumentDO load tagged_template_expression_type_argument from db
 */
schema TaggedTemplateExpressionTypeArgumentDO {
    @primary type_argument_id: int,
    tagged_template_expression_id: int,
    index: int
}

/**
 * A TaggedTemplateExpressionTypeArgument
 */
schema TaggedTemplateExpressionTypeArgument {
    @primary type_argument_id: int,
    tagged_template_expression_id: int,
    index: int
}
impl TaggedTemplateExpressionTypeArgument {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TaggedTemplateExpressionTypeArgument {
        for (taggedTemplateExpressionTypeArgument in TaggedTemplateExpressionTypeArgumentDO(db)) {
            yield TaggedTemplateExpressionTypeArgument {
                type_argument_id: taggedTemplateExpressionTypeArgument.type_argument_id,
                tagged_template_expression_id : taggedTemplateExpressionTypeArgument.tagged_template_expression_id,
                index : taggedTemplateExpressionTypeArgument.index
            }
        }
    }
    
    /**
     * Gets the typeArgument.
     */
    pub fn getTypeArgument(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_argument_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the taggedTemplateExpression.
     */
    pub fn getTaggedTemplateExpression(self) -> TaggedTemplateExpression {
        for (taggedTemplateExpression in TaggedTemplateExpression(__all_data__)) {
            if (self.tagged_template_expression_id = taggedTemplateExpression.id) {
                return taggedTemplateExpression
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_argument_id
    }
    
}

/**
 * A TypeAssertionExpressionDO load type_assertion_expression from db
 */
schema TypeAssertionExpressionDO {
    @primary id: int,
    type_node_id: int,
    expression_id: int
}

/**
 * A TypeAssertionExpression
 */
schema TypeAssertionExpression extends UnaryExpression {
    type_node_id: int,
    expression_id: int
}
impl TypeAssertionExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeAssertionExpression {
        for (fa in UnaryExpression(db)) {
            for (son in TypeAssertionExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeAssertionExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        type_node_id : son.type_node_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> UnaryExpression {
        for (unaryExpression in UnaryExpression(__all_data__)) {
            if (self.expression_id = unaryExpression.id) {
                return unaryExpression
            }
        }
    }
    
}

/**
 * A ParenthesizedExpressionDO load parenthesized_expression from db
 */
schema ParenthesizedExpressionDO {
    @primary id: int,
    expression_id: int
}

/**
 * A ParenthesizedExpression
 */
schema ParenthesizedExpression extends PrimaryExpression {
    expression_id: int
}
impl ParenthesizedExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ParenthesizedExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in ParenthesizedExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield ParenthesizedExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A FunctionExpressionDO load function_expression from db
 */
schema FunctionExpressionDO {
    @primary id: int,
    body_id: int
}

/**
 * A FunctionExpression
 */
schema FunctionExpression extends PrimaryExpression {
    body_id: int
}
impl FunctionExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in FunctionExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield FunctionExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        body_id : son.body_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.body_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * trans to FunctionLikeDeclaration to use func.
     */
    pub fn toFunctionLikeDeclaration(self) -> FunctionLikeDeclaration {
        for (functionLikeDeclaration in FunctionLikeDeclaration(__all_data__)) {
            if (self.id = functionLikeDeclaration.id) {
                return functionLikeDeclaration
            }
        }
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (functionExpressionNameNode in FunctionExpressionNameNode(__all_data__)) {
            if (functionExpressionNameNode.function_expression_id = self.id) {
                return functionExpressionNameNode.getNameNode()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A FunctionExpressionNameNodeDO load function_expression_name_node from db
 */
schema FunctionExpressionNameNodeDO {
    @primary function_expression_id: int,
    name_node_id: int
}

/**
 * A FunctionExpressionNameNode
 */
schema FunctionExpressionNameNode {
    @primary function_expression_id: int,
    name_node_id: int
}
impl FunctionExpressionNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionExpressionNameNode {
        for (functionExpressionNameNode in FunctionExpressionNameNodeDO(db)) {
            yield FunctionExpressionNameNode {
                function_expression_id: functionExpressionNameNode.function_expression_id,
                name_node_id : functionExpressionNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the functionExpression.
     */
    pub fn getFunctionExpression(self) -> FunctionExpression {
        for (functionExpression in FunctionExpression(__all_data__)) {
            if (self.function_expression_id = functionExpression.id) {
                return functionExpression
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.function_expression_id
    }
    
}

/**
 * A ArrowFunctionDO load arrow_function from db
 */
schema ArrowFunctionDO {
    @primary id: int,
    equals_greater_than_token_id: int,
    body_id: int
}

/**
 * A ArrowFunction
 */
schema ArrowFunction extends Expression {
    equals_greater_than_token_id: int,
    body_id: int
}
impl ArrowFunction {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ArrowFunction {
        for (fa in Expression(db)) {
            for (son in ArrowFunctionDO(db)) {
                if (son.key_eq(fa)) {
                    yield ArrowFunction {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        equals_greater_than_token_id : son.equals_greater_than_token_id,
                        body_id : son.body_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the equalsGreaterThanToken.
     */
    pub fn getEqualsGreaterThanToken(self) -> EqualsGreaterThanToken {
        for (equalsGreaterThanToken in EqualsGreaterThanToken(__all_data__)) {
            if (self.equals_greater_than_token_id = equalsGreaterThanToken.id) {
                return equalsGreaterThanToken
            }
        }
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> BlockOrExpression {
        for (blockOrExpression in BlockOrExpression(__all_data__)) {
            if (self.body_id = blockOrExpression.id) {
                return blockOrExpression
            }
        }
    }
    
    /**
     * trans to FunctionLikeDeclaration to use func.
     */
    pub fn toFunctionLikeDeclaration(self) -> FunctionLikeDeclaration {
        for (functionLikeDeclaration in FunctionLikeDeclaration(__all_data__)) {
            if (self.id = functionLikeDeclaration.id) {
                return functionLikeDeclaration
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A EtsComponentExpressionDO load ets_component_expression from db
 */
schema EtsComponentExpressionDO {
    @primary id: int,
    expression_id: int
}

/**
 * A EtsComponentExpression
 */
schema EtsComponentExpression extends PrimaryExpression {
    expression_id: int
}
impl EtsComponentExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EtsComponentExpression {
        for (fa in PrimaryExpression(db)) {
            for (son in EtsComponentExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield EtsComponentExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> LeftHandSideExpression {
        for (leftHandSideExpression in LeftHandSideExpression(__all_data__)) {
            if (self.expression_id = leftHandSideExpression.id) {
                return leftHandSideExpression
            }
        }
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
    /**
     * Get the typeArgument.
     */
    pub fn getTypeArgument(self) -> *TypeNode {
        for (etsComponentExpressionTypeArgument in EtsComponentExpressionTypeArgument(__all_data__)) {
            if (etsComponentExpressionTypeArgument.ets_component_expression_id = self.id) {
                yield etsComponentExpressionTypeArgument.getTypeArgument()
            }
        }
    }
    
    /**
     * Get the argument.
     */
    pub fn getArgument(self) -> *Expression {
        for (etsComponentExpressionArgument in EtsComponentExpressionArgument(__all_data__)) {
            if (etsComponentExpressionArgument.ets_component_expression_id = self.id) {
                yield etsComponentExpressionArgument.getArgument()
            }
        }
    }
    
    /**
     * Get the body.
     */
    pub fn getBody(self) -> Block {
        for (etsComponentExpressionBody in EtsComponentExpressionBody(__all_data__)) {
            if (etsComponentExpressionBody.ets_component_expression_id = self.id) {
                return etsComponentExpressionBody.getBody()
            }
        }
    }
    
}

/**
 * A EtsComponentExpressionTypeArgumentDO load ets_component_expression_type_argument from db
 */
schema EtsComponentExpressionTypeArgumentDO {
    @primary type_argument_id: int,
    ets_component_expression_id: int,
    index: int
}

/**
 * A EtsComponentExpressionTypeArgument
 */
schema EtsComponentExpressionTypeArgument {
    @primary type_argument_id: int,
    ets_component_expression_id: int,
    index: int
}
impl EtsComponentExpressionTypeArgument {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EtsComponentExpressionTypeArgument {
        for (etsComponentExpressionTypeArgument in EtsComponentExpressionTypeArgumentDO(db)) {
            yield EtsComponentExpressionTypeArgument {
                type_argument_id: etsComponentExpressionTypeArgument.type_argument_id,
                ets_component_expression_id : etsComponentExpressionTypeArgument.ets_component_expression_id,
                index : etsComponentExpressionTypeArgument.index
            }
        }
    }
    
    /**
     * Gets the typeArgument.
     */
    pub fn getTypeArgument(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_argument_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Gets the etsComponentExpression.
     */
    pub fn getEtsComponentExpression(self) -> EtsComponentExpression {
        for (etsComponentExpression in EtsComponentExpression(__all_data__)) {
            if (self.ets_component_expression_id = etsComponentExpression.id) {
                return etsComponentExpression
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_argument_id
    }
    
}

/**
 * A EtsComponentExpressionArgumentDO load ets_component_expression_argument from db
 */
schema EtsComponentExpressionArgumentDO {
    @primary argument_id: int,
    ets_component_expression_id: int,
    index: int
}

/**
 * A EtsComponentExpressionArgument
 */
schema EtsComponentExpressionArgument {
    @primary argument_id: int,
    ets_component_expression_id: int,
    index: int
}
impl EtsComponentExpressionArgument {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EtsComponentExpressionArgument {
        for (etsComponentExpressionArgument in EtsComponentExpressionArgumentDO(db)) {
            yield EtsComponentExpressionArgument {
                argument_id: etsComponentExpressionArgument.argument_id,
                ets_component_expression_id : etsComponentExpressionArgument.ets_component_expression_id,
                index : etsComponentExpressionArgument.index
            }
        }
    }
    
    /**
     * Gets the argument.
     */
    pub fn getArgument(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.argument_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the etsComponentExpression.
     */
    pub fn getEtsComponentExpression(self) -> EtsComponentExpression {
        for (etsComponentExpression in EtsComponentExpression(__all_data__)) {
            if (self.ets_component_expression_id = etsComponentExpression.id) {
                return etsComponentExpression
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.argument_id
    }
    
}

/**
 * A EtsComponentExpressionBodyDO load ets_component_expression_body from db
 */
schema EtsComponentExpressionBodyDO {
    @primary ets_component_expression_id: int,
    body_id: int
}

/**
 * A EtsComponentExpressionBody
 */
schema EtsComponentExpressionBody {
    @primary ets_component_expression_id: int,
    body_id: int
}
impl EtsComponentExpressionBody {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EtsComponentExpressionBody {
        for (etsComponentExpressionBody in EtsComponentExpressionBodyDO(db)) {
            yield EtsComponentExpressionBody {
                ets_component_expression_id: etsComponentExpressionBody.ets_component_expression_id,
                body_id : etsComponentExpressionBody.body_id
            }
        }
    }
    
    /**
     * Gets the etsComponentExpression.
     */
    pub fn getEtsComponentExpression(self) -> EtsComponentExpression {
        for (etsComponentExpression in EtsComponentExpression(__all_data__)) {
            if (self.ets_component_expression_id = etsComponentExpression.id) {
                return etsComponentExpression
            }
        }
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.body_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.ets_component_expression_id
    }
    
}

/**
 * A DeleteExpressionDO load delete_expression from db
 */
schema DeleteExpressionDO {
    @primary id: int,
    expression_id: int
}

/**
 * A DeleteExpression
 */
schema DeleteExpression extends UnaryExpression {
    expression_id: int
}
impl DeleteExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DeleteExpression {
        for (fa in UnaryExpression(db)) {
            for (son in DeleteExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield DeleteExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> UnaryExpression {
        for (unaryExpression in UnaryExpression(__all_data__)) {
            if (self.expression_id = unaryExpression.id) {
                return unaryExpression
            }
        }
    }
    
}

/**
 * A TypeOfExpressionDO load type_of_expression from db
 */
schema TypeOfExpressionDO {
    @primary id: int,
    expression_id: int
}

/**
 * A TypeOfExpression
 */
schema TypeOfExpression extends UnaryExpression {
    expression_id: int
}
impl TypeOfExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeOfExpression {
        for (fa in UnaryExpression(db)) {
            for (son in TypeOfExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeOfExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> UnaryExpression {
        for (unaryExpression in UnaryExpression(__all_data__)) {
            if (self.expression_id = unaryExpression.id) {
                return unaryExpression
            }
        }
    }
    
}

/**
 * A VoidExpressionDO load void_expression from db
 */
schema VoidExpressionDO {
    @primary id: int,
    expression_id: int
}

/**
 * A VoidExpression
 */
schema VoidExpression extends UnaryExpression {
    expression_id: int
}
impl VoidExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *VoidExpression {
        for (fa in UnaryExpression(db)) {
            for (son in VoidExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield VoidExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> UnaryExpression {
        for (unaryExpression in UnaryExpression(__all_data__)) {
            if (self.expression_id = unaryExpression.id) {
                return unaryExpression
            }
        }
    }
    
}

/**
 * A AwaitExpressionDO load await_expression from db
 */
schema AwaitExpressionDO {
    @primary id: int,
    expression_id: int
}

/**
 * A AwaitExpression
 */
schema AwaitExpression extends UnaryExpression {
    expression_id: int
}
impl AwaitExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AwaitExpression {
        for (fa in UnaryExpression(db)) {
            for (son in AwaitExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield AwaitExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> UnaryExpression {
        for (unaryExpression in UnaryExpression(__all_data__)) {
            if (self.expression_id = unaryExpression.id) {
                return unaryExpression
            }
        }
    }
    
}

/**
 * A PrefixUnaryExpressionDO load prefix_unary_expression from db
 */
schema PrefixUnaryExpressionDO {
    @primary id: int,
    operator_id: int,
    operand_id: int
}

/**
 * A PrefixUnaryExpression
 */
schema PrefixUnaryExpression extends UpdateExpression {
    operator_id: int,
    operand_id: int
}
impl PrefixUnaryExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PrefixUnaryExpression {
        for (fa in UpdateExpression(db)) {
            for (son in PrefixUnaryExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield PrefixUnaryExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        operator_id : son.operator_id,
                        operand_id : son.operand_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the operator.
     */
    pub fn getOperator(self) -> PrefixUnaryOperator {
        for (prefixUnaryOperator in PrefixUnaryOperator(__all_data__)) {
            if (self.operator_id = prefixUnaryOperator.id) {
                return prefixUnaryOperator
            }
        }
    }
    
    /**
     * Gets the operand.
     */
    pub fn getOperand(self) -> UnaryExpression {
        for (unaryExpression in UnaryExpression(__all_data__)) {
            if (self.operand_id = unaryExpression.id) {
                return unaryExpression
            }
        }
    }
    
}

/**
 * A PostfixUnaryExpressionDO load postfix_unary_expression from db
 */
schema PostfixUnaryExpressionDO {
    @primary id: int,
    operand_id: int,
    operator_id: int
}

/**
 * A PostfixUnaryExpression
 */
schema PostfixUnaryExpression extends UpdateExpression {
    operand_id: int,
    operator_id: int
}
impl PostfixUnaryExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PostfixUnaryExpression {
        for (fa in UpdateExpression(db)) {
            for (son in PostfixUnaryExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield PostfixUnaryExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        operand_id : son.operand_id,
                        operator_id : son.operator_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the operand.
     */
    pub fn getOperand(self) -> LeftHandSideExpression {
        for (leftHandSideExpression in LeftHandSideExpression(__all_data__)) {
            if (self.operand_id = leftHandSideExpression.id) {
                return leftHandSideExpression
            }
        }
    }
    
    /**
     * Gets the operator.
     */
    pub fn getOperator(self) -> PostUnaryOperator {
        for (postUnaryOperator in PostUnaryOperator(__all_data__)) {
            if (self.operator_id = postUnaryOperator.id) {
                return postUnaryOperator
            }
        }
    }
    
}

/**
 * A BinaryExpressionDO load binary_expression from db
 */
schema BinaryExpressionDO {
    @primary id: int,
    left_id: int,
    operator_id: int,
    right_id: int
}

/**
 * A BinaryExpression
 */
schema BinaryExpression extends Expression {
    left_id: int,
    operator_id: int,
    right_id: int
}
impl BinaryExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BinaryExpression {
        for (fa in Expression(db)) {
            for (son in BinaryExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield BinaryExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        left_id : son.left_id,
                        operator_id : son.operator_id,
                        right_id : son.right_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the left.
     */
    pub fn getLeft(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.left_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the operator.
     */
    pub fn getOperator(self) -> BinaryOperator {
        for (binaryOperator in BinaryOperator(__all_data__)) {
            if (self.operator_id = binaryOperator.id) {
                return binaryOperator
            }
        }
    }
    
    /**
     * Gets the right.
     */
    pub fn getRight(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.right_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * trans to Declaration to use func.
     */
    pub fn toDeclaration(self) -> Declaration {
        for (declaration in Declaration(__all_data__)) {
            if (self.id = declaration.id) {
                return declaration
            }
        }
    }
    
}

/**
 * A ConditionalExpressionDO load conditional_expression from db
 */
schema ConditionalExpressionDO {
    @primary id: int,
    condition_id: int,
    question_token_id: int,
    then_expression_id: int,
    colon_token_id: int,
    else_expression_id: int
}

/**
 * A ConditionalExpression
 */
schema ConditionalExpression extends Expression {
    condition_id: int,
    question_token_id: int,
    then_expression_id: int,
    colon_token_id: int,
    else_expression_id: int
}
impl ConditionalExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ConditionalExpression {
        for (fa in Expression(db)) {
            for (son in ConditionalExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield ConditionalExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        condition_id : son.condition_id,
                        question_token_id : son.question_token_id,
                        then_expression_id : son.then_expression_id,
                        colon_token_id : son.colon_token_id,
                        else_expression_id : son.else_expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the condition.
     */
    pub fn getCondition(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.condition_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the questionToken.
     */
    pub fn getQuestionToken(self) -> QuestionToken {
        for (questionToken in QuestionToken(__all_data__)) {
            if (self.question_token_id = questionToken.id) {
                return questionToken
            }
        }
    }
    
    /**
     * Gets the thenExpression.
     */
    pub fn getThenExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.then_expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the colonToken.
     */
    pub fn getColonToken(self) -> ColonToken {
        for (colonToken in ColonToken(__all_data__)) {
            if (self.colon_token_id = colonToken.id) {
                return colonToken
            }
        }
    }
    
    /**
     * Gets the elseExpression.
     */
    pub fn getElseExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.else_expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A YieldExpressionDO load yield_expression from db
 */
schema YieldExpressionDO {
    @primary id: int,
}

/**
 * A YieldExpression
 */
schema YieldExpression extends Expression {
}
impl YieldExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *YieldExpression {
        for (fa in Expression(db)) {
            for (son in YieldExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield YieldExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the asteriskToken.
     */
    pub fn getAsteriskToken(self) -> AsteriskToken {
        for (yieldExpressionAsteriskToken in YieldExpressionAsteriskToken(__all_data__)) {
            if (yieldExpressionAsteriskToken.yield_expression_id = self.id) {
                return yieldExpressionAsteriskToken.getAsteriskToken()
            }
        }
    }
    
    /**
     * Get the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (yieldExpressionExpression in YieldExpressionExpression(__all_data__)) {
            if (yieldExpressionExpression.yield_expression_id = self.id) {
                return yieldExpressionExpression.getExpression()
            }
        }
    }
    
}

/**
 * A YieldExpressionAsteriskTokenDO load yield_expression_asterisk_token from db
 */
schema YieldExpressionAsteriskTokenDO {
    @primary yield_expression_id: int,
    asterisk_token_id: int
}

/**
 * A YieldExpressionAsteriskToken
 */
schema YieldExpressionAsteriskToken {
    @primary yield_expression_id: int,
    asterisk_token_id: int
}
impl YieldExpressionAsteriskToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *YieldExpressionAsteriskToken {
        for (yieldExpressionAsteriskToken in YieldExpressionAsteriskTokenDO(db)) {
            yield YieldExpressionAsteriskToken {
                yield_expression_id: yieldExpressionAsteriskToken.yield_expression_id,
                asterisk_token_id : yieldExpressionAsteriskToken.asterisk_token_id
            }
        }
    }
    
    /**
     * Gets the yieldExpression.
     */
    pub fn getYieldExpression(self) -> YieldExpression {
        for (yieldExpression in YieldExpression(__all_data__)) {
            if (self.yield_expression_id = yieldExpression.id) {
                return yieldExpression
            }
        }
    }
    
    /**
     * Gets the asteriskToken.
     */
    pub fn getAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (self.asterisk_token_id = asteriskToken.id) {
                return asteriskToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.yield_expression_id
    }
    
}

/**
 * A YieldExpressionExpressionDO load yield_expression_expression from db
 */
schema YieldExpressionExpressionDO {
    @primary yield_expression_id: int,
    expression_id: int
}

/**
 * A YieldExpressionExpression
 */
schema YieldExpressionExpression {
    @primary yield_expression_id: int,
    expression_id: int
}
impl YieldExpressionExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *YieldExpressionExpression {
        for (yieldExpressionExpression in YieldExpressionExpressionDO(db)) {
            yield YieldExpressionExpression {
                yield_expression_id: yieldExpressionExpression.yield_expression_id,
                expression_id : yieldExpressionExpression.expression_id
            }
        }
    }
    
    /**
     * Gets the yieldExpression.
     */
    pub fn getYieldExpression(self) -> YieldExpression {
        for (yieldExpression in YieldExpression(__all_data__)) {
            if (self.yield_expression_id = yieldExpression.id) {
                return yieldExpression
            }
        }
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.yield_expression_id
    }
    
}

/**
 * A SpreadElementDO load spread_element from db
 */
schema SpreadElementDO {
    @primary id: int,
    expression_id: int
}

/**
 * A SpreadElement
 */
schema SpreadElement extends Expression {
    expression_id: int
}
impl SpreadElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SpreadElement {
        for (fa in Expression(db)) {
            for (son in SpreadElementDO(db)) {
                if (son.key_eq(fa)) {
                    yield SpreadElement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A ClassExpressionDO load class_expression from db
 */
schema ClassExpressionDO {
    @primary id: int,
}

/**
 * A ClassExpression
 */
schema ClassExpression extends ClassLikeDeclaration {
}
impl ClassExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassExpression {
        for (fa in ClassLikeDeclaration(db)) {
            for (son in ClassExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield ClassExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to PrimaryExpression to use func.
     */
    pub fn toPrimaryExpression(self) -> PrimaryExpression {
        for (primaryExpression in PrimaryExpression(__all_data__)) {
            if (self.id = primaryExpression.id) {
                return primaryExpression
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A OmittedExpressionDO load omitted_expression from db
 */
schema OmittedExpressionDO {
    @primary id: int,
}

/**
 * A OmittedExpression
 */
schema OmittedExpression extends Expression {
}
impl OmittedExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *OmittedExpression {
        for (fa in Expression(db)) {
            for (son in OmittedExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield OmittedExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A ExpressionWithTypeArgumentsDO load expression_with_type_arguments from db
 */
schema ExpressionWithTypeArgumentsDO {
    @primary id: int,
    expression_id: int
}

/**
 * A ExpressionWithTypeArguments
 */
schema ExpressionWithTypeArguments extends MemberExpression {
    expression_id: int
}
impl ExpressionWithTypeArguments {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExpressionWithTypeArguments {
        for (fa in MemberExpression(db)) {
            for (son in ExpressionWithTypeArgumentsDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExpressionWithTypeArguments {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> LeftHandSideExpression {
        for (leftHandSideExpression in LeftHandSideExpression(__all_data__)) {
            if (self.expression_id = leftHandSideExpression.id) {
                return leftHandSideExpression
            }
        }
    }
    
    /**
     * trans to NodeWithTypeArguments to use func.
     */
    pub fn toNodeWithTypeArguments(self) -> NodeWithTypeArguments {
        for (nodeWithTypeArguments in NodeWithTypeArguments(__all_data__)) {
            if (self.id = nodeWithTypeArguments.id) {
                return nodeWithTypeArguments
            }
        }
    }
    
}

/**
 * A AsExpressionDO load as_expression from db
 */
schema AsExpressionDO {
    @primary id: int,
    expression_id: int,
    type_node_id: int
}

/**
 * A AsExpression
 */
schema AsExpression extends Expression {
    expression_id: int,
    type_node_id: int
}
impl AsExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AsExpression {
        for (fa in Expression(db)) {
            for (son in AsExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield AsExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
}

/**
 * A NonNullExpressionDO load non_null_expression from db
 */
schema NonNullExpressionDO {
    @primary id: int,
    expression_id: int
}

/**
 * A NonNullExpression
 */
schema NonNullExpression extends LeftHandSideExpression {
    expression_id: int
}
impl NonNullExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NonNullExpression {
        for (fa in LeftHandSideExpression(db)) {
            for (son in NonNullExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield NonNullExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A MetaPropertyDO load meta_property from db
 */
schema MetaPropertyDO {
    @primary id: int,
    keyword_token_id: int,
    name_node_id: int
}

/**
 * A MetaProperty
 */
schema MetaProperty extends PrimaryExpression {
    keyword_token_id: int,
    name_node_id: int
}
impl MetaProperty {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MetaProperty {
        for (fa in PrimaryExpression(db)) {
            for (son in MetaPropertyDO(db)) {
                if (son.key_eq(fa)) {
                    yield MetaProperty {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        keyword_token_id : son.keyword_token_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the keywordToken.
     */
    pub fn getKeywordToken(self) -> NewOrImportKeyword {
        for (newOrImportKeyword in NewOrImportKeyword(__all_data__)) {
            if (self.keyword_token_id = newOrImportKeyword.id) {
                return newOrImportKeyword
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
}

/**
 * A SatisfiesExpressionDO load satisfies_expression from db
 */
schema SatisfiesExpressionDO {
    @primary id: int,
    expression_id: int,
    type_node_id: int
}

/**
 * A SatisfiesExpression
 */
schema SatisfiesExpression extends Expression {
    expression_id: int,
    type_node_id: int
}
impl SatisfiesExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SatisfiesExpression {
        for (fa in Expression(db)) {
            for (son in SatisfiesExpressionDO(db)) {
                if (son.key_eq(fa)) {
                    yield SatisfiesExpression {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
}

/**
 * A StatementDO load statement from db
 */
schema StatementDO {
    @primary id: int,
    kind: int
}

/**
 * A Statement
 */
schema Statement extends AstNode {
}
impl Statement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Statement {
        for (fa in AstNode(db)) {
            for (son in StatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield Statement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A BlockDO load block from db
 */
schema BlockDO {
    @primary id: int,
}

/**
 * A Block
 */
schema Block extends Statement {
}
impl Block {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Block {
        for (fa in Statement(db)) {
            for (son in BlockDO(db)) {
                if (son.key_eq(fa)) {
                    yield Block {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the statement.
     */
    pub fn getStatement(self) -> *Statement {
        for (blockStatement in BlockStatement(__all_data__)) {
            if (blockStatement.block_id = self.id) {
                yield blockStatement.getStatement()
            }
        }
    }
    
}

/**
 * A BlockStatementDO load block_statement from db
 */
schema BlockStatementDO {
    @primary statement_id: int,
    block_id: int,
    index: int
}

/**
 * A BlockStatement
 */
schema BlockStatement {
    @primary statement_id: int,
    block_id: int,
    index: int
}
impl BlockStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BlockStatement {
        for (blockStatement in BlockStatementDO(db)) {
            yield BlockStatement {
                statement_id: blockStatement.statement_id,
                block_id : blockStatement.block_id,
                index : blockStatement.index
            }
        }
    }
    
    /**
     * Gets the statement.
     */
    pub fn getStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.statement_id = statement.id) {
                return statement
            }
        }
    }
    
    /**
     * Gets the block.
     */
    pub fn getBlock(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.block_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.statement_id
    }
    
}

/**
 * A EmptyStatementDO load empty_statement from db
 */
schema EmptyStatementDO {
    @primary id: int,
}

/**
 * A EmptyStatement
 */
schema EmptyStatement extends Statement {
}
impl EmptyStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EmptyStatement {
        for (fa in Statement(db)) {
            for (son in EmptyStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield EmptyStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A VariableDeclarationDO load variable_declaration from db
 */
schema VariableDeclarationDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A VariableDeclaration
 */
schema VariableDeclaration extends Declaration {
    name_node_id: int
}
impl VariableDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *VariableDeclaration {
        for (fa in Declaration(db)) {
            for (son in VariableDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield VariableDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> BindingName {
        for (bindingName in BindingName(__all_data__)) {
            if (self.name_node_id = bindingName.id) {
                return bindingName
            }
        }
    }
    
    /**
     * Get the exclamationToken.
     */
    pub fn getExclamationToken(self) -> ExclamationToken {
        for (variableDeclarationExclamationToken in VariableDeclarationExclamationToken(__all_data__)) {
            if (variableDeclarationExclamationToken.variable_declaration_id = self.id) {
                return variableDeclarationExclamationToken.getExclamationToken()
            }
        }
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (variableDeclarationTypeNode in VariableDeclarationTypeNode(__all_data__)) {
            if (variableDeclarationTypeNode.variable_declaration_id = self.id) {
                return variableDeclarationTypeNode.getTypeNode()
            }
        }
    }
    
    /**
     * Get the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (variableDeclarationInitializer in VariableDeclarationInitializer(__all_data__)) {
            if (variableDeclarationInitializer.variable_declaration_id = self.id) {
                return variableDeclarationInitializer.getInitializer()
            }
        }
    }
    
}

/**
 * A VariableDeclarationExclamationTokenDO load variable_declaration_exclamation_token from db
 */
schema VariableDeclarationExclamationTokenDO {
    @primary variable_declaration_id: int,
    exclamation_token_id: int
}

/**
 * A VariableDeclarationExclamationToken
 */
schema VariableDeclarationExclamationToken {
    @primary variable_declaration_id: int,
    exclamation_token_id: int
}
impl VariableDeclarationExclamationToken {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *VariableDeclarationExclamationToken {
        for (variableDeclarationExclamationToken in VariableDeclarationExclamationTokenDO(db)) {
            yield VariableDeclarationExclamationToken {
                variable_declaration_id: variableDeclarationExclamationToken.variable_declaration_id,
                exclamation_token_id : variableDeclarationExclamationToken.exclamation_token_id
            }
        }
    }
    
    /**
     * Gets the variableDeclaration.
     */
    pub fn getVariableDeclaration(self) -> VariableDeclaration {
        for (variableDeclaration in VariableDeclaration(__all_data__)) {
            if (self.variable_declaration_id = variableDeclaration.id) {
                return variableDeclaration
            }
        }
    }
    
    /**
     * Gets the exclamationToken.
     */
    pub fn getExclamationToken(self) -> ExclamationToken {
        for (exclamationToken in ExclamationToken(__all_data__)) {
            if (self.exclamation_token_id = exclamationToken.id) {
                return exclamationToken
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.variable_declaration_id
    }
    
}

/**
 * A VariableDeclarationTypeNodeDO load variable_declaration_type_node from db
 */
schema VariableDeclarationTypeNodeDO {
    @primary variable_declaration_id: int,
    type_node_id: int
}

/**
 * A VariableDeclarationTypeNode
 */
schema VariableDeclarationTypeNode {
    @primary variable_declaration_id: int,
    type_node_id: int
}
impl VariableDeclarationTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *VariableDeclarationTypeNode {
        for (variableDeclarationTypeNode in VariableDeclarationTypeNodeDO(db)) {
            yield VariableDeclarationTypeNode {
                variable_declaration_id: variableDeclarationTypeNode.variable_declaration_id,
                type_node_id : variableDeclarationTypeNode.type_node_id
            }
        }
    }
    
    /**
     * Gets the variableDeclaration.
     */
    pub fn getVariableDeclaration(self) -> VariableDeclaration {
        for (variableDeclaration in VariableDeclaration(__all_data__)) {
            if (self.variable_declaration_id = variableDeclaration.id) {
                return variableDeclaration
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.variable_declaration_id
    }
    
}

/**
 * A VariableDeclarationInitializerDO load variable_declaration_initializer from db
 */
schema VariableDeclarationInitializerDO {
    @primary variable_declaration_id: int,
    initializer_id: int
}

/**
 * A VariableDeclarationInitializer
 */
schema VariableDeclarationInitializer {
    @primary variable_declaration_id: int,
    initializer_id: int
}
impl VariableDeclarationInitializer {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *VariableDeclarationInitializer {
        for (variableDeclarationInitializer in VariableDeclarationInitializerDO(db)) {
            yield VariableDeclarationInitializer {
                variable_declaration_id: variableDeclarationInitializer.variable_declaration_id,
                initializer_id : variableDeclarationInitializer.initializer_id
            }
        }
    }
    
    /**
     * Gets the variableDeclaration.
     */
    pub fn getVariableDeclaration(self) -> VariableDeclaration {
        for (variableDeclaration in VariableDeclaration(__all_data__)) {
            if (self.variable_declaration_id = variableDeclaration.id) {
                return variableDeclaration
            }
        }
    }
    
    /**
     * Gets the initializer.
     */
    pub fn getInitializer(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.initializer_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.variable_declaration_id
    }
    
}

/**
 * A VariableDeclarationListDO load variable_declaration_list from db
 */
schema VariableDeclarationListDO {
    @primary id: int,
}

/**
 * A VariableDeclarationList
 */
schema VariableDeclarationList extends AstNode {
}
impl VariableDeclarationList {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *VariableDeclarationList {
        for (fa in AstNode(db)) {
            for (son in VariableDeclarationListDO(db)) {
                if (son.key_eq(fa)) {
                    yield VariableDeclarationList {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the declaration.
     */
    pub fn getDeclaration(self) -> *VariableDeclaration {
        for (variableDeclarationListDeclaration in VariableDeclarationListDeclaration(__all_data__)) {
            if (variableDeclarationListDeclaration.variable_declaration_list_id = self.id) {
                yield variableDeclarationListDeclaration.getDeclaration()
            }
        }
    }
    
}

/**
 * A VariableDeclarationListDeclarationDO load variable_declaration_list_declaration from db
 */
schema VariableDeclarationListDeclarationDO {
    @primary declaration_id: int,
    variable_declaration_list_id: int,
    index: int
}

/**
 * A VariableDeclarationListDeclaration
 */
schema VariableDeclarationListDeclaration {
    @primary declaration_id: int,
    variable_declaration_list_id: int,
    index: int
}
impl VariableDeclarationListDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *VariableDeclarationListDeclaration {
        for (variableDeclarationListDeclaration in VariableDeclarationListDeclarationDO(db)) {
            yield VariableDeclarationListDeclaration {
                declaration_id: variableDeclarationListDeclaration.declaration_id,
                variable_declaration_list_id : variableDeclarationListDeclaration.variable_declaration_list_id,
                index : variableDeclarationListDeclaration.index
            }
        }
    }
    
    /**
     * Gets the declaration.
     */
    pub fn getDeclaration(self) -> VariableDeclaration {
        for (variableDeclaration in VariableDeclaration(__all_data__)) {
            if (self.declaration_id = variableDeclaration.id) {
                return variableDeclaration
            }
        }
    }
    
    /**
     * Gets the variableDeclarationList.
     */
    pub fn getVariableDeclarationList(self) -> VariableDeclarationList {
        for (variableDeclarationList in VariableDeclarationList(__all_data__)) {
            if (self.variable_declaration_list_id = variableDeclarationList.id) {
                return variableDeclarationList
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.declaration_id
    }
    
}

/**
 * A VariableStatementDO load variable_statement from db
 */
schema VariableStatementDO {
    @primary id: int,
    declaration_list_id: int
}

/**
 * A VariableStatement
 */
schema VariableStatement extends Statement {
    declaration_list_id: int
}
impl VariableStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *VariableStatement {
        for (fa in Statement(db)) {
            for (son in VariableStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield VariableStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        declaration_list_id : son.declaration_list_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the declarationList.
     */
    pub fn getDeclarationList(self) -> VariableDeclarationList {
        for (variableDeclarationList in VariableDeclarationList(__all_data__)) {
            if (self.declaration_list_id = variableDeclarationList.id) {
                return variableDeclarationList
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A ExpressionStatementDO load expression_statement from db
 */
schema ExpressionStatementDO {
    @primary id: int,
    expression_id: int
}

/**
 * A ExpressionStatement
 */
schema ExpressionStatement extends Statement {
    expression_id: int
}
impl ExpressionStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExpressionStatement {
        for (fa in Statement(db)) {
            for (son in ExpressionStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExpressionStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A IfStatementDO load if_statement from db
 */
schema IfStatementDO {
    @primary id: int,
    condition_id: int,
    then_statement_id: int
}

/**
 * A IfStatement
 */
schema IfStatement extends Statement {
    condition_id: int,
    then_statement_id: int
}
impl IfStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IfStatement {
        for (fa in Statement(db)) {
            for (son in IfStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield IfStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        condition_id : son.condition_id,
                        then_statement_id : son.then_statement_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the condition.
     */
    pub fn getCondition(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.condition_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the thenStatement.
     */
    pub fn getThenStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.then_statement_id = statement.id) {
                return statement
            }
        }
    }
    
    /**
     * Get the elseStatement.
     */
    pub fn getElseStatement(self) -> Statement {
        for (ifStatementElseStatement in IfStatementElseStatement(__all_data__)) {
            if (ifStatementElseStatement.if_statement_id = self.id) {
                return ifStatementElseStatement.getElseStatement()
            }
        }
    }
    
}

/**
 * A IfStatementElseStatementDO load if_statement_else_statement from db
 */
schema IfStatementElseStatementDO {
    @primary if_statement_id: int,
    else_statement_id: int
}

/**
 * A IfStatementElseStatement
 */
schema IfStatementElseStatement {
    @primary if_statement_id: int,
    else_statement_id: int
}
impl IfStatementElseStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IfStatementElseStatement {
        for (ifStatementElseStatement in IfStatementElseStatementDO(db)) {
            yield IfStatementElseStatement {
                if_statement_id: ifStatementElseStatement.if_statement_id,
                else_statement_id : ifStatementElseStatement.else_statement_id
            }
        }
    }
    
    /**
     * Gets the ifStatement.
     */
    pub fn getIfStatement(self) -> IfStatement {
        for (ifStatement in IfStatement(__all_data__)) {
            if (self.if_statement_id = ifStatement.id) {
                return ifStatement
            }
        }
    }
    
    /**
     * Gets the elseStatement.
     */
    pub fn getElseStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.else_statement_id = statement.id) {
                return statement
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.if_statement_id
    }
    
}

/**
 * A IterationStatementDO load iteration_statement from db
 */
schema IterationStatementDO {
    @primary id: int,
    kind: int,
    statement_id: int
}

/**
 * A IterationStatement
 */
schema IterationStatement extends Statement {
    statement_id: int
}
impl IterationStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IterationStatement {
        for (fa in Statement(db)) {
            for (son in IterationStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield IterationStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        statement_id : son.statement_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the statement.
     */
    pub fn getStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.statement_id = statement.id) {
                return statement
            }
        }
    }
    
}

/**
 * A DoStatementDO load do_statement from db
 */
schema DoStatementDO {
    @primary id: int,
    expression_id: int
}

/**
 * A DoStatement
 */
schema DoStatement extends IterationStatement {
    expression_id: int
}
impl DoStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DoStatement {
        for (fa in IterationStatement(db)) {
            for (son in DoStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield DoStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        statement_id : fa.statement_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A WhileStatementDO load while_statement from db
 */
schema WhileStatementDO {
    @primary id: int,
    expression_id: int
}

/**
 * A WhileStatement
 */
schema WhileStatement extends IterationStatement {
    expression_id: int
}
impl WhileStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *WhileStatement {
        for (fa in IterationStatement(db)) {
            for (son in WhileStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield WhileStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        statement_id : fa.statement_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A ForStatementDO load for_statement from db
 */
schema ForStatementDO {
    @primary id: int,
}

/**
 * A ForStatement
 */
schema ForStatement extends IterationStatement {
}
impl ForStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ForStatement {
        for (fa in IterationStatement(db)) {
            for (son in ForStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield ForStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        statement_id : fa.statement_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the initializer.
     */
    pub fn getInitializer(self) -> ForInitializer {
        for (forStatementInitializer in ForStatementInitializer(__all_data__)) {
            if (forStatementInitializer.for_statement_id = self.id) {
                return forStatementInitializer.getInitializer()
            }
        }
    }
    
    /**
     * Get the condition.
     */
    pub fn getCondition(self) -> Expression {
        for (forStatementCondition in ForStatementCondition(__all_data__)) {
            if (forStatementCondition.for_statement_id = self.id) {
                return forStatementCondition.getCondition()
            }
        }
    }
    
    /**
     * Get the incrementor.
     */
    pub fn getIncrementor(self) -> Expression {
        for (forStatementIncrementor in ForStatementIncrementor(__all_data__)) {
            if (forStatementIncrementor.for_statement_id = self.id) {
                return forStatementIncrementor.getIncrementor()
            }
        }
    }
    
}

/**
 * A ForStatementInitializerDO load for_statement_initializer from db
 */
schema ForStatementInitializerDO {
    @primary for_statement_id: int,
    initializer_id: int
}

/**
 * A ForStatementInitializer
 */
schema ForStatementInitializer {
    @primary for_statement_id: int,
    initializer_id: int
}
impl ForStatementInitializer {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ForStatementInitializer {
        for (forStatementInitializer in ForStatementInitializerDO(db)) {
            yield ForStatementInitializer {
                for_statement_id: forStatementInitializer.for_statement_id,
                initializer_id : forStatementInitializer.initializer_id
            }
        }
    }
    
    /**
     * Gets the forStatement.
     */
    pub fn getForStatement(self) -> ForStatement {
        for (forStatement in ForStatement(__all_data__)) {
            if (self.for_statement_id = forStatement.id) {
                return forStatement
            }
        }
    }
    
    /**
     * Gets the initializer.
     */
    pub fn getInitializer(self) -> ForInitializer {
        for (forInitializer in ForInitializer(__all_data__)) {
            if (self.initializer_id = forInitializer.id) {
                return forInitializer
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.for_statement_id
    }
    
}

/**
 * A ForStatementConditionDO load for_statement_condition from db
 */
schema ForStatementConditionDO {
    @primary for_statement_id: int,
    condition_id: int
}

/**
 * A ForStatementCondition
 */
schema ForStatementCondition {
    @primary for_statement_id: int,
    condition_id: int
}
impl ForStatementCondition {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ForStatementCondition {
        for (forStatementCondition in ForStatementConditionDO(db)) {
            yield ForStatementCondition {
                for_statement_id: forStatementCondition.for_statement_id,
                condition_id : forStatementCondition.condition_id
            }
        }
    }
    
    /**
     * Gets the forStatement.
     */
    pub fn getForStatement(self) -> ForStatement {
        for (forStatement in ForStatement(__all_data__)) {
            if (self.for_statement_id = forStatement.id) {
                return forStatement
            }
        }
    }
    
    /**
     * Gets the condition.
     */
    pub fn getCondition(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.condition_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.for_statement_id
    }
    
}

/**
 * A ForStatementIncrementorDO load for_statement_incrementor from db
 */
schema ForStatementIncrementorDO {
    @primary for_statement_id: int,
    incrementor_id: int
}

/**
 * A ForStatementIncrementor
 */
schema ForStatementIncrementor {
    @primary for_statement_id: int,
    incrementor_id: int
}
impl ForStatementIncrementor {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ForStatementIncrementor {
        for (forStatementIncrementor in ForStatementIncrementorDO(db)) {
            yield ForStatementIncrementor {
                for_statement_id: forStatementIncrementor.for_statement_id,
                incrementor_id : forStatementIncrementor.incrementor_id
            }
        }
    }
    
    /**
     * Gets the forStatement.
     */
    pub fn getForStatement(self) -> ForStatement {
        for (forStatement in ForStatement(__all_data__)) {
            if (self.for_statement_id = forStatement.id) {
                return forStatement
            }
        }
    }
    
    /**
     * Gets the incrementor.
     */
    pub fn getIncrementor(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.incrementor_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.for_statement_id
    }
    
}

/**
 * A ForInStatementDO load for_in_statement from db
 */
schema ForInStatementDO {
    @primary id: int,
    initializer_id: int,
    expression_id: int
}

/**
 * A ForInStatement
 */
schema ForInStatement extends IterationStatement {
    initializer_id: int,
    expression_id: int
}
impl ForInStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ForInStatement {
        for (fa in IterationStatement(db)) {
            for (son in ForInStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield ForInStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        statement_id : fa.statement_id,
                        initializer_id : son.initializer_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the initializer.
     */
    pub fn getInitializer(self) -> ForInitializer {
        for (forInitializer in ForInitializer(__all_data__)) {
            if (self.initializer_id = forInitializer.id) {
                return forInitializer
            }
        }
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A ForOfStatementDO load for_of_statement from db
 */
schema ForOfStatementDO {
    @primary id: int,
    initializer_id: int,
    expression_id: int
}

/**
 * A ForOfStatement
 */
schema ForOfStatement extends IterationStatement {
    initializer_id: int,
    expression_id: int
}
impl ForOfStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ForOfStatement {
        for (fa in IterationStatement(db)) {
            for (son in ForOfStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield ForOfStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        statement_id : fa.statement_id,
                        initializer_id : son.initializer_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the initializer.
     */
    pub fn getInitializer(self) -> ForInitializer {
        for (forInitializer in ForInitializer(__all_data__)) {
            if (self.initializer_id = forInitializer.id) {
                return forInitializer
            }
        }
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get the awaitModifier.
     */
    pub fn getAwaitModifier(self) -> AwaitKeyword {
        for (forOfStatementAwaitModifier in ForOfStatementAwaitModifier(__all_data__)) {
            if (forOfStatementAwaitModifier.for_of_statement_id = self.id) {
                return forOfStatementAwaitModifier.getAwaitModifier()
            }
        }
    }
    
}

/**
 * A ForOfStatementAwaitModifierDO load for_of_statement_await_modifier from db
 */
schema ForOfStatementAwaitModifierDO {
    @primary for_of_statement_id: int,
    await_modifier_id: int
}

/**
 * A ForOfStatementAwaitModifier
 */
schema ForOfStatementAwaitModifier {
    @primary for_of_statement_id: int,
    await_modifier_id: int
}
impl ForOfStatementAwaitModifier {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ForOfStatementAwaitModifier {
        for (forOfStatementAwaitModifier in ForOfStatementAwaitModifierDO(db)) {
            yield ForOfStatementAwaitModifier {
                for_of_statement_id: forOfStatementAwaitModifier.for_of_statement_id,
                await_modifier_id : forOfStatementAwaitModifier.await_modifier_id
            }
        }
    }
    
    /**
     * Gets the forOfStatement.
     */
    pub fn getForOfStatement(self) -> ForOfStatement {
        for (forOfStatement in ForOfStatement(__all_data__)) {
            if (self.for_of_statement_id = forOfStatement.id) {
                return forOfStatement
            }
        }
    }
    
    /**
     * Gets the awaitModifier.
     */
    pub fn getAwaitModifier(self) -> AwaitKeyword {
        for (awaitKeyword in AwaitKeyword(__all_data__)) {
            if (self.await_modifier_id = awaitKeyword.id) {
                return awaitKeyword
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.for_of_statement_id
    }
    
}

/**
 * A ContinueStatementDO load continue_statement from db
 */
schema ContinueStatementDO {
    @primary id: int,
}

/**
 * A ContinueStatement
 */
schema ContinueStatement extends Statement {
}
impl ContinueStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ContinueStatement {
        for (fa in Statement(db)) {
            for (son in ContinueStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield ContinueStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the label.
     */
    pub fn getLabel(self) -> Identifier {
        for (continueStatementLabel in ContinueStatementLabel(__all_data__)) {
            if (continueStatementLabel.continue_statement_id = self.id) {
                return continueStatementLabel.getLabel()
            }
        }
    }
    
}

/**
 * A ContinueStatementLabelDO load continue_statement_label from db
 */
schema ContinueStatementLabelDO {
    @primary continue_statement_id: int,
    label_id: int
}

/**
 * A ContinueStatementLabel
 */
schema ContinueStatementLabel {
    @primary continue_statement_id: int,
    label_id: int
}
impl ContinueStatementLabel {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ContinueStatementLabel {
        for (continueStatementLabel in ContinueStatementLabelDO(db)) {
            yield ContinueStatementLabel {
                continue_statement_id: continueStatementLabel.continue_statement_id,
                label_id : continueStatementLabel.label_id
            }
        }
    }
    
    /**
     * Gets the continueStatement.
     */
    pub fn getContinueStatement(self) -> ContinueStatement {
        for (continueStatement in ContinueStatement(__all_data__)) {
            if (self.continue_statement_id = continueStatement.id) {
                return continueStatement
            }
        }
    }
    
    /**
     * Gets the label.
     */
    pub fn getLabel(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.label_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.continue_statement_id
    }
    
}

/**
 * A BreakStatementDO load break_statement from db
 */
schema BreakStatementDO {
    @primary id: int,
}

/**
 * A BreakStatement
 */
schema BreakStatement extends Statement {
}
impl BreakStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BreakStatement {
        for (fa in Statement(db)) {
            for (son in BreakStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield BreakStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the label.
     */
    pub fn getLabel(self) -> Identifier {
        for (breakStatementLabel in BreakStatementLabel(__all_data__)) {
            if (breakStatementLabel.break_statement_id = self.id) {
                return breakStatementLabel.getLabel()
            }
        }
    }
    
}

/**
 * A BreakStatementLabelDO load break_statement_label from db
 */
schema BreakStatementLabelDO {
    @primary break_statement_id: int,
    label_id: int
}

/**
 * A BreakStatementLabel
 */
schema BreakStatementLabel {
    @primary break_statement_id: int,
    label_id: int
}
impl BreakStatementLabel {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BreakStatementLabel {
        for (breakStatementLabel in BreakStatementLabelDO(db)) {
            yield BreakStatementLabel {
                break_statement_id: breakStatementLabel.break_statement_id,
                label_id : breakStatementLabel.label_id
            }
        }
    }
    
    /**
     * Gets the breakStatement.
     */
    pub fn getBreakStatement(self) -> ContinueStatement {
        for (continueStatement in ContinueStatement(__all_data__)) {
            if (self.break_statement_id = continueStatement.id) {
                return continueStatement
            }
        }
    }
    
    /**
     * Gets the label.
     */
    pub fn getLabel(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.label_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.break_statement_id
    }
    
}

/**
 * A ReturnStatementDO load return_statement from db
 */
schema ReturnStatementDO {
    @primary id: int,
}

/**
 * A ReturnStatement
 */
schema ReturnStatement extends Statement {
}
impl ReturnStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ReturnStatement {
        for (fa in Statement(db)) {
            for (son in ReturnStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield ReturnStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (returnStatementExpression in ReturnStatementExpression(__all_data__)) {
            if (returnStatementExpression.return_statement_id = self.id) {
                return returnStatementExpression.getExpression()
            }
        }
    }
    
}

/**
 * A ReturnStatementExpressionDO load return_statement_expression from db
 */
schema ReturnStatementExpressionDO {
    @primary return_statement_id: int,
    expression_id: int
}

/**
 * A ReturnStatementExpression
 */
schema ReturnStatementExpression {
    @primary return_statement_id: int,
    expression_id: int
}
impl ReturnStatementExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ReturnStatementExpression {
        for (returnStatementExpression in ReturnStatementExpressionDO(db)) {
            yield ReturnStatementExpression {
                return_statement_id: returnStatementExpression.return_statement_id,
                expression_id : returnStatementExpression.expression_id
            }
        }
    }
    
    /**
     * Gets the returnStatement.
     */
    pub fn getReturnStatement(self) -> ReturnStatement {
        for (returnStatement in ReturnStatement(__all_data__)) {
            if (self.return_statement_id = returnStatement.id) {
                return returnStatement
            }
        }
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.return_statement_id
    }
    
}

/**
 * A WithStatementDO load with_statement from db
 */
schema WithStatementDO {
    @primary id: int,
    expression_id: int,
    statement_id: int
}

/**
 * A WithStatement
 */
schema WithStatement extends Statement {
    expression_id: int,
    statement_id: int
}
impl WithStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *WithStatement {
        for (fa in Statement(db)) {
            for (son in WithStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield WithStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id,
                        statement_id : son.statement_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the statement.
     */
    pub fn getStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.statement_id = statement.id) {
                return statement
            }
        }
    }
    
}

/**
 * A CaseBlockDO load case_block from db
 */
schema CaseBlockDO {
    @primary id: int,
}

/**
 * A CaseBlock
 */
schema CaseBlock extends AstNode {
}
impl CaseBlock {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CaseBlock {
        for (fa in AstNode(db)) {
            for (son in CaseBlockDO(db)) {
                if (son.key_eq(fa)) {
                    yield CaseBlock {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the clause.
     */
    pub fn getClause(self) -> *CaseOrDefaultClause {
        for (caseBlockClause in CaseBlockClause(__all_data__)) {
            if (caseBlockClause.case_block_id = self.id) {
                yield caseBlockClause.getClause()
            }
        }
    }
    
}

/**
 * A CaseBlockClauseDO load case_block_clause from db
 */
schema CaseBlockClauseDO {
    @primary clause_id: int,
    case_block_id: int,
    index: int
}

/**
 * A CaseBlockClause
 */
schema CaseBlockClause {
    @primary clause_id: int,
    case_block_id: int,
    index: int
}
impl CaseBlockClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CaseBlockClause {
        for (caseBlockClause in CaseBlockClauseDO(db)) {
            yield CaseBlockClause {
                clause_id: caseBlockClause.clause_id,
                case_block_id : caseBlockClause.case_block_id,
                index : caseBlockClause.index
            }
        }
    }
    
    /**
     * Gets the clause.
     */
    pub fn getClause(self) -> CaseOrDefaultClause {
        for (caseOrDefaultClause in CaseOrDefaultClause(__all_data__)) {
            if (self.clause_id = caseOrDefaultClause.id) {
                return caseOrDefaultClause
            }
        }
    }
    
    /**
     * Gets the caseBlock.
     */
    pub fn getCaseBlock(self) -> CaseBlock {
        for (caseBlock in CaseBlock(__all_data__)) {
            if (self.case_block_id = caseBlock.id) {
                return caseBlock
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.clause_id
    }
    
}

/**
 * A CaseClauseDO load case_clause from db
 */
schema CaseClauseDO {
    @primary id: int,
    expression_id: int
}

/**
 * A CaseClause
 */
schema CaseClause extends AstNode {
    expression_id: int
}
impl CaseClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CaseClause {
        for (fa in AstNode(db)) {
            for (son in CaseClauseDO(db)) {
                if (son.key_eq(fa)) {
                    yield CaseClause {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get the statement.
     */
    pub fn getStatement(self) -> *Statement {
        for (caseClauseStatement in CaseClauseStatement(__all_data__)) {
            if (caseClauseStatement.case_clause_id = self.id) {
                yield caseClauseStatement.getStatement()
            }
        }
    }
    
}

/**
 * A CaseClauseStatementDO load case_clause_statement from db
 */
schema CaseClauseStatementDO {
    @primary statement_id: int,
    case_clause_id: int,
    index: int
}

/**
 * A CaseClauseStatement
 */
schema CaseClauseStatement {
    @primary statement_id: int,
    case_clause_id: int,
    index: int
}
impl CaseClauseStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CaseClauseStatement {
        for (caseClauseStatement in CaseClauseStatementDO(db)) {
            yield CaseClauseStatement {
                statement_id: caseClauseStatement.statement_id,
                case_clause_id : caseClauseStatement.case_clause_id,
                index : caseClauseStatement.index
            }
        }
    }
    
    /**
     * Gets the statement.
     */
    pub fn getStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.statement_id = statement.id) {
                return statement
            }
        }
    }
    
    /**
     * Gets the caseClause.
     */
    pub fn getCaseClause(self) -> CaseClause {
        for (caseClause in CaseClause(__all_data__)) {
            if (self.case_clause_id = caseClause.id) {
                return caseClause
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.statement_id
    }
    
}

/**
 * A DefaultClauseDO load default_clause from db
 */
schema DefaultClauseDO {
    @primary id: int,
}

/**
 * A DefaultClause
 */
schema DefaultClause extends AstNode {
}
impl DefaultClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DefaultClause {
        for (fa in AstNode(db)) {
            for (son in DefaultClauseDO(db)) {
                if (son.key_eq(fa)) {
                    yield DefaultClause {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the statement.
     */
    pub fn getStatement(self) -> *Statement {
        for (defaultClauseStatement in DefaultClauseStatement(__all_data__)) {
            if (defaultClauseStatement.default_clause_id = self.id) {
                yield defaultClauseStatement.getStatement()
            }
        }
    }
    
}

/**
 * A DefaultClauseStatementDO load default_clause_statement from db
 */
schema DefaultClauseStatementDO {
    @primary statement_id: int,
    default_clause_id: int,
    index: int
}

/**
 * A DefaultClauseStatement
 */
schema DefaultClauseStatement {
    @primary statement_id: int,
    default_clause_id: int,
    index: int
}
impl DefaultClauseStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DefaultClauseStatement {
        for (defaultClauseStatement in DefaultClauseStatementDO(db)) {
            yield DefaultClauseStatement {
                statement_id: defaultClauseStatement.statement_id,
                default_clause_id : defaultClauseStatement.default_clause_id,
                index : defaultClauseStatement.index
            }
        }
    }
    
    /**
     * Gets the statement.
     */
    pub fn getStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.statement_id = statement.id) {
                return statement
            }
        }
    }
    
    /**
     * Gets the defaultClause.
     */
    pub fn getDefaultClause(self) -> DefaultClause {
        for (defaultClause in DefaultClause(__all_data__)) {
            if (self.default_clause_id = defaultClause.id) {
                return defaultClause
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.statement_id
    }
    
}

/**
 * A SwitchStatementDO load switch_statement from db
 */
schema SwitchStatementDO {
    @primary id: int,
    expression_id: int,
    case_block_id: int
}

/**
 * A SwitchStatement
 */
schema SwitchStatement extends Statement {
    expression_id: int,
    case_block_id: int
}
impl SwitchStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SwitchStatement {
        for (fa in Statement(db)) {
            for (son in SwitchStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield SwitchStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id,
                        case_block_id : son.case_block_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Gets the caseBlock.
     */
    pub fn getCaseBlock(self) -> CaseBlock {
        for (caseBlock in CaseBlock(__all_data__)) {
            if (self.case_block_id = caseBlock.id) {
                return caseBlock
            }
        }
    }
    
}

/**
 * A LabeledStatementDO load labeled_statement from db
 */
schema LabeledStatementDO {
    @primary id: int,
    label_id: int,
    statement_id: int
}

/**
 * A LabeledStatement
 */
schema LabeledStatement extends Statement {
    label_id: int,
    statement_id: int
}
impl LabeledStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LabeledStatement {
        for (fa in Statement(db)) {
            for (son in LabeledStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield LabeledStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        label_id : son.label_id,
                        statement_id : son.statement_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the label.
     */
    pub fn getLabel(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.label_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Gets the statement.
     */
    pub fn getStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.statement_id = statement.id) {
                return statement
            }
        }
    }
    
}

/**
 * A ThrowStatementDO load throw_statement from db
 */
schema ThrowStatementDO {
    @primary id: int,
    expression_id: int
}

/**
 * A ThrowStatement
 */
schema ThrowStatement extends Statement {
    expression_id: int
}
impl ThrowStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ThrowStatement {
        for (fa in Statement(db)) {
            for (son in ThrowStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield ThrowStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A TryStatementDO load try_statement from db
 */
schema TryStatementDO {
    @primary id: int,
    try_block_id: int
}

/**
 * A TryStatement
 */
schema TryStatement extends Statement {
    try_block_id: int
}
impl TryStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TryStatement {
        for (fa in Statement(db)) {
            for (son in TryStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield TryStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        try_block_id : son.try_block_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the tryBlock.
     */
    pub fn getTryBlock(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.try_block_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Get the finallyBlock.
     */
    pub fn getFinallyBlock(self) -> Block {
        for (tryStatementFinallyBlock in TryStatementFinallyBlock(__all_data__)) {
            if (tryStatementFinallyBlock.try_statement_id = self.id) {
                return tryStatementFinallyBlock.getFinallyBlock()
            }
        }
    }
    
}

/**
 * A TryStatementFinallyBlockDO load try_statement_finally_block from db
 */
schema TryStatementFinallyBlockDO {
    @primary try_statement_id: int,
    finally_block_id: int
}

/**
 * A TryStatementFinallyBlock
 */
schema TryStatementFinallyBlock {
    @primary try_statement_id: int,
    finally_block_id: int
}
impl TryStatementFinallyBlock {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TryStatementFinallyBlock {
        for (tryStatementFinallyBlock in TryStatementFinallyBlockDO(db)) {
            yield TryStatementFinallyBlock {
                try_statement_id: tryStatementFinallyBlock.try_statement_id,
                finally_block_id : tryStatementFinallyBlock.finally_block_id
            }
        }
    }
    
    /**
     * Gets the tryStatement.
     */
    pub fn getTryStatement(self) -> TryStatement {
        for (tryStatement in TryStatement(__all_data__)) {
            if (self.try_statement_id = tryStatement.id) {
                return tryStatement
            }
        }
    }
    
    /**
     * Gets the finallyBlock.
     */
    pub fn getFinallyBlock(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.finally_block_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.try_statement_id
    }
    
}

/**
 * A CatchClauseDO load catch_clause from db
 */
schema CatchClauseDO {
    @primary id: int,
    parent_id: int,
    block_id: int
}

/**
 * A CatchClause
 */
schema CatchClause extends AstNode {
    block_id: int
}
impl CatchClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CatchClause {
        for (fa in AstNode(db)) {
            for (son in CatchClauseDO(db)) {
                if (son.key_eq(fa)) {
                    yield CatchClause {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        block_id : son.block_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> TryStatement {
        for (tryStatement in TryStatement(__all_data__)) {
            if (self.parent_id = tryStatement.id) {
                return tryStatement
            }
        }
    }
    
    /**
     * Gets the block.
     */
    pub fn getBlock(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.block_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Get the variableDeclaration.
     */
    pub fn getVariableDeclaration(self) -> VariableDeclaration {
        for (catchClauseVariableDeclaration in CatchClauseVariableDeclaration(__all_data__)) {
            if (catchClauseVariableDeclaration.catch_clause_id = self.id) {
                return catchClauseVariableDeclaration.getVariableDeclaration()
            }
        }
    }
    
}

/**
 * A CatchClauseVariableDeclarationDO load catch_clause_variable_declaration from db
 */
schema CatchClauseVariableDeclarationDO {
    @primary catch_clause_id: int,
    variable_declaration_id: int
}

/**
 * A CatchClauseVariableDeclaration
 */
schema CatchClauseVariableDeclaration {
    @primary catch_clause_id: int,
    variable_declaration_id: int
}
impl CatchClauseVariableDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CatchClauseVariableDeclaration {
        for (catchClauseVariableDeclaration in CatchClauseVariableDeclarationDO(db)) {
            yield CatchClauseVariableDeclaration {
                catch_clause_id: catchClauseVariableDeclaration.catch_clause_id,
                variable_declaration_id : catchClauseVariableDeclaration.variable_declaration_id
            }
        }
    }
    
    /**
     * Gets the catchClause.
     */
    pub fn getCatchClause(self) -> CatchClause {
        for (catchClause in CatchClause(__all_data__)) {
            if (self.catch_clause_id = catchClause.id) {
                return catchClause
            }
        }
    }
    
    /**
     * Gets the variableDeclaration.
     */
    pub fn getVariableDeclaration(self) -> VariableDeclaration {
        for (variableDeclaration in VariableDeclaration(__all_data__)) {
            if (self.variable_declaration_id = variableDeclaration.id) {
                return variableDeclaration
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.catch_clause_id
    }
    
}

/**
 * A DebuggerStatementDO load debugger_statement from db
 */
schema DebuggerStatementDO {
    @primary id: int,
}

/**
 * A DebuggerStatement
 */
schema DebuggerStatement extends Statement {
}
impl DebuggerStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DebuggerStatement {
        for (fa in Statement(db)) {
            for (son in DebuggerStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield DebuggerStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
}

/**
 * A DeclarationStatementDO load declaration_statement from db
 */
schema DeclarationStatementDO {
    @primary id: int,
    kind: int
}

/**
 * A DeclarationStatement
 */
schema DeclarationStatement extends Declaration {
}
impl DeclarationStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DeclarationStatement {
        for (fa in Declaration(db)) {
            for (son in DeclarationStatementDO(db)) {
                if (son.key_eq(fa)) {
                    yield DeclarationStatement {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Statement to use func.
     */
    pub fn toStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.id = statement.id) {
                return statement
            }
        }
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> DeclarationStatementNameNodeType {
        for (declarationStatementNameNode in DeclarationStatementNameNode(__all_data__)) {
            if (declarationStatementNameNode.declaration_statement_id = self.id) {
                return declarationStatementNameNode.getNameNode()
            }
        }
    }
    
}

/**
 * A DeclarationStatementNameNodeDO load declaration_statement_name_node from db
 */
schema DeclarationStatementNameNodeDO {
    @primary declaration_statement_id: int,
    name_node_id: int
}

/**
 * A DeclarationStatementNameNode
 */
schema DeclarationStatementNameNode {
    @primary declaration_statement_id: int,
    name_node_id: int
}
impl DeclarationStatementNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DeclarationStatementNameNode {
        for (declarationStatementNameNode in DeclarationStatementNameNodeDO(db)) {
            yield DeclarationStatementNameNode {
                declaration_statement_id: declarationStatementNameNode.declaration_statement_id,
                name_node_id : declarationStatementNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the declarationStatement.
     */
    pub fn getDeclarationStatement(self) -> DeclarationStatement {
        for (declarationStatement in DeclarationStatement(__all_data__)) {
            if (self.declaration_statement_id = declarationStatement.id) {
                return declarationStatement
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> DeclarationStatementNameNodeType {
        for (declarationStatementNameNodeType in DeclarationStatementNameNodeType(__all_data__)) {
            if (self.name_node_id = declarationStatementNameNodeType.id) {
                return declarationStatementNameNodeType
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.declaration_statement_id
    }
    
}

/**
 * A FunctionDeclarationDO load function_declaration from db
 */
schema FunctionDeclarationDO {
    @primary id: int,
}

/**
 * A FunctionDeclaration
 */
schema FunctionDeclaration extends FunctionLikeDeclaration {
}
impl FunctionDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionDeclaration {
        for (fa in FunctionLikeDeclaration(db)) {
            for (son in FunctionDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield FunctionDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to DeclarationStatement to use func.
     */
    pub fn toDeclarationStatement(self) -> DeclarationStatement {
        for (declarationStatement in DeclarationStatement(__all_data__)) {
            if (self.id = declarationStatement.id) {
                return declarationStatement
            }
        }
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (functionDeclarationNameNode in FunctionDeclarationNameNode(__all_data__)) {
            if (functionDeclarationNameNode.function_declaration_id = self.id) {
                return functionDeclarationNameNode.getNameNode()
            }
        }
    }
    
    /**
     * Get the body.
     */
    pub fn getBody(self) -> Block {
        for (functionDeclarationBody in FunctionDeclarationBody(__all_data__)) {
            if (functionDeclarationBody.function_declaration_id = self.id) {
                return functionDeclarationBody.getBody()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A FunctionDeclarationNameNodeDO load function_declaration_name_node from db
 */
schema FunctionDeclarationNameNodeDO {
    @primary function_declaration_id: int,
    name_node_id: int
}

/**
 * A FunctionDeclarationNameNode
 */
schema FunctionDeclarationNameNode {
    @primary function_declaration_id: int,
    name_node_id: int
}
impl FunctionDeclarationNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionDeclarationNameNode {
        for (functionDeclarationNameNode in FunctionDeclarationNameNodeDO(db)) {
            yield FunctionDeclarationNameNode {
                function_declaration_id: functionDeclarationNameNode.function_declaration_id,
                name_node_id : functionDeclarationNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the functionDeclaration.
     */
    pub fn getFunctionDeclaration(self) -> FunctionDeclaration {
        for (functionDeclaration in FunctionDeclaration(__all_data__)) {
            if (self.function_declaration_id = functionDeclaration.id) {
                return functionDeclaration
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.function_declaration_id
    }
    
}

/**
 * A FunctionDeclarationBodyDO load function_declaration_body from db
 */
schema FunctionDeclarationBodyDO {
    @primary function_declaration_id: int,
    body_id: int
}

/**
 * A FunctionDeclarationBody
 */
schema FunctionDeclarationBody {
    @primary function_declaration_id: int,
    body_id: int
}
impl FunctionDeclarationBody {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FunctionDeclarationBody {
        for (functionDeclarationBody in FunctionDeclarationBodyDO(db)) {
            yield FunctionDeclarationBody {
                function_declaration_id: functionDeclarationBody.function_declaration_id,
                body_id : functionDeclarationBody.body_id
            }
        }
    }
    
    /**
     * Gets the functionDeclaration.
     */
    pub fn getFunctionDeclaration(self) -> FunctionDeclaration {
        for (functionDeclaration in FunctionDeclaration(__all_data__)) {
            if (self.function_declaration_id = functionDeclaration.id) {
                return functionDeclaration
            }
        }
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> Block {
        for (block in Block(__all_data__)) {
            if (self.body_id = block.id) {
                return block
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.function_declaration_id
    }
    
}

/**
 * A ClassDeclarationDO load class_declaration from db
 */
schema ClassDeclarationDO {
    @primary id: int,
}

/**
 * A ClassDeclaration
 */
schema ClassDeclaration extends ClassLikeDeclaration {
}
impl ClassDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassDeclaration {
        for (fa in ClassLikeDeclaration(db)) {
            for (son in ClassDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield ClassDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to DeclarationStatement to use func.
     */
    pub fn toDeclarationStatement(self) -> DeclarationStatement {
        for (declarationStatement in DeclarationStatement(__all_data__)) {
            if (self.id = declarationStatement.id) {
                return declarationStatement
            }
        }
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (classDeclarationNameNode in ClassDeclarationNameNode(__all_data__)) {
            if (classDeclarationNameNode.class_declaration_id = self.id) {
                return classDeclarationNameNode.getNameNode()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A ClassDeclarationNameNodeDO load class_declaration_name_node from db
 */
schema ClassDeclarationNameNodeDO {
    @primary class_declaration_id: int,
    name_node_id: int
}

/**
 * A ClassDeclarationNameNode
 */
schema ClassDeclarationNameNode {
    @primary class_declaration_id: int,
    name_node_id: int
}
impl ClassDeclarationNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ClassDeclarationNameNode {
        for (classDeclarationNameNode in ClassDeclarationNameNodeDO(db)) {
            yield ClassDeclarationNameNode {
                class_declaration_id: classDeclarationNameNode.class_declaration_id,
                name_node_id : classDeclarationNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the classDeclaration.
     */
    pub fn getClassDeclaration(self) -> ClassDeclaration {
        for (classDeclaration in ClassDeclaration(__all_data__)) {
            if (self.class_declaration_id = classDeclaration.id) {
                return classDeclaration
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.class_declaration_id
    }
    
}

/**
 * A StructDeclarationDO load struct_declaration from db
 */
schema StructDeclarationDO {
    @primary id: int,
}

/**
 * A StructDeclaration
 */
schema StructDeclaration extends ClassLikeDeclaration {
}
impl StructDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *StructDeclaration {
        for (fa in ClassLikeDeclaration(db)) {
            for (son in StructDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield StructDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to DeclarationStatement to use func.
     */
    pub fn toDeclarationStatement(self) -> DeclarationStatement {
        for (declarationStatement in DeclarationStatement(__all_data__)) {
            if (self.id = declarationStatement.id) {
                return declarationStatement
            }
        }
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (structDeclarationNameNode in StructDeclarationNameNode(__all_data__)) {
            if (structDeclarationNameNode.struct_declaration_id = self.id) {
                return structDeclarationNameNode.getNameNode()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A StructDeclarationNameNodeDO load struct_declaration_name_node from db
 */
schema StructDeclarationNameNodeDO {
    @primary struct_declaration_id: int,
    name_node_id: int
}

/**
 * A StructDeclarationNameNode
 */
schema StructDeclarationNameNode {
    @primary struct_declaration_id: int,
    name_node_id: int
}
impl StructDeclarationNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *StructDeclarationNameNode {
        for (structDeclarationNameNode in StructDeclarationNameNodeDO(db)) {
            yield StructDeclarationNameNode {
                struct_declaration_id: structDeclarationNameNode.struct_declaration_id,
                name_node_id : structDeclarationNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the structDeclaration.
     */
    pub fn getStructDeclaration(self) -> StructDeclaration {
        for (structDeclaration in StructDeclaration(__all_data__)) {
            if (self.struct_declaration_id = structDeclaration.id) {
                return structDeclaration
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.struct_declaration_id
    }
    
}

/**
 * A HeritageClauseDO load heritage_clause from db
 */
schema HeritageClauseDO {
    @primary id: int,
    parent_id: int,
    index: int,
    token_id: int
}

/**
 * A HeritageClause
 */
schema HeritageClause extends AstNode {
    token_id: int
}
impl HeritageClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *HeritageClause {
        for (fa in AstNode(db)) {
            for (son in HeritageClauseDO(db)) {
                if (son.key_eq(fa)) {
                    yield HeritageClause {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        token_id : son.token_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> InterfaceOrClassLikeDeclaration {
        for (interfaceOrClassLikeDeclaration in InterfaceOrClassLikeDeclaration(__all_data__)) {
            if (self.parent_id = interfaceOrClassLikeDeclaration.id) {
                return interfaceOrClassLikeDeclaration
            }
        }
    }
    
    /**
     * Gets the token.
     */
    pub fn getToken(self) -> ExtendsOrImplementsKeyword {
        for (extendsOrImplementsKeyword in ExtendsOrImplementsKeyword(__all_data__)) {
            if (self.token_id = extendsOrImplementsKeyword.id) {
                return extendsOrImplementsKeyword
            }
        }
    }
    
    /**
     * Get the typeNode.
     */
    pub fn getTypeNode(self) -> *ExpressionWithTypeArguments {
        for (heritageClauseTypeNode in HeritageClauseTypeNode(__all_data__)) {
            if (heritageClauseTypeNode.heritage_clause_id = self.id) {
                yield heritageClauseTypeNode.getTypeNode()
            }
        }
    }
    
}

/**
 * A HeritageClauseTypeNodeDO load heritage_clause_type_node from db
 */
schema HeritageClauseTypeNodeDO {
    @primary type_node_id: int,
    heritage_clause_id: int,
    index: int
}

/**
 * A HeritageClauseTypeNode
 */
schema HeritageClauseTypeNode {
    @primary type_node_id: int,
    heritage_clause_id: int,
    index: int
}
impl HeritageClauseTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *HeritageClauseTypeNode {
        for (heritageClauseTypeNode in HeritageClauseTypeNodeDO(db)) {
            yield HeritageClauseTypeNode {
                type_node_id: heritageClauseTypeNode.type_node_id,
                heritage_clause_id : heritageClauseTypeNode.heritage_clause_id,
                index : heritageClauseTypeNode.index
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> ExpressionWithTypeArguments {
        for (expressionWithTypeArguments in ExpressionWithTypeArguments(__all_data__)) {
            if (self.type_node_id = expressionWithTypeArguments.id) {
                return expressionWithTypeArguments
            }
        }
    }
    
    /**
     * Gets the heritageClause.
     */
    pub fn getHeritageClause(self) -> HeritageClause {
        for (heritageClause in HeritageClause(__all_data__)) {
            if (self.heritage_clause_id = heritageClause.id) {
                return heritageClause
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_node_id
    }
    
}

/**
 * A InterfaceDeclarationDO load interface_declaration from db
 */
schema InterfaceDeclarationDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A InterfaceDeclaration
 */
schema InterfaceDeclaration extends DeclarationStatement {
    name_node_id: int
}
impl InterfaceDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *InterfaceDeclaration {
        for (fa in DeclarationStatement(db)) {
            for (son in InterfaceDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield InterfaceDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get the typeParameter.
     */
    pub fn getTypeParameter(self) -> *TypeParameter {
        for (interfaceDeclarationTypeParameter in InterfaceDeclarationTypeParameter(__all_data__)) {
            if (interfaceDeclarationTypeParameter.interface_declaration_id = self.id) {
                yield interfaceDeclarationTypeParameter.getTypeParameter()
            }
        }
    }
    
    /**
     * Get the member.
     */
    pub fn getMember(self) -> *TypeElement {
        for (interfaceDeclarationMember in InterfaceDeclarationMember(__all_data__)) {
            if (interfaceDeclarationMember.interface_declaration_id = self.id) {
                yield interfaceDeclarationMember.getMember()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
    /**
     * Get the heritageClauses.
     */
    pub fn getHeritageClauses(self) -> *HeritageClause {
        for (heritageClause in HeritageClause(__all_data__)) {
            if (heritageClause.parent_id = self.id) {
                yield heritageClause
            }
        }
    }
    
}

/**
 * A InterfaceDeclarationTypeParameterDO load interface_declaration_type_parameter from db
 */
schema InterfaceDeclarationTypeParameterDO {
    @primary type_parameter_id: int,
    interface_declaration_id: int,
    index: int
}

/**
 * A InterfaceDeclarationTypeParameter
 */
schema InterfaceDeclarationTypeParameter {
    @primary type_parameter_id: int,
    interface_declaration_id: int,
    index: int
}
impl InterfaceDeclarationTypeParameter {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *InterfaceDeclarationTypeParameter {
        for (interfaceDeclarationTypeParameter in InterfaceDeclarationTypeParameterDO(db)) {
            yield InterfaceDeclarationTypeParameter {
                type_parameter_id: interfaceDeclarationTypeParameter.type_parameter_id,
                interface_declaration_id : interfaceDeclarationTypeParameter.interface_declaration_id,
                index : interfaceDeclarationTypeParameter.index
            }
        }
    }
    
    /**
     * Gets the typeParameter.
     */
    pub fn getTypeParameter(self) -> TypeParameter {
        for (typeParameter in TypeParameter(__all_data__)) {
            if (self.type_parameter_id = typeParameter.id) {
                return typeParameter
            }
        }
    }
    
    /**
     * Gets the interfaceDeclaration.
     */
    pub fn getInterfaceDeclaration(self) -> InterfaceDeclaration {
        for (interfaceDeclaration in InterfaceDeclaration(__all_data__)) {
            if (self.interface_declaration_id = interfaceDeclaration.id) {
                return interfaceDeclaration
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_parameter_id
    }
    
}

/**
 * A InterfaceDeclarationMemberDO load interface_declaration_member from db
 */
schema InterfaceDeclarationMemberDO {
    @primary member_id: int,
    interface_declaration_id: int,
    index: int
}

/**
 * A InterfaceDeclarationMember
 */
schema InterfaceDeclarationMember {
    @primary member_id: int,
    interface_declaration_id: int,
    index: int
}
impl InterfaceDeclarationMember {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *InterfaceDeclarationMember {
        for (interfaceDeclarationMember in InterfaceDeclarationMemberDO(db)) {
            yield InterfaceDeclarationMember {
                member_id: interfaceDeclarationMember.member_id,
                interface_declaration_id : interfaceDeclarationMember.interface_declaration_id,
                index : interfaceDeclarationMember.index
            }
        }
    }
    
    /**
     * Gets the member.
     */
    pub fn getMember(self) -> TypeElement {
        for (typeElement in TypeElement(__all_data__)) {
            if (self.member_id = typeElement.id) {
                return typeElement
            }
        }
    }
    
    /**
     * Gets the interfaceDeclaration.
     */
    pub fn getInterfaceDeclaration(self) -> InterfaceDeclaration {
        for (interfaceDeclaration in InterfaceDeclaration(__all_data__)) {
            if (self.interface_declaration_id = interfaceDeclaration.id) {
                return interfaceDeclaration
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.member_id
    }
    
}

/**
 * A TypeAliasDeclarationDO load type_alias_declaration from db
 */
schema TypeAliasDeclarationDO {
    @primary id: int,
    name_node_id: int,
    type_node_id: int
}

/**
 * A TypeAliasDeclaration
 */
schema TypeAliasDeclaration extends DeclarationStatement {
    name_node_id: int,
    type_node_id: int
}
impl TypeAliasDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeAliasDeclaration {
        for (fa in DeclarationStatement(db)) {
            for (son in TypeAliasDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield TypeAliasDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id,
                        type_node_id : son.type_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Gets the typeNode.
     */
    pub fn getTypeNode(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (self.type_node_id = typeNode.id) {
                return typeNode
            }
        }
    }
    
    /**
     * Get the typeParameter.
     */
    pub fn getTypeParameter(self) -> *TypeParameter {
        for (typeAliasDeclarationTypeParameter in TypeAliasDeclarationTypeParameter(__all_data__)) {
            if (typeAliasDeclarationTypeParameter.type_alias_declaration_id = self.id) {
                yield typeAliasDeclarationTypeParameter.getTypeParameter()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A TypeAliasDeclarationTypeParameterDO load type_alias_declaration_type_parameter from db
 */
schema TypeAliasDeclarationTypeParameterDO {
    @primary type_parameter_id: int,
    type_alias_declaration_id: int,
    index: int
}

/**
 * A TypeAliasDeclarationTypeParameter
 */
schema TypeAliasDeclarationTypeParameter {
    @primary type_parameter_id: int,
    type_alias_declaration_id: int,
    index: int
}
impl TypeAliasDeclarationTypeParameter {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeAliasDeclarationTypeParameter {
        for (typeAliasDeclarationTypeParameter in TypeAliasDeclarationTypeParameterDO(db)) {
            yield TypeAliasDeclarationTypeParameter {
                type_parameter_id: typeAliasDeclarationTypeParameter.type_parameter_id,
                type_alias_declaration_id : typeAliasDeclarationTypeParameter.type_alias_declaration_id,
                index : typeAliasDeclarationTypeParameter.index
            }
        }
    }
    
    /**
     * Gets the typeParameter.
     */
    pub fn getTypeParameter(self) -> TypeParameter {
        for (typeParameter in TypeParameter(__all_data__)) {
            if (self.type_parameter_id = typeParameter.id) {
                return typeParameter
            }
        }
    }
    
    /**
     * Gets the typeAliasDeclaration.
     */
    pub fn getTypeAliasDeclaration(self) -> TypeAliasDeclaration {
        for (typeAliasDeclaration in TypeAliasDeclaration(__all_data__)) {
            if (self.type_alias_declaration_id = typeAliasDeclaration.id) {
                return typeAliasDeclaration
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.type_parameter_id
    }
    
}

/**
 * A EnumDeclarationDO load enum_declaration from db
 */
schema EnumDeclarationDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A EnumDeclaration
 */
schema EnumDeclaration extends DeclarationStatement {
    name_node_id: int
}
impl EnumDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EnumDeclaration {
        for (fa in DeclarationStatement(db)) {
            for (son in EnumDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield EnumDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
    /**
     * Get the members.
     */
    pub fn getMembers(self) -> *EnumMember {
        for (enumMember in EnumMember(__all_data__)) {
            if (enumMember.parent_id = self.id) {
                yield enumMember
            }
        }
    }
    
}

/**
 * A ModuleDeclarationDO load module_declaration from db
 */
schema ModuleDeclarationDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A ModuleDeclaration
 */
schema ModuleDeclaration extends DeclarationStatement {
    name_node_id: int
}
impl ModuleDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ModuleDeclaration {
        for (fa in DeclarationStatement(db)) {
            for (son in ModuleDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield ModuleDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> ModuleName {
        for (moduleName in ModuleName(__all_data__)) {
            if (self.name_node_id = moduleName.id) {
                return moduleName
            }
        }
    }
    
    /**
     * Get the body.
     */
    pub fn getBody(self) -> ModuleBody {
        for (moduleDeclarationBody in ModuleDeclarationBody(__all_data__)) {
            if (moduleDeclarationBody.module_declaration_id = self.id) {
                return moduleDeclarationBody.getBody()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A ModuleDeclarationBodyDO load module_declaration_body from db
 */
schema ModuleDeclarationBodyDO {
    @primary module_declaration_id: int,
    body_id: int
}

/**
 * A ModuleDeclarationBody
 */
schema ModuleDeclarationBody {
    @primary module_declaration_id: int,
    body_id: int
}
impl ModuleDeclarationBody {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ModuleDeclarationBody {
        for (moduleDeclarationBody in ModuleDeclarationBodyDO(db)) {
            yield ModuleDeclarationBody {
                module_declaration_id: moduleDeclarationBody.module_declaration_id,
                body_id : moduleDeclarationBody.body_id
            }
        }
    }
    
    /**
     * Gets the moduleDeclaration.
     */
    pub fn getModuleDeclaration(self) -> ModuleDeclaration {
        for (moduleDeclaration in ModuleDeclaration(__all_data__)) {
            if (self.module_declaration_id = moduleDeclaration.id) {
                return moduleDeclaration
            }
        }
    }
    
    /**
     * Gets the body.
     */
    pub fn getBody(self) -> ModuleBody {
        for (moduleBody in ModuleBody(__all_data__)) {
            if (self.body_id = moduleBody.id) {
                return moduleBody
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.module_declaration_id
    }
    
}

/**
 * A ModuleBlockDO load module_block from db
 */
schema ModuleBlockDO {
    @primary id: int,
}

/**
 * A ModuleBlock
 */
schema ModuleBlock extends Statement {
}
impl ModuleBlock {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ModuleBlock {
        for (fa in Statement(db)) {
            for (son in ModuleBlockDO(db)) {
                if (son.key_eq(fa)) {
                    yield ModuleBlock {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the statement.
     */
    pub fn getStatement(self) -> *Statement {
        for (moduleBlockStatement in ModuleBlockStatement(__all_data__)) {
            if (moduleBlockStatement.module_block_id = self.id) {
                yield moduleBlockStatement.getStatement()
            }
        }
    }
    
}

/**
 * A ModuleBlockStatementDO load module_block_statement from db
 */
schema ModuleBlockStatementDO {
    @primary statement_id: int,
    module_block_id: int,
    index: int
}

/**
 * A ModuleBlockStatement
 */
schema ModuleBlockStatement {
    @primary statement_id: int,
    module_block_id: int,
    index: int
}
impl ModuleBlockStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ModuleBlockStatement {
        for (moduleBlockStatement in ModuleBlockStatementDO(db)) {
            yield ModuleBlockStatement {
                statement_id: moduleBlockStatement.statement_id,
                module_block_id : moduleBlockStatement.module_block_id,
                index : moduleBlockStatement.index
            }
        }
    }
    
    /**
     * Gets the statement.
     */
    pub fn getStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.statement_id = statement.id) {
                return statement
            }
        }
    }
    
    /**
     * Gets the moduleBlock.
     */
    pub fn getModuleBlock(self) -> ModuleBlock {
        for (moduleBlock in ModuleBlock(__all_data__)) {
            if (self.module_block_id = moduleBlock.id) {
                return moduleBlock
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.statement_id
    }
    
}

/**
 * A NamespaceExportDeclarationDO load namespace_export_declaration from db
 */
schema NamespaceExportDeclarationDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A NamespaceExportDeclaration
 */
schema NamespaceExportDeclaration extends DeclarationStatement {
    name_node_id: int
}
impl NamespaceExportDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamespaceExportDeclaration {
        for (fa in DeclarationStatement(db)) {
            for (son in NamespaceExportDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield NamespaceExportDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
}

/**
 * A ExternalModuleReferenceDO load external_module_reference from db
 */
schema ExternalModuleReferenceDO {
    @primary id: int,
    expression_id: int
}

/**
 * A ExternalModuleReference
 */
schema ExternalModuleReference extends AstNode {
    expression_id: int
}
impl ExternalModuleReference {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExternalModuleReference {
        for (fa in AstNode(db)) {
            for (son in ExternalModuleReferenceDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExternalModuleReference {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A ImportEqualsDeclarationDO load import_equals_declaration from db
 */
schema ImportEqualsDeclarationDO {
    @primary id: int,
    name_node_id: int,
    is_type_only: int,
    module_reference_id: int
}

/**
 * A ImportEqualsDeclaration
 */
schema ImportEqualsDeclaration extends DeclarationStatement {
    name_node_id: int,
    is_type_only: int,
    module_reference_id: int
}
impl ImportEqualsDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportEqualsDeclaration {
        for (fa in DeclarationStatement(db)) {
            for (son in ImportEqualsDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield ImportEqualsDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id,
                        is_type_only : son.is_type_only,
                        module_reference_id : son.module_reference_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Gets the ypeOnly.
     */
    pub fn IsTypeOnly(self) -> bool {
        return self.is_type_only = 1
    }
    
    /**
     * Gets the moduleReference.
     */
    pub fn getModuleReference(self) -> ModuleReference {
        for (moduleReference in ModuleReference(__all_data__)) {
            if (self.module_reference_id = moduleReference.id) {
                return moduleReference
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A NamespaceImportDO load namespace_import from db
 */
schema NamespaceImportDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A NamespaceImport
 */
schema NamespaceImport extends Declaration {
    name_node_id: int
}
impl NamespaceImport {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamespaceImport {
        for (fa in Declaration(db)) {
            for (son in NamespaceImportDO(db)) {
                if (son.key_eq(fa)) {
                    yield NamespaceImport {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
}

/**
 * A ImportSpecifierDO load import_specifier from db
 */
schema ImportSpecifierDO {
    @primary id: int,
    parent_id: int,
    index: int,
    name_node_id: int,
    is_type_only: int
}

/**
 * A ImportSpecifier
 */
schema ImportSpecifier extends Declaration {
    name_node_id: int,
    is_type_only: int
}
impl ImportSpecifier {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportSpecifier {
        for (fa in Declaration(db)) {
            for (son in ImportSpecifierDO(db)) {
                if (son.key_eq(fa)) {
                    yield ImportSpecifier {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id,
                        is_type_only : son.is_type_only
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> NamedImports {
        for (namedImports in NamedImports(__all_data__)) {
            if (self.parent_id = namedImports.id) {
                return namedImports
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Gets the ypeOnly.
     */
    pub fn IsTypeOnly(self) -> bool {
        return self.is_type_only = 1
    }
    
    /**
     * Get the propertyNameNode.
     */
    pub fn getPropertyNameNode(self) -> Identifier {
        for (importSpecifierPropertyNameNode in ImportSpecifierPropertyNameNode(__all_data__)) {
            if (importSpecifierPropertyNameNode.import_specifier_id = self.id) {
                return importSpecifierPropertyNameNode.getPropertyNameNode()
            }
        }
    }
    
}

/**
 * A ImportSpecifierPropertyNameNodeDO load import_specifier_property_name_node from db
 */
schema ImportSpecifierPropertyNameNodeDO {
    @primary import_specifier_id: int,
    property_name_node_id: int
}

/**
 * A ImportSpecifierPropertyNameNode
 */
schema ImportSpecifierPropertyNameNode {
    @primary import_specifier_id: int,
    property_name_node_id: int
}
impl ImportSpecifierPropertyNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportSpecifierPropertyNameNode {
        for (importSpecifierPropertyNameNode in ImportSpecifierPropertyNameNodeDO(db)) {
            yield ImportSpecifierPropertyNameNode {
                import_specifier_id: importSpecifierPropertyNameNode.import_specifier_id,
                property_name_node_id : importSpecifierPropertyNameNode.property_name_node_id
            }
        }
    }
    
    /**
     * Gets the importSpecifier.
     */
    pub fn getImportSpecifier(self) -> ImportSpecifier {
        for (importSpecifier in ImportSpecifier(__all_data__)) {
            if (self.import_specifier_id = importSpecifier.id) {
                return importSpecifier
            }
        }
    }
    
    /**
     * Gets the propertyNameNode.
     */
    pub fn getPropertyNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.property_name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.import_specifier_id
    }
    
}

/**
 * A NamedImportsDO load named_imports from db
 */
schema NamedImportsDO {
    @primary id: int,
}

/**
 * A NamedImports
 */
schema NamedImports extends AstNode {
}
impl NamedImports {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamedImports {
        for (fa in AstNode(db)) {
            for (son in NamedImportsDO(db)) {
                if (son.key_eq(fa)) {
                    yield NamedImports {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the elements.
     */
    pub fn getElements(self) -> *ImportSpecifier {
        for (importSpecifier in ImportSpecifier(__all_data__)) {
            if (importSpecifier.parent_id = self.id) {
                yield importSpecifier
            }
        }
    }
    
}

/**
 * A ImportClauseDO load import_clause from db
 */
schema ImportClauseDO {
    @primary id: int,
    parent_id: int,
    is_type_only: int
}

/**
 * A ImportClause
 */
schema ImportClause extends Declaration {
    is_type_only: int
}
impl ImportClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportClause {
        for (fa in Declaration(db)) {
            for (son in ImportClauseDO(db)) {
                if (son.key_eq(fa)) {
                    yield ImportClause {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        is_type_only : son.is_type_only
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> ImportDeclaration {
        for (importDeclaration in ImportDeclaration(__all_data__)) {
            if (self.parent_id = importDeclaration.id) {
                return importDeclaration
            }
        }
    }
    
    /**
     * Gets the ypeOnly.
     */
    pub fn IsTypeOnly(self) -> bool {
        return self.is_type_only = 1
    }
    
    /**
     * Get the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (importClauseNameNode in ImportClauseNameNode(__all_data__)) {
            if (importClauseNameNode.import_clause_id = self.id) {
                return importClauseNameNode.getNameNode()
            }
        }
    }
    
    /**
     * Get the namedBindings.
     */
    pub fn getNamedBindings(self) -> NamedImportBindings {
        for (importClauseNamedBindings in ImportClauseNamedBindings(__all_data__)) {
            if (importClauseNamedBindings.import_clause_id = self.id) {
                return importClauseNamedBindings.getNamedBindings()
            }
        }
    }
    
}

/**
 * A ImportClauseNameNodeDO load import_clause_name_node from db
 */
schema ImportClauseNameNodeDO {
    @primary import_clause_id: int,
    name_node_id: int
}

/**
 * A ImportClauseNameNode
 */
schema ImportClauseNameNode {
    @primary import_clause_id: int,
    name_node_id: int
}
impl ImportClauseNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportClauseNameNode {
        for (importClauseNameNode in ImportClauseNameNodeDO(db)) {
            yield ImportClauseNameNode {
                import_clause_id: importClauseNameNode.import_clause_id,
                name_node_id : importClauseNameNode.name_node_id
            }
        }
    }
    
    /**
     * Gets the importClause.
     */
    pub fn getImportClause(self) -> ImportClause {
        for (importClause in ImportClause(__all_data__)) {
            if (self.import_clause_id = importClause.id) {
                return importClause
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.import_clause_id
    }
    
}

/**
 * A ImportClauseNamedBindingsDO load import_clause_named_bindings from db
 */
schema ImportClauseNamedBindingsDO {
    @primary import_clause_id: int,
    named_bindings_id: int
}

/**
 * A ImportClauseNamedBindings
 */
schema ImportClauseNamedBindings {
    @primary import_clause_id: int,
    named_bindings_id: int
}
impl ImportClauseNamedBindings {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportClauseNamedBindings {
        for (importClauseNamedBindings in ImportClauseNamedBindingsDO(db)) {
            yield ImportClauseNamedBindings {
                import_clause_id: importClauseNamedBindings.import_clause_id,
                named_bindings_id : importClauseNamedBindings.named_bindings_id
            }
        }
    }
    
    /**
     * Gets the importClause.
     */
    pub fn getImportClause(self) -> ImportClause {
        for (importClause in ImportClause(__all_data__)) {
            if (self.import_clause_id = importClause.id) {
                return importClause
            }
        }
    }
    
    /**
     * Gets the namedBindings.
     */
    pub fn getNamedBindings(self) -> NamedImportBindings {
        for (namedImportBindings in NamedImportBindings(__all_data__)) {
            if (self.named_bindings_id = namedImportBindings.id) {
                return namedImportBindings
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.import_clause_id
    }
    
}

/**
 * A AssertEntryDO load assert_entry from db
 */
schema AssertEntryDO {
    @primary id: int,
    parent_id: int,
    index: int,
    name_node_id: int,
    value_node_id: int
}

/**
 * A AssertEntry
 */
schema AssertEntry extends AstNode {
    name_node_id: int,
    value_node_id: int
}
impl AssertEntry {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AssertEntry {
        for (fa in AstNode(db)) {
            for (son in AssertEntryDO(db)) {
                if (son.key_eq(fa)) {
                    yield AssertEntry {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id,
                        value_node_id : son.value_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> AssertClause {
        for (assertClause in AssertClause(__all_data__)) {
            if (self.parent_id = assertClause.id) {
                return assertClause
            }
        }
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> AssertionKey {
        for (assertionKey in AssertionKey(__all_data__)) {
            if (self.name_node_id = assertionKey.id) {
                return assertionKey
            }
        }
    }
    
    /**
     * Gets the valueNode.
     */
    pub fn getValueNode(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.value_node_id = expression.id) {
                return expression
            }
        }
    }
    
}

/**
 * A AssertClauseDO load assert_clause from db
 */
schema AssertClauseDO {
    @primary id: int,
}

/**
 * A AssertClause
 */
schema AssertClause extends AstNode {
}
impl AssertClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AssertClause {
        for (fa in AstNode(db)) {
            for (son in AssertClauseDO(db)) {
                if (son.key_eq(fa)) {
                    yield AssertClause {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the elements.
     */
    pub fn getElements(self) -> *AssertEntry {
        for (assertEntry in AssertEntry(__all_data__)) {
            if (assertEntry.parent_id = self.id) {
                yield assertEntry
            }
        }
    }
    
}

/**
 * A ImportDeclarationDO load import_declaration from db
 */
schema ImportDeclarationDO {
    @primary id: int,
    module_specifier_id: int
}

/**
 * A ImportDeclaration
 */
schema ImportDeclaration extends DeclarationStatement {
    module_specifier_id: int
}
impl ImportDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportDeclaration {
        for (fa in DeclarationStatement(db)) {
            for (son in ImportDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield ImportDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        module_specifier_id : son.module_specifier_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the moduleSpecifier.
     */
    pub fn getModuleSpecifier(self) -> StringLiteral {
        for (stringLiteral in StringLiteral(__all_data__)) {
            if (self.module_specifier_id = stringLiteral.id) {
                return stringLiteral
            }
        }
    }
    
    /**
     * Get the assertClause.
     */
    pub fn getAssertClause(self) -> AssertClause {
        for (importDeclarationAssertClause in ImportDeclarationAssertClause(__all_data__)) {
            if (importDeclarationAssertClause.import_declaration_id = self.id) {
                return importDeclarationAssertClause.getAssertClause()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
    /**
     * Get the importClause.
     */
    pub fn getImportClause(self) -> ImportClause {
        for (importClause in ImportClause(__all_data__)) {
            if (importClause.parent_id = self.id) {
                return importClause
            }
        }
    }
    
}

/**
 * A ImportDeclarationAssertClauseDO load import_declaration_assert_clause from db
 */
schema ImportDeclarationAssertClauseDO {
    @primary import_declaration_id: int,
    assert_clause_id: int
}

/**
 * A ImportDeclarationAssertClause
 */
schema ImportDeclarationAssertClause {
    @primary import_declaration_id: int,
    assert_clause_id: int
}
impl ImportDeclarationAssertClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ImportDeclarationAssertClause {
        for (importDeclarationAssertClause in ImportDeclarationAssertClauseDO(db)) {
            yield ImportDeclarationAssertClause {
                import_declaration_id: importDeclarationAssertClause.import_declaration_id,
                assert_clause_id : importDeclarationAssertClause.assert_clause_id
            }
        }
    }
    
    /**
     * Gets the importDeclaration.
     */
    pub fn getImportDeclaration(self) -> ImportDeclaration {
        for (importDeclaration in ImportDeclaration(__all_data__)) {
            if (self.import_declaration_id = importDeclaration.id) {
                return importDeclaration
            }
        }
    }
    
    /**
     * Gets the assertClause.
     */
    pub fn getAssertClause(self) -> AssertClause {
        for (assertClause in AssertClause(__all_data__)) {
            if (self.assert_clause_id = assertClause.id) {
                return assertClause
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.import_declaration_id
    }
    
}

/**
 * A ExportAssignmentDO load export_assignment from db
 */
schema ExportAssignmentDO {
    @primary id: int,
    is_export_equals: int,
    expression_id: int
}

/**
 * A ExportAssignment
 */
schema ExportAssignment extends DeclarationStatement {
    is_export_equals: int,
    expression_id: int
}
impl ExportAssignment {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExportAssignment {
        for (fa in DeclarationStatement(db)) {
            for (son in ExportAssignmentDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExportAssignment {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        is_export_equals : son.is_export_equals,
                        expression_id : son.expression_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the xportEquals.
     */
    pub fn IsExportEquals(self) -> bool {
        return self.is_export_equals = 1
    }
    
    /**
     * Gets the expression.
     */
    pub fn getExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (self.expression_id = expression.id) {
                return expression
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A ExportSpecifierDO load export_specifier from db
 */
schema ExportSpecifierDO {
    @primary id: int,
    parent_id: int,
    index: int,
    is_type_only: int,
    name_node_id: int
}

/**
 * A ExportSpecifier
 */
schema ExportSpecifier extends Declaration {
    is_type_only: int,
    name_node_id: int
}
impl ExportSpecifier {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExportSpecifier {
        for (fa in Declaration(db)) {
            for (son in ExportSpecifierDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExportSpecifier {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        is_type_only : son.is_type_only,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the parent.
     */
    pub fn getParent(self) -> NamedExports {
        for (namedExports in NamedExports(__all_data__)) {
            if (self.parent_id = namedExports.id) {
                return namedExports
            }
        }
    }
    
    /**
     * Gets the ypeOnly.
     */
    pub fn IsTypeOnly(self) -> bool {
        return self.is_type_only = 1
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get the propertyNameNode.
     */
    pub fn getPropertyNameNode(self) -> Identifier {
        for (exportSpecifierPropertyNameNode in ExportSpecifierPropertyNameNode(__all_data__)) {
            if (exportSpecifierPropertyNameNode.export_specifier_id = self.id) {
                return exportSpecifierPropertyNameNode.getPropertyNameNode()
            }
        }
    }
    
}

/**
 * A ExportSpecifierPropertyNameNodeDO load export_specifier_property_name_node from db
 */
schema ExportSpecifierPropertyNameNodeDO {
    @primary export_specifier_id: int,
    property_name_node_id: int
}

/**
 * A ExportSpecifierPropertyNameNode
 */
schema ExportSpecifierPropertyNameNode {
    @primary export_specifier_id: int,
    property_name_node_id: int
}
impl ExportSpecifierPropertyNameNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExportSpecifierPropertyNameNode {
        for (exportSpecifierPropertyNameNode in ExportSpecifierPropertyNameNodeDO(db)) {
            yield ExportSpecifierPropertyNameNode {
                export_specifier_id: exportSpecifierPropertyNameNode.export_specifier_id,
                property_name_node_id : exportSpecifierPropertyNameNode.property_name_node_id
            }
        }
    }
    
    /**
     * Gets the exportSpecifier.
     */
    pub fn getExportSpecifier(self) -> ExportSpecifier {
        for (exportSpecifier in ExportSpecifier(__all_data__)) {
            if (self.export_specifier_id = exportSpecifier.id) {
                return exportSpecifier
            }
        }
    }
    
    /**
     * Gets the propertyNameNode.
     */
    pub fn getPropertyNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.property_name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.export_specifier_id
    }
    
}

/**
 * A NamedExportsDO load named_exports from db
 */
schema NamedExportsDO {
    @primary id: int,
}

/**
 * A NamedExports
 */
schema NamedExports extends AstNode {
}
impl NamedExports {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamedExports {
        for (fa in AstNode(db)) {
            for (son in NamedExportsDO(db)) {
                if (son.key_eq(fa)) {
                    yield NamedExports {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Get the elements.
     */
    pub fn getElements(self) -> *ExportSpecifier {
        for (exportSpecifier in ExportSpecifier(__all_data__)) {
            if (exportSpecifier.parent_id = self.id) {
                yield exportSpecifier
            }
        }
    }
    
}

/**
 * A NamespaceExportDO load namespace_export from db
 */
schema NamespaceExportDO {
    @primary id: int,
    name_node_id: int
}

/**
 * A NamespaceExport
 */
schema NamespaceExport extends Declaration {
    name_node_id: int
}
impl NamespaceExport {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamespaceExport {
        for (fa in Declaration(db)) {
            for (son in NamespaceExportDO(db)) {
                if (son.key_eq(fa)) {
                    yield NamespaceExport {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        name_node_id : son.name_node_id
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the nameNode.
     */
    pub fn getNameNode(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (self.name_node_id = identifier.id) {
                return identifier
            }
        }
    }
    
}

/**
 * A ExportDeclarationDO load export_declaration from db
 */
schema ExportDeclarationDO {
    @primary id: int,
    is_type_only: int
}

/**
 * A ExportDeclaration
 */
schema ExportDeclaration extends DeclarationStatement {
    is_type_only: int
}
impl ExportDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExportDeclaration {
        for (fa in DeclarationStatement(db)) {
            for (son in ExportDeclarationDO(db)) {
                if (son.key_eq(fa)) {
                    yield ExportDeclaration {
                        id : fa.id,
                        kind : fa.kind,
                        parent_id : fa.parent_id,
                        parent_kind : fa.parent_kind,
                        index : fa.index,
                        location_id : fa.location_id,
                        is_type_only : son.is_type_only
                    }
                }
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the ypeOnly.
     */
    pub fn IsTypeOnly(self) -> bool {
        return self.is_type_only = 1
    }
    
    /**
     * Get the exportClause.
     */
    pub fn getExportClause(self) -> NamedExportBindings {
        for (exportDeclarationExportClause in ExportDeclarationExportClause(__all_data__)) {
            if (exportDeclarationExportClause.export_declaration_id = self.id) {
                return exportDeclarationExportClause.getExportClause()
            }
        }
    }
    
    /**
     * Get the moduleSpecifier.
     */
    pub fn getModuleSpecifier(self) -> StringLiteral {
        for (exportDeclarationModuleSpecifier in ExportDeclarationModuleSpecifier(__all_data__)) {
            if (exportDeclarationModuleSpecifier.export_declaration_id = self.id) {
                return exportDeclarationModuleSpecifier.getModuleSpecifier()
            }
        }
    }
    
    /**
     * Get the assertClause.
     */
    pub fn getAssertClause(self) -> int {
        for (exportDeclarationAssertClause in ExportDeclarationAssertClause(__all_data__)) {
            if (exportDeclarationAssertClause.export_declaration_id = self.id) {
                return exportDeclarationAssertClause.getAssertClause()
            }
        }
    }
    
    /**
     * Get the modifiers.
     */
    pub fn getModifiers(self) -> *Modifier {
        for (modifier in Modifier(__all_data__)) {
            if (modifier.parent_id = self.id) {
                yield modifier
            }
        }
    }
    
}

/**
 * A ExportDeclarationExportClauseDO load export_declaration_export_clause from db
 */
schema ExportDeclarationExportClauseDO {
    @primary export_declaration_id: int,
    export_clause_id: int
}

/**
 * A ExportDeclarationExportClause
 */
schema ExportDeclarationExportClause {
    @primary export_declaration_id: int,
    export_clause_id: int
}
impl ExportDeclarationExportClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExportDeclarationExportClause {
        for (exportDeclarationExportClause in ExportDeclarationExportClauseDO(db)) {
            yield ExportDeclarationExportClause {
                export_declaration_id: exportDeclarationExportClause.export_declaration_id,
                export_clause_id : exportDeclarationExportClause.export_clause_id
            }
        }
    }
    
    /**
     * Gets the exportDeclaration.
     */
    pub fn getExportDeclaration(self) -> ExportDeclaration {
        for (exportDeclaration in ExportDeclaration(__all_data__)) {
            if (self.export_declaration_id = exportDeclaration.id) {
                return exportDeclaration
            }
        }
    }
    
    /**
     * Gets the exportClause.
     */
    pub fn getExportClause(self) -> NamedExportBindings {
        for (namedExportBindings in NamedExportBindings(__all_data__)) {
            if (self.export_clause_id = namedExportBindings.id) {
                return namedExportBindings
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.export_declaration_id
    }
    
}

/**
 * A ExportDeclarationModuleSpecifierDO load export_declaration_module_specifier from db
 */
schema ExportDeclarationModuleSpecifierDO {
    @primary export_declaration_id: int,
    module_specifier_id: int
}

/**
 * A ExportDeclarationModuleSpecifier
 */
schema ExportDeclarationModuleSpecifier {
    @primary export_declaration_id: int,
    module_specifier_id: int
}
impl ExportDeclarationModuleSpecifier {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExportDeclarationModuleSpecifier {
        for (exportDeclarationModuleSpecifier in ExportDeclarationModuleSpecifierDO(db)) {
            yield ExportDeclarationModuleSpecifier {
                export_declaration_id: exportDeclarationModuleSpecifier.export_declaration_id,
                module_specifier_id : exportDeclarationModuleSpecifier.module_specifier_id
            }
        }
    }
    
    /**
     * Gets the exportDeclaration.
     */
    pub fn getExportDeclaration(self) -> ExportDeclaration {
        for (exportDeclaration in ExportDeclaration(__all_data__)) {
            if (self.export_declaration_id = exportDeclaration.id) {
                return exportDeclaration
            }
        }
    }
    
    /**
     * Gets the moduleSpecifier.
     */
    pub fn getModuleSpecifier(self) -> StringLiteral {
        for (stringLiteral in StringLiteral(__all_data__)) {
            if (self.module_specifier_id = stringLiteral.id) {
                return stringLiteral
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.export_declaration_id
    }
    
}

/**
 * A ExportDeclarationAssertClauseDO load export_declaration_assert_clause from db
 */
schema ExportDeclarationAssertClauseDO {
    @primary export_declaration_id: int,
    assert_clause_id: int
}

/**
 * A ExportDeclarationAssertClause
 */
schema ExportDeclarationAssertClause {
    @primary export_declaration_id: int,
    assert_clause_id: int
}
impl ExportDeclarationAssertClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExportDeclarationAssertClause {
        for (exportDeclarationAssertClause in ExportDeclarationAssertClauseDO(db)) {
            yield ExportDeclarationAssertClause {
                export_declaration_id: exportDeclarationAssertClause.export_declaration_id,
                assert_clause_id : exportDeclarationAssertClause.assert_clause_id
            }
        }
    }
    
    /**
     * Gets the exportDeclaration.
     */
    pub fn getExportDeclaration(self) -> ExportDeclaration {
        for (exportDeclaration in ExportDeclaration(__all_data__)) {
            if (self.export_declaration_id = exportDeclaration.id) {
                return exportDeclaration
            }
        }
    }
    
    /**
     * Gets the assertClause.
     */
    pub fn getAssertClause(self) -> int {
        return self.assert_clause_id
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.export_declaration_id
    }
    
}

/**
 * A TopLevelDO load top_level from db
 */
schema TopLevelDO {
    @primary id: int,
    kind: int,
    location_id: int
}

/**
 * A TopLevel
 */
schema TopLevel {
    @primary id: int,
    kind: int,
    location_id: int
}
impl TopLevel {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TopLevel {
        for (topLevel in TopLevelDO(db)) {
            yield TopLevel {
                id: topLevel.id,
                kind : topLevel.kind,
                location_id : topLevel.location_id
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the kind.
     */
    pub fn getKind(self) -> int {
        return self.kind
    }
    
    /**
     * Gets the location.
     */
    pub fn getLocation(self) -> Location {
        for (location in Location(__all_data__)) {
            if (self.location_id = location.id) {
                return location
            }
        }
    }
    
    /**
     * Get the real kind name.
     */
    pub fn getKindName(self) -> string {
        return getRealKind(self.getKind())
    }
    
    /**
     * Get the statement.
     */
    pub fn getStatement(self) -> *Statement {
        for (topLevelStatement in TopLevelStatement(__all_data__)) {
            if (topLevelStatement.top_level_id = self.id) {
                yield topLevelStatement.getStatement()
            }
        }
    }
    
}

/**
 * A TopLevelStatementDO load top_level_statement from db
 */
schema TopLevelStatementDO {
    @primary statement_id: int,
    top_level_id: int,
    index: int
}

/**
 * A TopLevelStatement
 */
schema TopLevelStatement {
    @primary statement_id: int,
    top_level_id: int,
    index: int
}
impl TopLevelStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TopLevelStatement {
        for (topLevelStatement in TopLevelStatementDO(db)) {
            yield TopLevelStatement {
                statement_id: topLevelStatement.statement_id,
                top_level_id : topLevelStatement.top_level_id,
                index : topLevelStatement.index
            }
        }
    }
    
    /**
     * Gets the statement.
     */
    pub fn getStatement(self) -> Statement {
        for (statement in Statement(__all_data__)) {
            if (self.statement_id = statement.id) {
                return statement
            }
        }
    }
    
    /**
     * Gets the topLevel.
     */
    pub fn getTopLevel(self) -> TopLevel {
        for (topLevel in TopLevel(__all_data__)) {
            if (self.top_level_id = topLevel.id) {
                return topLevel
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.statement_id
    }
    
}

/**
 * A AstNodeContainerRelationDO load ast_node_container_relation from db
 */
schema AstNodeContainerRelationDO {
    @primary ast_node_id: int,
    container_id: int
}

/**
 * A AstNodeContainerRelation
 */
schema AstNodeContainerRelation {
    @primary ast_node_id: int,
    container_id: int
}
impl AstNodeContainerRelation {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AstNodeContainerRelation {
        for (astNodeContainerRelation in AstNodeContainerRelationDO(db)) {
            yield AstNodeContainerRelation {
                ast_node_id: astNodeContainerRelation.ast_node_id,
                container_id : astNodeContainerRelation.container_id
            }
        }
    }
    
    /**
     * Gets the astNode.
     */
    pub fn getAstNode(self) -> AstNode {
        for (astNode in AstNode(__all_data__)) {
            if (self.ast_node_id = astNode.id) {
                return astNode
            }
        }
    }
    
    /**
     * Gets the container.
     */
    pub fn getContainer(self) -> AstNodeContainer {
        for (astNodeContainer in AstNodeContainer(__all_data__)) {
            if (self.container_id = astNodeContainer.id) {
                return astNodeContainer
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.ast_node_id
    }
    
}

/**
 * A CfgEntryNodeDO load cfg_entry_node from db
 */
schema CfgEntryNodeDO {
    @primary id: int,
    ast_node_id: int
}

/**
 * A CfgEntryNode
 */
schema CfgEntryNode {
    @primary id: int,
    ast_node_id: int
}
impl CfgEntryNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CfgEntryNode {
        for (cfgEntryNode in CfgEntryNodeDO(db)) {
            yield CfgEntryNode {
                id: cfgEntryNode.id,
                ast_node_id : cfgEntryNode.ast_node_id
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the astNode.
     */
    pub fn getAstNode(self) -> AstNodeContainer {
        for (astNodeContainer in AstNodeContainer(__all_data__)) {
            if (self.ast_node_id = astNodeContainer.id) {
                return astNodeContainer
            }
        }
    }
    
}

/**
 * A CfgExitNodeDO load cfg_exit_node from db
 */
schema CfgExitNodeDO {
    @primary id: int,
    ast_node_id: int
}

/**
 * A CfgExitNode
 */
schema CfgExitNode {
    @primary id: int,
    ast_node_id: int
}
impl CfgExitNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CfgExitNode {
        for (cfgExitNode in CfgExitNodeDO(db)) {
            yield CfgExitNode {
                id: cfgExitNode.id,
                ast_node_id : cfgExitNode.ast_node_id
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the astNode.
     */
    pub fn getAstNode(self) -> AstNodeContainer {
        for (astNodeContainer in AstNodeContainer(__all_data__)) {
            if (self.ast_node_id = astNodeContainer.id) {
                return astNodeContainer
            }
        }
    }
    
}

/**
 * A SymbolDO load symbol_ from db
 */
schema SymbolDO {
    @primary id: int,
    name: string,
    description: string
}

/**
 * A Symbol
 */
schema Symbol {
    @primary id: int,
    name: string,
    description: string
}
impl Symbol {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Symbol {
        for (symbol in SymbolDO(db)) {
            yield Symbol {
                id: symbol.id,
                name : symbol.name,
                description : symbol.description
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the name.
     */
    pub fn getName(self) -> string {
        return self.name
    }
    
    /**
     * Gets the description.
     */
    pub fn getDescription(self) -> string {
        return self.description
    }
    
}

/**
 * A AstNodeSymbolDO load ast_node_symbol from db
 */
schema AstNodeSymbolDO {
    @primary ast_node_id: int,
    symbol_id: int
}

/**
 * A AstNodeSymbol
 */
schema AstNodeSymbol {
    @primary ast_node_id: int,
    symbol_id: int
}
impl AstNodeSymbol {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AstNodeSymbol {
        for (astNodeSymbol in AstNodeSymbolDO(db)) {
            yield AstNodeSymbol {
                ast_node_id: astNodeSymbol.ast_node_id,
                symbol_id : astNodeSymbol.symbol_id
            }
        }
    }
    
    /**
     * Gets the astNode.
     */
    pub fn getAstNode(self) -> AstNode {
        for (astNode in AstNode(__all_data__)) {
            if (self.ast_node_id = astNode.id) {
                return astNode
            }
        }
    }
    
    /**
     * Gets the symbol.
     */
    pub fn getSymbol(self) -> Symbol {
        for (symbol in Symbol(__all_data__)) {
            if (self.symbol_id = symbol.id) {
                return symbol
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.ast_node_id
    }
    
}

/**
 * A ShorthandPropertyAssignmentValueSymbolDO load shorthand_property_assignment_value_symbol from db
 */
schema ShorthandPropertyAssignmentValueSymbolDO {
    @primary shorthand_property_assignment_id: int,
    symbol_id: int
}

/**
 * A ShorthandPropertyAssignmentValueSymbol
 */
schema ShorthandPropertyAssignmentValueSymbol {
    @primary shorthand_property_assignment_id: int,
    symbol_id: int
}
impl ShorthandPropertyAssignmentValueSymbol {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ShorthandPropertyAssignmentValueSymbol {
        for (shorthandPropertyAssignmentValueSymbol in ShorthandPropertyAssignmentValueSymbolDO(db)) {
            yield ShorthandPropertyAssignmentValueSymbol {
                shorthand_property_assignment_id: shorthandPropertyAssignmentValueSymbol.shorthand_property_assignment_id,
                symbol_id : shorthandPropertyAssignmentValueSymbol.symbol_id
            }
        }
    }
    
    /**
     * Gets the shorthandPropertyAssignment.
     */
    pub fn getShorthandPropertyAssignment(self) -> ShorthandPropertyAssignment {
        for (shorthandPropertyAssignment in ShorthandPropertyAssignment(__all_data__)) {
            if (self.shorthand_property_assignment_id = shorthandPropertyAssignment.id) {
                return shorthandPropertyAssignment
            }
        }
    }
    
    /**
     * Gets the symbol.
     */
    pub fn getSymbol(self) -> Symbol {
        for (symbol in Symbol(__all_data__)) {
            if (self.symbol_id = symbol.id) {
                return symbol
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.shorthand_property_assignment_id
    }
    
}

/**
 * A TypeDO load type_ from db
 */
schema TypeDO {
    @primary id: int,
    name: string
}

/**
 * A Type
 */
schema Type {
    @primary id: int,
    name: string
}
impl Type {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Type {
        for (type in TypeDO(db)) {
            yield Type {
                id: type.id,
                name : type.name
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the name.
     */
    pub fn getName(self) -> string {
        return self.name
    }
    
}

/**
 * A AstNodeTypeDO load ast_node_type from db
 */
schema AstNodeTypeDO {
    @primary ast_node_id: int,
    type_id: int
}

/**
 * A AstNodeType
 */
schema AstNodeType {
    @primary ast_node_id: int,
    type_id: int
}
impl AstNodeType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AstNodeType {
        for (astNodeType in AstNodeTypeDO(db)) {
            yield AstNodeType {
                ast_node_id: astNodeType.ast_node_id,
                type_id : astNodeType.type_id
            }
        }
    }
    
    /**
     * Gets the astNode.
     */
    pub fn getAstNode(self) -> AstNode {
        for (astNode in AstNode(__all_data__)) {
            if (self.ast_node_id = astNode.id) {
                return astNode
            }
        }
    }
    
    /**
     * Gets the type.
     */
    pub fn getType(self) -> Type {
        for (type in Type(__all_data__)) {
            if (self.type_id = type.id) {
                return type
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.ast_node_id
    }
    
}

/**
 * A CallSiteDeclarationDO load call_site_declaration from db
 */
schema CallSiteDeclarationDO {
    @primary id: int,
    call_site_id: int
}

/**
 * A CallSiteDeclaration
 */
schema CallSiteDeclaration {
    @primary id: int,
    call_site_id: int
}
impl CallSiteDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CallSiteDeclaration {
        for (callSiteDeclaration in CallSiteDeclarationDO(db)) {
            yield CallSiteDeclaration {
                id: callSiteDeclaration.id,
                call_site_id : callSiteDeclaration.call_site_id
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the callSite.
     */
    pub fn getCallSite(self) -> MayInvokeExpression {
        for (mayInvokeExpression in MayInvokeExpression(__all_data__)) {
            if (self.call_site_id = mayInvokeExpression.id) {
                return mayInvokeExpression
            }
        }
    }
    
}

/**
 * A CallSiteImplementationDO load call_site_implementation from db
 */
schema CallSiteImplementationDO {
    @primary id: int,
    call_site_id: int,
    implementation_id: int
}

/**
 * A CallSiteImplementation
 */
schema CallSiteImplementation {
    @primary id: int,
    call_site_id: int,
    implementation_id: int
}
impl CallSiteImplementation {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CallSiteImplementation {
        for (callSiteImplementation in CallSiteImplementationDO(db)) {
            yield CallSiteImplementation {
                id: callSiteImplementation.id,
                call_site_id : callSiteImplementation.call_site_id,
                implementation_id : callSiteImplementation.implementation_id
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the callSite.
     */
    pub fn getCallSite(self) -> MayInvokeExpression {
        for (mayInvokeExpression in MayInvokeExpression(__all_data__)) {
            if (self.call_site_id = mayInvokeExpression.id) {
                return mayInvokeExpression
            }
        }
    }
    
    /**
     * Gets the implementation.
     */
    pub fn getImplementation(self) -> SignatureDeclaration {
        for (signatureDeclaration in SignatureDeclaration(__all_data__)) {
            if (self.implementation_id = signatureDeclaration.id) {
                return signatureDeclaration
            }
        }
    }
    
}

/**
 * A CommentDO load comment from db
 */
schema CommentDO {
    @primary id: int,
    kind: int,
    location_id: int
}

/**
 * A Comment
 */
schema Comment {
    @primary id: int,
    kind: int,
    location_id: int
}
impl Comment {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Comment {
        for (comment in CommentDO(db)) {
            yield Comment {
                id: comment.id,
                kind : comment.kind,
                location_id : comment.location_id
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the kind.
     */
    pub fn getKind(self) -> int {
        return self.kind
    }
    
    /**
     * Gets the location.
     */
    pub fn getLocation(self) -> Location {
        for (location in Location(__all_data__)) {
            if (self.location_id = location.id) {
                return location
            }
        }
    }
    
    /**
     * Get the real kind name.
     */
    pub fn getKindName(self) -> string {
        return getRealKind(self.getKind())
    }
    
}

/**
 * A AstNodeCommentDO load ast_node_comment from db
 */
schema AstNodeCommentDO {
    @primary id: int,
    kind: int,
    ast_node_id: int,
    comment_id: int,
    index: int
}

/**
 * A AstNodeComment
 */
schema AstNodeComment {
    @primary id: int,
    kind: int,
    ast_node_id: int,
    comment_id: int,
    index: int
}
impl AstNodeComment {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AstNodeComment {
        for (astNodeComment in AstNodeCommentDO(db)) {
            yield AstNodeComment {
                id: astNodeComment.id,
                kind : astNodeComment.kind,
                ast_node_id : astNodeComment.ast_node_id,
                comment_id : astNodeComment.comment_id,
                index : astNodeComment.index
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the kind.
     */
    pub fn getKind(self) -> int {
        return self.kind
    }
    
    /**
     * Gets the astNode.
     */
    pub fn getAstNode(self) -> AstNode {
        for (astNode in AstNode(__all_data__)) {
            if (self.ast_node_id = astNode.id) {
                return astNode
            }
        }
    }
    
    /**
     * Gets the comment.
     */
    pub fn getComment(self) -> Comment {
        for (comment in Comment(__all_data__)) {
            if (self.comment_id = comment.id) {
                return comment
            }
        }
    }
    
    /**
     * Gets the index.
     */
    pub fn getIndex(self) -> int {
        return self.index
    }
    
    /**
     * Get the real kind name.
     */
    pub fn getKindName(self) -> string {
        return getRealKind(self.getKind())
    }
    
}

/**
 * A MetadataDO load metadata from db
 */
schema MetadataDO {
    @primary id: int,
    version: string,
    created_time: string
}

/**
 * A Metadata
 */
schema Metadata {
    @primary id: int,
    version: string,
    created_time: string
}
impl Metadata {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Metadata {
        for (metadata in MetadataDO(db)) {
            yield Metadata {
                id: metadata.id,
                version : metadata.version,
                created_time : metadata.created_time
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the version.
     */
    pub fn getVersion(self) -> string {
        return self.version
    }
    
    /**
     * Gets the createdTime.
     */
    pub fn getCreatedTime(self) -> string {
        return self.created_time
    }
    
}

/**
 * A IgnoredPathDO load ignored_path from db
 */
schema IgnoredPathDO {
    @primary id: int,
    path_kind: int,
    path: string,
    ignore_kind: int
}

/**
 * A IgnoredPath
 */
schema IgnoredPath {
    @primary id: int,
    path_kind: int,
    path: string,
    ignore_kind: int
}
impl IgnoredPath {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IgnoredPath {
        for (ignoredPath in IgnoredPathDO(db)) {
            yield IgnoredPath {
                id: ignoredPath.id,
                path_kind : ignoredPath.path_kind,
                path : ignoredPath.path,
                ignore_kind : ignoredPath.ignore_kind
            }
        }
    }
    
    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * Gets the pathKind.
     */
    pub fn getPathKind(self) -> int {
        return self.path_kind
    }
    
    /**
     * Gets the path.
     */
    pub fn getPath(self) -> string {
        return self.path
    }
    
    /**
     * Gets the ignoreKind.
     */
    pub fn getIgnoreKind(self) -> int {
        return self.ignore_kind
    }
    
}

/**
 * This type consists of the following types: [RootDirectory, NonRootDirectory]
 */
schema Directory {
    @primary id: int
}

impl Directory {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *Directory {
        for (rootDirectory in RootDirectory(db)) {
            yield Directory {
                id : rootDirectory.id
            }
        }
        for (nonRootDirectory in NonRootDirectory(db)) {
            yield Directory {
                id : nonRootDirectory.id
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }

    /**
     * trans to AstNode
     */
    pub fn toAstNode(self) -> AstNode {
        for (astNode in AstNode(__all_data__)) {
            if (self.key_eq(astNode)) {
                return astNode
            }
        }
    }
    /**
     * trans to RootDirectory
     */
    pub fn toRootDirectory(self) -> RootDirectory {
        for (rootDirectory in RootDirectory(__all_data__)) {
            if (rootDirectory.key_eq(self)) {
                return rootDirectory
            }
        }
    }
    /**
     * trans to NonRootDirectory
     */
    pub fn toNonRootDirectory(self) -> NonRootDirectory {
        for (nonRootDirectory in NonRootDirectory(__all_data__)) {
            if (nonRootDirectory.key_eq(self)) {
                return nonRootDirectory
            }
        }
    }
}

/**
 * This type consists of the following types: [File, NonRootDirectory]
 */
schema FileOrNonRootDirectory {
    @primary id: int
}

impl FileOrNonRootDirectory {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *FileOrNonRootDirectory {
        for (file in File(db)) {
            yield FileOrNonRootDirectory {
                id : file.id
            }
        }
        for (nonRootDirectory in NonRootDirectory(db)) {
            yield FileOrNonRootDirectory {
                id : nonRootDirectory.id
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }

    /**
     * trans to AstNode
     */
    pub fn toAstNode(self) -> AstNode {
        for (astNode in AstNode(__all_data__)) {
            if (self.key_eq(astNode)) {
                return astNode
            }
        }
    }
    /**
     * trans to File
     */
    pub fn toFile(self) -> File {
        for (file in File(__all_data__)) {
            if (file.key_eq(self)) {
                return file
            }
        }
    }
    /**
     * trans to NonRootDirectory
     */
    pub fn toNonRootDirectory(self) -> NonRootDirectory {
        for (nonRootDirectory in NonRootDirectory(__all_data__)) {
            if (nonRootDirectory.key_eq(self)) {
                return nonRootDirectory
            }
        }
    }
}

/**
 * This type consists of the following types: [StringLiteral, NoSubstitutionTemplateLiteral]
 */
schema StringLiteralLike extends AstNode {
}

impl StringLiteralLike {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *StringLiteralLike {
        for (stringLiteral in StringLiteral(db)) {
            yield StringLiteralLike {
                id : stringLiteral.id,
                kind : stringLiteral.kind,
                parent_id : stringLiteral.parent_id,
                parent_kind : stringLiteral.parent_kind,
                index : stringLiteral.index,
                location_id : stringLiteral.location_id,
            }
        }
        for (noSubstitutionTemplateLiteral in NoSubstitutionTemplateLiteral(db)) {
            yield StringLiteralLike {
                id : noSubstitutionTemplateLiteral.id,
                kind : noSubstitutionTemplateLiteral.kind,
                parent_id : noSubstitutionTemplateLiteral.parent_id,
                parent_kind : noSubstitutionTemplateLiteral.parent_kind,
                index : noSubstitutionTemplateLiteral.index,
                location_id : noSubstitutionTemplateLiteral.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to StringLiteral
     */
    pub fn toStringLiteral(self) -> StringLiteral {
        for (stringLiteral in StringLiteral(__all_data__)) {
            if (stringLiteral.key_eq(self)) {
                return stringLiteral
            }
        }
    }
    
    /**
     * trans to NoSubstitutionTemplateLiteral
     */
    pub fn toNoSubstitutionTemplateLiteral(self) -> NoSubstitutionTemplateLiteral {
        for (noSubstitutionTemplateLiteral in NoSubstitutionTemplateLiteral(__all_data__)) {
            if (noSubstitutionTemplateLiteral.key_eq(self)) {
                return noSubstitutionTemplateLiteral
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Identifier, PrivateIdentifier, NumericLiteral, ComputedPropertyName, ElementAccessExpression, PropertyAccessExpression, StringLiteral, NoSubstitutionTemplateLiteral, ObjectBindingPattern, ArrayBindingPattern]
 */
schema DeclarationName extends AstNode {
}

impl DeclarationName {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DeclarationName {
        for (identifier in Identifier(db)) {
            yield DeclarationName {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (privateIdentifier in PrivateIdentifier(db)) {
            yield DeclarationName {
                id : privateIdentifier.id,
                kind : privateIdentifier.kind,
                parent_id : privateIdentifier.parent_id,
                parent_kind : privateIdentifier.parent_kind,
                index : privateIdentifier.index,
                location_id : privateIdentifier.location_id,
            }
        }
        for (numericLiteral in NumericLiteral(db)) {
            yield DeclarationName {
                id : numericLiteral.id,
                kind : numericLiteral.kind,
                parent_id : numericLiteral.parent_id,
                parent_kind : numericLiteral.parent_kind,
                index : numericLiteral.index,
                location_id : numericLiteral.location_id,
            }
        }
        for (computedPropertyName in ComputedPropertyName(db)) {
            yield DeclarationName {
                id : computedPropertyName.id,
                kind : computedPropertyName.kind,
                parent_id : computedPropertyName.parent_id,
                parent_kind : computedPropertyName.parent_kind,
                index : computedPropertyName.index,
                location_id : computedPropertyName.location_id,
            }
        }
        for (elementAccessExpression in ElementAccessExpression(db)) {
            yield DeclarationName {
                id : elementAccessExpression.id,
                kind : elementAccessExpression.kind,
                parent_id : elementAccessExpression.parent_id,
                parent_kind : elementAccessExpression.parent_kind,
                index : elementAccessExpression.index,
                location_id : elementAccessExpression.location_id,
            }
        }
        for (propertyAccessExpression in PropertyAccessExpression(db)) {
            yield DeclarationName {
                id : propertyAccessExpression.id,
                kind : propertyAccessExpression.kind,
                parent_id : propertyAccessExpression.parent_id,
                parent_kind : propertyAccessExpression.parent_kind,
                index : propertyAccessExpression.index,
                location_id : propertyAccessExpression.location_id,
            }
        }
        for (stringLiteral in StringLiteral(db)) {
            yield DeclarationName {
                id : stringLiteral.id,
                kind : stringLiteral.kind,
                parent_id : stringLiteral.parent_id,
                parent_kind : stringLiteral.parent_kind,
                index : stringLiteral.index,
                location_id : stringLiteral.location_id,
            }
        }
        for (noSubstitutionTemplateLiteral in NoSubstitutionTemplateLiteral(db)) {
            yield DeclarationName {
                id : noSubstitutionTemplateLiteral.id,
                kind : noSubstitutionTemplateLiteral.kind,
                parent_id : noSubstitutionTemplateLiteral.parent_id,
                parent_kind : noSubstitutionTemplateLiteral.parent_kind,
                index : noSubstitutionTemplateLiteral.index,
                location_id : noSubstitutionTemplateLiteral.location_id,
            }
        }
        for (objectBindingPattern in ObjectBindingPattern(db)) {
            yield DeclarationName {
                id : objectBindingPattern.id,
                kind : objectBindingPattern.kind,
                parent_id : objectBindingPattern.parent_id,
                parent_kind : objectBindingPattern.parent_kind,
                index : objectBindingPattern.index,
                location_id : objectBindingPattern.location_id,
            }
        }
        for (arrayBindingPattern in ArrayBindingPattern(db)) {
            yield DeclarationName {
                id : arrayBindingPattern.id,
                kind : arrayBindingPattern.kind,
                parent_id : arrayBindingPattern.parent_id,
                parent_kind : arrayBindingPattern.parent_kind,
                index : arrayBindingPattern.index,
                location_id : arrayBindingPattern.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to PrivateIdentifier
     */
    pub fn toPrivateIdentifier(self) -> PrivateIdentifier {
        for (privateIdentifier in PrivateIdentifier(__all_data__)) {
            if (privateIdentifier.key_eq(self)) {
                return privateIdentifier
            }
        }
    }
    
    /**
     * trans to NumericLiteral
     */
    pub fn toNumericLiteral(self) -> NumericLiteral {
        for (numericLiteral in NumericLiteral(__all_data__)) {
            if (numericLiteral.key_eq(self)) {
                return numericLiteral
            }
        }
    }
    
    /**
     * trans to ComputedPropertyName
     */
    pub fn toComputedPropertyName(self) -> ComputedPropertyName {
        for (computedPropertyName in ComputedPropertyName(__all_data__)) {
            if (computedPropertyName.key_eq(self)) {
                return computedPropertyName
            }
        }
    }
    
    /**
     * trans to ElementAccessExpression
     */
    pub fn toElementAccessExpression(self) -> ElementAccessExpression {
        for (elementAccessExpression in ElementAccessExpression(__all_data__)) {
            if (elementAccessExpression.key_eq(self)) {
                return elementAccessExpression
            }
        }
    }
    
    /**
     * trans to PropertyAccessExpression
     */
    pub fn toPropertyAccessExpression(self) -> PropertyAccessExpression {
        for (propertyAccessExpression in PropertyAccessExpression(__all_data__)) {
            if (propertyAccessExpression.key_eq(self)) {
                return propertyAccessExpression
            }
        }
    }
    
    /**
     * trans to StringLiteral
     */
    pub fn toStringLiteral(self) -> StringLiteral {
        for (stringLiteral in StringLiteral(__all_data__)) {
            if (stringLiteral.key_eq(self)) {
                return stringLiteral
            }
        }
    }
    
    /**
     * trans to NoSubstitutionTemplateLiteral
     */
    pub fn toNoSubstitutionTemplateLiteral(self) -> NoSubstitutionTemplateLiteral {
        for (noSubstitutionTemplateLiteral in NoSubstitutionTemplateLiteral(__all_data__)) {
            if (noSubstitutionTemplateLiteral.key_eq(self)) {
                return noSubstitutionTemplateLiteral
            }
        }
    }
    
    /**
     * trans to ObjectBindingPattern
     */
    pub fn toObjectBindingPattern(self) -> ObjectBindingPattern {
        for (objectBindingPattern in ObjectBindingPattern(__all_data__)) {
            if (objectBindingPattern.key_eq(self)) {
                return objectBindingPattern
            }
        }
    }
    
    /**
     * trans to ArrayBindingPattern
     */
    pub fn toArrayBindingPattern(self) -> ArrayBindingPattern {
        for (arrayBindingPattern in ArrayBindingPattern(__all_data__)) {
            if (arrayBindingPattern.key_eq(self)) {
                return arrayBindingPattern
            }
        }
    }
    
}

/**
 * This type consists of the following types: [TrueLiteral, FalseLiteral]
 */
schema BooleanLiteral extends AstNode {
}

impl BooleanLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BooleanLiteral {
        for (trueLiteral in TrueLiteral(db)) {
            yield BooleanLiteral {
                id : trueLiteral.id,
                kind : trueLiteral.kind,
                parent_id : trueLiteral.parent_id,
                parent_kind : trueLiteral.parent_kind,
                index : trueLiteral.index,
                location_id : trueLiteral.location_id,
            }
        }
        for (falseLiteral in FalseLiteral(db)) {
            yield BooleanLiteral {
                id : falseLiteral.id,
                kind : falseLiteral.kind,
                parent_id : falseLiteral.parent_id,
                parent_kind : falseLiteral.parent_kind,
                index : falseLiteral.index,
                location_id : falseLiteral.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to TrueLiteral
     */
    pub fn toTrueLiteral(self) -> TrueLiteral {
        for (trueLiteral in TrueLiteral(__all_data__)) {
            if (trueLiteral.key_eq(self)) {
                return trueLiteral
            }
        }
    }
    
    /**
     * trans to FalseLiteral
     */
    pub fn toFalseLiteral(self) -> FalseLiteral {
        for (falseLiteral in FalseLiteral(__all_data__)) {
            if (falseLiteral.key_eq(self)) {
                return falseLiteral
            }
        }
    }
    
}

/**
 * This type consists of the following types: [TemplateMiddle, TemplateTail]
 */
schema TemplateMiddleOrTail extends AstNode {
}

impl TemplateMiddleOrTail {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateMiddleOrTail {
        for (templateMiddle in TemplateMiddle(db)) {
            yield TemplateMiddleOrTail {
                id : templateMiddle.id,
                kind : templateMiddle.kind,
                parent_id : templateMiddle.parent_id,
                parent_kind : templateMiddle.parent_kind,
                index : templateMiddle.index,
                location_id : templateMiddle.location_id,
            }
        }
        for (templateTail in TemplateTail(db)) {
            yield TemplateMiddleOrTail {
                id : templateTail.id,
                kind : templateTail.kind,
                parent_id : templateTail.parent_id,
                parent_kind : templateTail.parent_kind,
                index : templateTail.index,
                location_id : templateTail.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to TemplateMiddle
     */
    pub fn toTemplateMiddle(self) -> TemplateMiddle {
        for (templateMiddle in TemplateMiddle(__all_data__)) {
            if (templateMiddle.key_eq(self)) {
                return templateMiddle
            }
        }
    }
    
    /**
     * trans to TemplateTail
     */
    pub fn toTemplateTail(self) -> TemplateTail {
        for (templateTail in TemplateTail(__all_data__)) {
            if (templateTail.key_eq(self)) {
                return templateTail
            }
        }
    }
    
}

/**
 * This type consists of the following types: [TypeParameter, Parameter, ConstructorType, PropertySignature, PropertyDeclaration, MethodSignature, MethodDeclaration, Constructor, GetAccessor, SetAccessor, IndexSignature, FunctionExpression, ArrowFunction, ClassExpression, VariableStatement, FunctionDeclaration, ClassDeclaration, StructDeclaration, InterfaceDeclaration, TypeAliasDeclaration, EnumDeclaration, ModuleDeclaration, ImportEqualsDeclaration, ImportDeclaration, ExportAssignment, ExportDeclaration]
 */
schema HasModifiersNode extends AstNode {
}

impl HasModifiersNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *HasModifiersNode {
        for (typeParameter in TypeParameter(db)) {
            yield HasModifiersNode {
                id : typeParameter.id,
                kind : typeParameter.kind,
                parent_id : typeParameter.parent_id,
                parent_kind : typeParameter.parent_kind,
                index : typeParameter.index,
                location_id : typeParameter.location_id,
            }
        }
        for (parameter in Parameter(db)) {
            yield HasModifiersNode {
                id : parameter.id,
                kind : parameter.kind,
                parent_id : parameter.parent_id,
                parent_kind : parameter.parent_kind,
                index : parameter.index,
                location_id : parameter.location_id,
            }
        }
        for (constructorType in ConstructorType(db)) {
            yield HasModifiersNode {
                id : constructorType.id,
                kind : constructorType.kind,
                parent_id : constructorType.parent_id,
                parent_kind : constructorType.parent_kind,
                index : constructorType.index,
                location_id : constructorType.location_id,
            }
        }
        for (propertySignature in PropertySignature(db)) {
            yield HasModifiersNode {
                id : propertySignature.id,
                kind : propertySignature.kind,
                parent_id : propertySignature.parent_id,
                parent_kind : propertySignature.parent_kind,
                index : propertySignature.index,
                location_id : propertySignature.location_id,
            }
        }
        for (propertyDeclaration in PropertyDeclaration(db)) {
            yield HasModifiersNode {
                id : propertyDeclaration.id,
                kind : propertyDeclaration.kind,
                parent_id : propertyDeclaration.parent_id,
                parent_kind : propertyDeclaration.parent_kind,
                index : propertyDeclaration.index,
                location_id : propertyDeclaration.location_id,
            }
        }
        for (methodSignature in MethodSignature(db)) {
            yield HasModifiersNode {
                id : methodSignature.id,
                kind : methodSignature.kind,
                parent_id : methodSignature.parent_id,
                parent_kind : methodSignature.parent_kind,
                index : methodSignature.index,
                location_id : methodSignature.location_id,
            }
        }
        for (methodDeclaration in MethodDeclaration(db)) {
            yield HasModifiersNode {
                id : methodDeclaration.id,
                kind : methodDeclaration.kind,
                parent_id : methodDeclaration.parent_id,
                parent_kind : methodDeclaration.parent_kind,
                index : methodDeclaration.index,
                location_id : methodDeclaration.location_id,
            }
        }
        for (constructor in Constructor(db)) {
            yield HasModifiersNode {
                id : constructor.id,
                kind : constructor.kind,
                parent_id : constructor.parent_id,
                parent_kind : constructor.parent_kind,
                index : constructor.index,
                location_id : constructor.location_id,
            }
        }
        for (getAccessor in GetAccessor(db)) {
            yield HasModifiersNode {
                id : getAccessor.id,
                kind : getAccessor.kind,
                parent_id : getAccessor.parent_id,
                parent_kind : getAccessor.parent_kind,
                index : getAccessor.index,
                location_id : getAccessor.location_id,
            }
        }
        for (setAccessor in SetAccessor(db)) {
            yield HasModifiersNode {
                id : setAccessor.id,
                kind : setAccessor.kind,
                parent_id : setAccessor.parent_id,
                parent_kind : setAccessor.parent_kind,
                index : setAccessor.index,
                location_id : setAccessor.location_id,
            }
        }
        for (indexSignature in IndexSignature(db)) {
            yield HasModifiersNode {
                id : indexSignature.id,
                kind : indexSignature.kind,
                parent_id : indexSignature.parent_id,
                parent_kind : indexSignature.parent_kind,
                index : indexSignature.index,
                location_id : indexSignature.location_id,
            }
        }
        for (functionExpression in FunctionExpression(db)) {
            yield HasModifiersNode {
                id : functionExpression.id,
                kind : functionExpression.kind,
                parent_id : functionExpression.parent_id,
                parent_kind : functionExpression.parent_kind,
                index : functionExpression.index,
                location_id : functionExpression.location_id,
            }
        }
        for (arrowFunction in ArrowFunction(db)) {
            yield HasModifiersNode {
                id : arrowFunction.id,
                kind : arrowFunction.kind,
                parent_id : arrowFunction.parent_id,
                parent_kind : arrowFunction.parent_kind,
                index : arrowFunction.index,
                location_id : arrowFunction.location_id,
            }
        }
        for (classExpression in ClassExpression(db)) {
            yield HasModifiersNode {
                id : classExpression.id,
                kind : classExpression.kind,
                parent_id : classExpression.parent_id,
                parent_kind : classExpression.parent_kind,
                index : classExpression.index,
                location_id : classExpression.location_id,
            }
        }
        for (variableStatement in VariableStatement(db)) {
            yield HasModifiersNode {
                id : variableStatement.id,
                kind : variableStatement.kind,
                parent_id : variableStatement.parent_id,
                parent_kind : variableStatement.parent_kind,
                index : variableStatement.index,
                location_id : variableStatement.location_id,
            }
        }
        for (functionDeclaration in FunctionDeclaration(db)) {
            yield HasModifiersNode {
                id : functionDeclaration.id,
                kind : functionDeclaration.kind,
                parent_id : functionDeclaration.parent_id,
                parent_kind : functionDeclaration.parent_kind,
                index : functionDeclaration.index,
                location_id : functionDeclaration.location_id,
            }
        }
        for (classDeclaration in ClassDeclaration(db)) {
            yield HasModifiersNode {
                id : classDeclaration.id,
                kind : classDeclaration.kind,
                parent_id : classDeclaration.parent_id,
                parent_kind : classDeclaration.parent_kind,
                index : classDeclaration.index,
                location_id : classDeclaration.location_id,
            }
        }
        for (structDeclaration in StructDeclaration(db)) {
            yield HasModifiersNode {
                id : structDeclaration.id,
                kind : structDeclaration.kind,
                parent_id : structDeclaration.parent_id,
                parent_kind : structDeclaration.parent_kind,
                index : structDeclaration.index,
                location_id : structDeclaration.location_id,
            }
        }
        for (interfaceDeclaration in InterfaceDeclaration(db)) {
            yield HasModifiersNode {
                id : interfaceDeclaration.id,
                kind : interfaceDeclaration.kind,
                parent_id : interfaceDeclaration.parent_id,
                parent_kind : interfaceDeclaration.parent_kind,
                index : interfaceDeclaration.index,
                location_id : interfaceDeclaration.location_id,
            }
        }
        for (typeAliasDeclaration in TypeAliasDeclaration(db)) {
            yield HasModifiersNode {
                id : typeAliasDeclaration.id,
                kind : typeAliasDeclaration.kind,
                parent_id : typeAliasDeclaration.parent_id,
                parent_kind : typeAliasDeclaration.parent_kind,
                index : typeAliasDeclaration.index,
                location_id : typeAliasDeclaration.location_id,
            }
        }
        for (enumDeclaration in EnumDeclaration(db)) {
            yield HasModifiersNode {
                id : enumDeclaration.id,
                kind : enumDeclaration.kind,
                parent_id : enumDeclaration.parent_id,
                parent_kind : enumDeclaration.parent_kind,
                index : enumDeclaration.index,
                location_id : enumDeclaration.location_id,
            }
        }
        for (moduleDeclaration in ModuleDeclaration(db)) {
            yield HasModifiersNode {
                id : moduleDeclaration.id,
                kind : moduleDeclaration.kind,
                parent_id : moduleDeclaration.parent_id,
                parent_kind : moduleDeclaration.parent_kind,
                index : moduleDeclaration.index,
                location_id : moduleDeclaration.location_id,
            }
        }
        for (importEqualsDeclaration in ImportEqualsDeclaration(db)) {
            yield HasModifiersNode {
                id : importEqualsDeclaration.id,
                kind : importEqualsDeclaration.kind,
                parent_id : importEqualsDeclaration.parent_id,
                parent_kind : importEqualsDeclaration.parent_kind,
                index : importEqualsDeclaration.index,
                location_id : importEqualsDeclaration.location_id,
            }
        }
        for (importDeclaration in ImportDeclaration(db)) {
            yield HasModifiersNode {
                id : importDeclaration.id,
                kind : importDeclaration.kind,
                parent_id : importDeclaration.parent_id,
                parent_kind : importDeclaration.parent_kind,
                index : importDeclaration.index,
                location_id : importDeclaration.location_id,
            }
        }
        for (exportAssignment in ExportAssignment(db)) {
            yield HasModifiersNode {
                id : exportAssignment.id,
                kind : exportAssignment.kind,
                parent_id : exportAssignment.parent_id,
                parent_kind : exportAssignment.parent_kind,
                index : exportAssignment.index,
                location_id : exportAssignment.location_id,
            }
        }
        for (exportDeclaration in ExportDeclaration(db)) {
            yield HasModifiersNode {
                id : exportDeclaration.id,
                kind : exportDeclaration.kind,
                parent_id : exportDeclaration.parent_id,
                parent_kind : exportDeclaration.parent_kind,
                index : exportDeclaration.index,
                location_id : exportDeclaration.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to TypeParameter
     */
    pub fn toTypeParameter(self) -> TypeParameter {
        for (typeParameter in TypeParameter(__all_data__)) {
            if (typeParameter.key_eq(self)) {
                return typeParameter
            }
        }
    }
    
    /**
     * trans to Parameter
     */
    pub fn toParameter(self) -> Parameter {
        for (parameter in Parameter(__all_data__)) {
            if (parameter.key_eq(self)) {
                return parameter
            }
        }
    }
    
    /**
     * trans to ConstructorType
     */
    pub fn toConstructorType(self) -> ConstructorType {
        for (constructorType in ConstructorType(__all_data__)) {
            if (constructorType.key_eq(self)) {
                return constructorType
            }
        }
    }
    
    /**
     * trans to PropertySignature
     */
    pub fn toPropertySignature(self) -> PropertySignature {
        for (propertySignature in PropertySignature(__all_data__)) {
            if (propertySignature.key_eq(self)) {
                return propertySignature
            }
        }
    }
    
    /**
     * trans to PropertyDeclaration
     */
    pub fn toPropertyDeclaration(self) -> PropertyDeclaration {
        for (propertyDeclaration in PropertyDeclaration(__all_data__)) {
            if (propertyDeclaration.key_eq(self)) {
                return propertyDeclaration
            }
        }
    }
    
    /**
     * trans to MethodSignature
     */
    pub fn toMethodSignature(self) -> MethodSignature {
        for (methodSignature in MethodSignature(__all_data__)) {
            if (methodSignature.key_eq(self)) {
                return methodSignature
            }
        }
    }
    
    /**
     * trans to MethodDeclaration
     */
    pub fn toMethodDeclaration(self) -> MethodDeclaration {
        for (methodDeclaration in MethodDeclaration(__all_data__)) {
            if (methodDeclaration.key_eq(self)) {
                return methodDeclaration
            }
        }
    }
    
    /**
     * trans to Constructor
     */
    pub fn toConstructor(self) -> Constructor {
        for (constructor in Constructor(__all_data__)) {
            if (constructor.key_eq(self)) {
                return constructor
            }
        }
    }
    
    /**
     * trans to GetAccessor
     */
    pub fn toGetAccessor(self) -> GetAccessor {
        for (getAccessor in GetAccessor(__all_data__)) {
            if (getAccessor.key_eq(self)) {
                return getAccessor
            }
        }
    }
    
    /**
     * trans to SetAccessor
     */
    pub fn toSetAccessor(self) -> SetAccessor {
        for (setAccessor in SetAccessor(__all_data__)) {
            if (setAccessor.key_eq(self)) {
                return setAccessor
            }
        }
    }
    
    /**
     * trans to IndexSignature
     */
    pub fn toIndexSignature(self) -> IndexSignature {
        for (indexSignature in IndexSignature(__all_data__)) {
            if (indexSignature.key_eq(self)) {
                return indexSignature
            }
        }
    }
    
    /**
     * trans to FunctionExpression
     */
    pub fn toFunctionExpression(self) -> FunctionExpression {
        for (functionExpression in FunctionExpression(__all_data__)) {
            if (functionExpression.key_eq(self)) {
                return functionExpression
            }
        }
    }
    
    /**
     * trans to ArrowFunction
     */
    pub fn toArrowFunction(self) -> ArrowFunction {
        for (arrowFunction in ArrowFunction(__all_data__)) {
            if (arrowFunction.key_eq(self)) {
                return arrowFunction
            }
        }
    }
    
    /**
     * trans to ClassExpression
     */
    pub fn toClassExpression(self) -> ClassExpression {
        for (classExpression in ClassExpression(__all_data__)) {
            if (classExpression.key_eq(self)) {
                return classExpression
            }
        }
    }
    
    /**
     * trans to VariableStatement
     */
    pub fn toVariableStatement(self) -> VariableStatement {
        for (variableStatement in VariableStatement(__all_data__)) {
            if (variableStatement.key_eq(self)) {
                return variableStatement
            }
        }
    }
    
    /**
     * trans to FunctionDeclaration
     */
    pub fn toFunctionDeclaration(self) -> FunctionDeclaration {
        for (functionDeclaration in FunctionDeclaration(__all_data__)) {
            if (functionDeclaration.key_eq(self)) {
                return functionDeclaration
            }
        }
    }
    
    /**
     * trans to ClassDeclaration
     */
    pub fn toClassDeclaration(self) -> ClassDeclaration {
        for (classDeclaration in ClassDeclaration(__all_data__)) {
            if (classDeclaration.key_eq(self)) {
                return classDeclaration
            }
        }
    }
    
    /**
     * trans to StructDeclaration
     */
    pub fn toStructDeclaration(self) -> StructDeclaration {
        for (structDeclaration in StructDeclaration(__all_data__)) {
            if (structDeclaration.key_eq(self)) {
                return structDeclaration
            }
        }
    }
    
    /**
     * trans to InterfaceDeclaration
     */
    pub fn toInterfaceDeclaration(self) -> InterfaceDeclaration {
        for (interfaceDeclaration in InterfaceDeclaration(__all_data__)) {
            if (interfaceDeclaration.key_eq(self)) {
                return interfaceDeclaration
            }
        }
    }
    
    /**
     * trans to TypeAliasDeclaration
     */
    pub fn toTypeAliasDeclaration(self) -> TypeAliasDeclaration {
        for (typeAliasDeclaration in TypeAliasDeclaration(__all_data__)) {
            if (typeAliasDeclaration.key_eq(self)) {
                return typeAliasDeclaration
            }
        }
    }
    
    /**
     * trans to EnumDeclaration
     */
    pub fn toEnumDeclaration(self) -> EnumDeclaration {
        for (enumDeclaration in EnumDeclaration(__all_data__)) {
            if (enumDeclaration.key_eq(self)) {
                return enumDeclaration
            }
        }
    }
    
    /**
     * trans to ModuleDeclaration
     */
    pub fn toModuleDeclaration(self) -> ModuleDeclaration {
        for (moduleDeclaration in ModuleDeclaration(__all_data__)) {
            if (moduleDeclaration.key_eq(self)) {
                return moduleDeclaration
            }
        }
    }
    
    /**
     * trans to ImportEqualsDeclaration
     */
    pub fn toImportEqualsDeclaration(self) -> ImportEqualsDeclaration {
        for (importEqualsDeclaration in ImportEqualsDeclaration(__all_data__)) {
            if (importEqualsDeclaration.key_eq(self)) {
                return importEqualsDeclaration
            }
        }
    }
    
    /**
     * trans to ImportDeclaration
     */
    pub fn toImportDeclaration(self) -> ImportDeclaration {
        for (importDeclaration in ImportDeclaration(__all_data__)) {
            if (importDeclaration.key_eq(self)) {
                return importDeclaration
            }
        }
    }
    
    /**
     * trans to ExportAssignment
     */
    pub fn toExportAssignment(self) -> ExportAssignment {
        for (exportAssignment in ExportAssignment(__all_data__)) {
            if (exportAssignment.key_eq(self)) {
                return exportAssignment
            }
        }
    }
    
    /**
     * trans to ExportDeclaration
     */
    pub fn toExportDeclaration(self) -> ExportDeclaration {
        for (exportDeclaration in ExportDeclaration(__all_data__)) {
            if (exportDeclaration.key_eq(self)) {
                return exportDeclaration
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Identifier, QualifiedName]
 */
schema EntityName extends AstNode {
}

impl EntityName {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EntityName {
        for (identifier in Identifier(db)) {
            yield EntityName {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (qualifiedName in QualifiedName(db)) {
            yield EntityName {
                id : qualifiedName.id,
                kind : qualifiedName.kind,
                parent_id : qualifiedName.parent_id,
                parent_kind : qualifiedName.parent_kind,
                index : qualifiedName.index,
                location_id : qualifiedName.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to QualifiedName
     */
    pub fn toQualifiedName(self) -> QualifiedName {
        for (qualifiedName in QualifiedName(__all_data__)) {
            if (qualifiedName.key_eq(self)) {
                return qualifiedName
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Identifier, StringLiteral, NumericLiteral, ComputedPropertyName, PrivateIdentifier]
 */
schema PropertyName extends AstNode {
}

impl PropertyName {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PropertyName {
        for (identifier in Identifier(db)) {
            yield PropertyName {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (stringLiteral in StringLiteral(db)) {
            yield PropertyName {
                id : stringLiteral.id,
                kind : stringLiteral.kind,
                parent_id : stringLiteral.parent_id,
                parent_kind : stringLiteral.parent_kind,
                index : stringLiteral.index,
                location_id : stringLiteral.location_id,
            }
        }
        for (numericLiteral in NumericLiteral(db)) {
            yield PropertyName {
                id : numericLiteral.id,
                kind : numericLiteral.kind,
                parent_id : numericLiteral.parent_id,
                parent_kind : numericLiteral.parent_kind,
                index : numericLiteral.index,
                location_id : numericLiteral.location_id,
            }
        }
        for (computedPropertyName in ComputedPropertyName(db)) {
            yield PropertyName {
                id : computedPropertyName.id,
                kind : computedPropertyName.kind,
                parent_id : computedPropertyName.parent_id,
                parent_kind : computedPropertyName.parent_kind,
                index : computedPropertyName.index,
                location_id : computedPropertyName.location_id,
            }
        }
        for (privateIdentifier in PrivateIdentifier(db)) {
            yield PropertyName {
                id : privateIdentifier.id,
                kind : privateIdentifier.kind,
                parent_id : privateIdentifier.parent_id,
                parent_kind : privateIdentifier.parent_kind,
                index : privateIdentifier.index,
                location_id : privateIdentifier.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to StringLiteral
     */
    pub fn toStringLiteral(self) -> StringLiteral {
        for (stringLiteral in StringLiteral(__all_data__)) {
            if (stringLiteral.key_eq(self)) {
                return stringLiteral
            }
        }
    }
    
    /**
     * trans to NumericLiteral
     */
    pub fn toNumericLiteral(self) -> NumericLiteral {
        for (numericLiteral in NumericLiteral(__all_data__)) {
            if (numericLiteral.key_eq(self)) {
                return numericLiteral
            }
        }
    }
    
    /**
     * trans to ComputedPropertyName
     */
    pub fn toComputedPropertyName(self) -> ComputedPropertyName {
        for (computedPropertyName in ComputedPropertyName(__all_data__)) {
            if (computedPropertyName.key_eq(self)) {
                return computedPropertyName
            }
        }
    }
    
    /**
     * trans to PrivateIdentifier
     */
    pub fn toPrivateIdentifier(self) -> PrivateIdentifier {
        for (privateIdentifier in PrivateIdentifier(__all_data__)) {
            if (privateIdentifier.key_eq(self)) {
                return privateIdentifier
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Identifier, PrivateIdentifier]
 */
schema MemberName extends AstNode {
}

impl MemberName {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MemberName {
        for (identifier in Identifier(db)) {
            yield MemberName {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (privateIdentifier in PrivateIdentifier(db)) {
            yield MemberName {
                id : privateIdentifier.id,
                kind : privateIdentifier.kind,
                parent_id : privateIdentifier.parent_id,
                parent_kind : privateIdentifier.parent_kind,
                index : privateIdentifier.index,
                location_id : privateIdentifier.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to PrivateIdentifier
     */
    pub fn toPrivateIdentifier(self) -> PrivateIdentifier {
        for (privateIdentifier in PrivateIdentifier(__all_data__)) {
            if (privateIdentifier.key_eq(self)) {
                return privateIdentifier
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Identifier, ObjectBindingPattern, ArrayBindingPattern]
 */
schema BindingName extends AstNode {
}

impl BindingName {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BindingName {
        for (identifier in Identifier(db)) {
            yield BindingName {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (objectBindingPattern in ObjectBindingPattern(db)) {
            yield BindingName {
                id : objectBindingPattern.id,
                kind : objectBindingPattern.kind,
                parent_id : objectBindingPattern.parent_id,
                parent_kind : objectBindingPattern.parent_kind,
                index : objectBindingPattern.index,
                location_id : objectBindingPattern.location_id,
            }
        }
        for (arrayBindingPattern in ArrayBindingPattern(db)) {
            yield BindingName {
                id : arrayBindingPattern.id,
                kind : arrayBindingPattern.kind,
                parent_id : arrayBindingPattern.parent_id,
                parent_kind : arrayBindingPattern.parent_kind,
                index : arrayBindingPattern.index,
                location_id : arrayBindingPattern.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to ObjectBindingPattern
     */
    pub fn toObjectBindingPattern(self) -> ObjectBindingPattern {
        for (objectBindingPattern in ObjectBindingPattern(__all_data__)) {
            if (objectBindingPattern.key_eq(self)) {
                return objectBindingPattern
            }
        }
    }
    
    /**
     * trans to ArrayBindingPattern
     */
    pub fn toArrayBindingPattern(self) -> ArrayBindingPattern {
        for (arrayBindingPattern in ArrayBindingPattern(__all_data__)) {
            if (arrayBindingPattern.key_eq(self)) {
                return arrayBindingPattern
            }
        }
    }
    
}

/**
 * This type consists of the following types: [GetAccessor, SetAccessor]
 */
schema AccessorDeclaration extends AstNode {
}

impl AccessorDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AccessorDeclaration {
        for (getAccessor in GetAccessor(db)) {
            yield AccessorDeclaration {
                id : getAccessor.id,
                kind : getAccessor.kind,
                parent_id : getAccessor.parent_id,
                parent_kind : getAccessor.parent_kind,
                index : getAccessor.index,
                location_id : getAccessor.location_id,
            }
        }
        for (setAccessor in SetAccessor(db)) {
            yield AccessorDeclaration {
                id : setAccessor.id,
                kind : setAccessor.kind,
                parent_id : setAccessor.parent_id,
                parent_kind : setAccessor.parent_kind,
                index : setAccessor.index,
                location_id : setAccessor.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to GetAccessor
     */
    pub fn toGetAccessor(self) -> GetAccessor {
        for (getAccessor in GetAccessor(__all_data__)) {
            if (getAccessor.key_eq(self)) {
                return getAccessor
            }
        }
    }
    
    /**
     * trans to SetAccessor
     */
    pub fn toSetAccessor(self) -> SetAccessor {
        for (setAccessor in SetAccessor(__all_data__)) {
            if (setAccessor.key_eq(self)) {
                return setAccessor
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Block, Expression]
 */
schema BlockOrExpression extends AstNode {
}

impl BlockOrExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BlockOrExpression {
        for (block in Block(db)) {
            yield BlockOrExpression {
                id : block.id,
                kind : block.kind,
                parent_id : block.parent_id,
                parent_kind : block.parent_kind,
                index : block.index,
                location_id : block.location_id,
            }
        }
        for (expression in Expression(db)) {
            yield BlockOrExpression {
                id : expression.id,
                kind : expression.kind,
                parent_id : expression.parent_id,
                parent_kind : expression.parent_kind,
                index : expression.index,
                location_id : expression.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Block
     */
    pub fn toBlock(self) -> Block {
        for (block in Block(__all_data__)) {
            if (block.key_eq(self)) {
                return block
            }
        }
    }
    
    /**
     * trans to Expression
     */
    pub fn toExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (expression.key_eq(self)) {
                return expression
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Identifier, ThisType]
 */
schema IdentifierOrThisType extends AstNode {
}

impl IdentifierOrThisType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *IdentifierOrThisType {
        for (identifier in Identifier(db)) {
            yield IdentifierOrThisType {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (thisType in ThisType(db)) {
            yield IdentifierOrThisType {
                id : thisType.id,
                kind : thisType.kind,
                parent_id : thisType.parent_id,
                parent_kind : thisType.parent_kind,
                index : thisType.index,
                location_id : thisType.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to ThisType
     */
    pub fn toThisType(self) -> ThisType {
        for (thisType in ThisType(__all_data__)) {
            if (thisType.key_eq(self)) {
                return thisType
            }
        }
    }
    
}

/**
 * This type consists of the following types: [KeyOfKeyword, UniqueKeyword, ReadonlyKeyword]
 */
schema TypeOperatorOperatorType extends AstNode {
}

impl TypeOperatorOperatorType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TypeOperatorOperatorType {
        for (keyOfKeyword in KeyOfKeyword(db)) {
            yield TypeOperatorOperatorType {
                id : keyOfKeyword.id,
                kind : keyOfKeyword.kind,
                parent_id : keyOfKeyword.parent_id,
                parent_kind : keyOfKeyword.parent_kind,
                index : keyOfKeyword.index,
                location_id : keyOfKeyword.location_id,
            }
        }
        for (uniqueKeyword in UniqueKeyword(db)) {
            yield TypeOperatorOperatorType {
                id : uniqueKeyword.id,
                kind : uniqueKeyword.kind,
                parent_id : uniqueKeyword.parent_id,
                parent_kind : uniqueKeyword.parent_kind,
                index : uniqueKeyword.index,
                location_id : uniqueKeyword.location_id,
            }
        }
        for (readonlyKeyword in ReadonlyKeyword(db)) {
            yield TypeOperatorOperatorType {
                id : readonlyKeyword.id,
                kind : readonlyKeyword.kind,
                parent_id : readonlyKeyword.parent_id,
                parent_kind : readonlyKeyword.parent_kind,
                index : readonlyKeyword.index,
                location_id : readonlyKeyword.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to KeyOfKeyword
     */
    pub fn toKeyOfKeyword(self) -> KeyOfKeyword {
        for (keyOfKeyword in KeyOfKeyword(__all_data__)) {
            if (keyOfKeyword.key_eq(self)) {
                return keyOfKeyword
            }
        }
    }
    
    /**
     * trans to UniqueKeyword
     */
    pub fn toUniqueKeyword(self) -> UniqueKeyword {
        for (uniqueKeyword in UniqueKeyword(__all_data__)) {
            if (uniqueKeyword.key_eq(self)) {
                return uniqueKeyword
            }
        }
    }
    
    /**
     * trans to ReadonlyKeyword
     */
    pub fn toReadonlyKeyword(self) -> ReadonlyKeyword {
        for (readonlyKeyword in ReadonlyKeyword(__all_data__)) {
            if (readonlyKeyword.key_eq(self)) {
                return readonlyKeyword
            }
        }
    }
    
}

/**
 * This type consists of the following types: [ReadonlyKeyword, PlusToken, MinusToken]
 */
schema MappedTypeReadonlyTokenType extends AstNode {
}

impl MappedTypeReadonlyTokenType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MappedTypeReadonlyTokenType {
        for (readonlyKeyword in ReadonlyKeyword(db)) {
            yield MappedTypeReadonlyTokenType {
                id : readonlyKeyword.id,
                kind : readonlyKeyword.kind,
                parent_id : readonlyKeyword.parent_id,
                parent_kind : readonlyKeyword.parent_kind,
                index : readonlyKeyword.index,
                location_id : readonlyKeyword.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield MappedTypeReadonlyTokenType {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield MappedTypeReadonlyTokenType {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to ReadonlyKeyword
     */
    pub fn toReadonlyKeyword(self) -> ReadonlyKeyword {
        for (readonlyKeyword in ReadonlyKeyword(__all_data__)) {
            if (readonlyKeyword.key_eq(self)) {
                return readonlyKeyword
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [QuestionToken, PlusToken, MinusToken]
 */
schema MappedTypeQuestionTokenType extends AstNode {
}

impl MappedTypeQuestionTokenType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MappedTypeQuestionTokenType {
        for (questionToken in QuestionToken(db)) {
            yield MappedTypeQuestionTokenType {
                id : questionToken.id,
                kind : questionToken.kind,
                parent_id : questionToken.parent_id,
                parent_kind : questionToken.parent_kind,
                index : questionToken.index,
                location_id : questionToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield MappedTypeQuestionTokenType {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield MappedTypeQuestionTokenType {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to QuestionToken
     */
    pub fn toQuestionToken(self) -> QuestionToken {
        for (questionToken in QuestionToken(__all_data__)) {
            if (questionToken.key_eq(self)) {
                return questionToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [NullLiteral, LiteralExpression, PrefixUnaryExpression, TrueLiteral, FalseLiteral]
 */
schema LiteralTypeLiteralType extends AstNode {
}

impl LiteralTypeLiteralType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LiteralTypeLiteralType {
        for (nullLiteral in NullLiteral(db)) {
            yield LiteralTypeLiteralType {
                id : nullLiteral.id,
                kind : nullLiteral.kind,
                parent_id : nullLiteral.parent_id,
                parent_kind : nullLiteral.parent_kind,
                index : nullLiteral.index,
                location_id : nullLiteral.location_id,
            }
        }
        for (literalExpression in LiteralExpression(db)) {
            yield LiteralTypeLiteralType {
                id : literalExpression.id,
                kind : literalExpression.kind,
                parent_id : literalExpression.parent_id,
                parent_kind : literalExpression.parent_kind,
                index : literalExpression.index,
                location_id : literalExpression.location_id,
            }
        }
        for (prefixUnaryExpression in PrefixUnaryExpression(db)) {
            yield LiteralTypeLiteralType {
                id : prefixUnaryExpression.id,
                kind : prefixUnaryExpression.kind,
                parent_id : prefixUnaryExpression.parent_id,
                parent_kind : prefixUnaryExpression.parent_kind,
                index : prefixUnaryExpression.index,
                location_id : prefixUnaryExpression.location_id,
            }
        }
        for (trueLiteral in TrueLiteral(db)) {
            yield LiteralTypeLiteralType {
                id : trueLiteral.id,
                kind : trueLiteral.kind,
                parent_id : trueLiteral.parent_id,
                parent_kind : trueLiteral.parent_kind,
                index : trueLiteral.index,
                location_id : trueLiteral.location_id,
            }
        }
        for (falseLiteral in FalseLiteral(db)) {
            yield LiteralTypeLiteralType {
                id : falseLiteral.id,
                kind : falseLiteral.kind,
                parent_id : falseLiteral.parent_id,
                parent_kind : falseLiteral.parent_kind,
                index : falseLiteral.index,
                location_id : falseLiteral.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to NullLiteral
     */
    pub fn toNullLiteral(self) -> NullLiteral {
        for (nullLiteral in NullLiteral(__all_data__)) {
            if (nullLiteral.key_eq(self)) {
                return nullLiteral
            }
        }
    }
    
    /**
     * trans to LiteralExpression
     */
    pub fn toLiteralExpression(self) -> LiteralExpression {
        for (literalExpression in LiteralExpression(__all_data__)) {
            if (literalExpression.key_eq(self)) {
                return literalExpression
            }
        }
    }
    
    /**
     * trans to PrefixUnaryExpression
     */
    pub fn toPrefixUnaryExpression(self) -> PrefixUnaryExpression {
        for (prefixUnaryExpression in PrefixUnaryExpression(__all_data__)) {
            if (prefixUnaryExpression.key_eq(self)) {
                return prefixUnaryExpression
            }
        }
    }
    
    /**
     * trans to TrueLiteral
     */
    pub fn toTrueLiteral(self) -> TrueLiteral {
        for (trueLiteral in TrueLiteral(__all_data__)) {
            if (trueLiteral.key_eq(self)) {
                return trueLiteral
            }
        }
    }
    
    /**
     * trans to FalseLiteral
     */
    pub fn toFalseLiteral(self) -> FalseLiteral {
        for (falseLiteral in FalseLiteral(__all_data__)) {
            if (falseLiteral.key_eq(self)) {
                return falseLiteral
            }
        }
    }
    
}

/**
 * This type consists of the following types: [ObjectBindingPattern, ArrayBindingPattern]
 */
schema BindingPattern extends AstNode {
}

impl BindingPattern {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BindingPattern {
        for (objectBindingPattern in ObjectBindingPattern(db)) {
            yield BindingPattern {
                id : objectBindingPattern.id,
                kind : objectBindingPattern.kind,
                parent_id : objectBindingPattern.parent_id,
                parent_kind : objectBindingPattern.parent_kind,
                index : objectBindingPattern.index,
                location_id : objectBindingPattern.location_id,
            }
        }
        for (arrayBindingPattern in ArrayBindingPattern(db)) {
            yield BindingPattern {
                id : arrayBindingPattern.id,
                kind : arrayBindingPattern.kind,
                parent_id : arrayBindingPattern.parent_id,
                parent_kind : arrayBindingPattern.parent_kind,
                index : arrayBindingPattern.index,
                location_id : arrayBindingPattern.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to ObjectBindingPattern
     */
    pub fn toObjectBindingPattern(self) -> ObjectBindingPattern {
        for (objectBindingPattern in ObjectBindingPattern(__all_data__)) {
            if (objectBindingPattern.key_eq(self)) {
                return objectBindingPattern
            }
        }
    }
    
    /**
     * trans to ArrayBindingPattern
     */
    pub fn toArrayBindingPattern(self) -> ArrayBindingPattern {
        for (arrayBindingPattern in ArrayBindingPattern(__all_data__)) {
            if (arrayBindingPattern.key_eq(self)) {
                return arrayBindingPattern
            }
        }
    }
    
}

/**
 * This type consists of the following types: [BindingElement, OmittedExpression]
 */
schema ArrayBindingElement extends AstNode {
}

impl ArrayBindingElement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ArrayBindingElement {
        for (bindingElement in BindingElement(db)) {
            yield ArrayBindingElement {
                id : bindingElement.id,
                kind : bindingElement.kind,
                parent_id : bindingElement.parent_id,
                parent_kind : bindingElement.parent_kind,
                index : bindingElement.index,
                location_id : bindingElement.location_id,
            }
        }
        for (omittedExpression in OmittedExpression(db)) {
            yield ArrayBindingElement {
                id : omittedExpression.id,
                kind : omittedExpression.kind,
                parent_id : omittedExpression.parent_id,
                parent_kind : omittedExpression.parent_kind,
                index : omittedExpression.index,
                location_id : omittedExpression.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to BindingElement
     */
    pub fn toBindingElement(self) -> BindingElement {
        for (bindingElement in BindingElement(__all_data__)) {
            if (bindingElement.key_eq(self)) {
                return bindingElement
            }
        }
    }
    
    /**
     * trans to OmittedExpression
     */
    pub fn toOmittedExpression(self) -> OmittedExpression {
        for (omittedExpression in OmittedExpression(__all_data__)) {
            if (omittedExpression.key_eq(self)) {
                return omittedExpression
            }
        }
    }
    
}

/**
 * This type consists of the following types: [PropertyAccessExpression, ElementAccessExpression]
 */
schema AccessExpression extends AstNode {
}

impl AccessExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AccessExpression {
        for (propertyAccessExpression in PropertyAccessExpression(db)) {
            yield AccessExpression {
                id : propertyAccessExpression.id,
                kind : propertyAccessExpression.kind,
                parent_id : propertyAccessExpression.parent_id,
                parent_kind : propertyAccessExpression.parent_kind,
                index : propertyAccessExpression.index,
                location_id : propertyAccessExpression.location_id,
            }
        }
        for (elementAccessExpression in ElementAccessExpression(db)) {
            yield AccessExpression {
                id : elementAccessExpression.id,
                kind : elementAccessExpression.kind,
                parent_id : elementAccessExpression.parent_id,
                parent_kind : elementAccessExpression.parent_kind,
                index : elementAccessExpression.index,
                location_id : elementAccessExpression.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to PropertyAccessExpression
     */
    pub fn toPropertyAccessExpression(self) -> PropertyAccessExpression {
        for (propertyAccessExpression in PropertyAccessExpression(__all_data__)) {
            if (propertyAccessExpression.key_eq(self)) {
                return propertyAccessExpression
            }
        }
    }
    
    /**
     * trans to ElementAccessExpression
     */
    pub fn toElementAccessExpression(self) -> ElementAccessExpression {
        for (elementAccessExpression in ElementAccessExpression(__all_data__)) {
            if (elementAccessExpression.key_eq(self)) {
                return elementAccessExpression
            }
        }
    }
    
}

/**
 * This type consists of the following types: [TemplateExpression, NoSubstitutionTemplateLiteral]
 */
schema TemplateLiteral extends AstNode {
}

impl TemplateLiteral {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *TemplateLiteral {
        for (templateExpression in TemplateExpression(db)) {
            yield TemplateLiteral {
                id : templateExpression.id,
                kind : templateExpression.kind,
                parent_id : templateExpression.parent_id,
                parent_kind : templateExpression.parent_kind,
                index : templateExpression.index,
                location_id : templateExpression.location_id,
            }
        }
        for (noSubstitutionTemplateLiteral in NoSubstitutionTemplateLiteral(db)) {
            yield TemplateLiteral {
                id : noSubstitutionTemplateLiteral.id,
                kind : noSubstitutionTemplateLiteral.kind,
                parent_id : noSubstitutionTemplateLiteral.parent_id,
                parent_kind : noSubstitutionTemplateLiteral.parent_kind,
                index : noSubstitutionTemplateLiteral.index,
                location_id : noSubstitutionTemplateLiteral.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to TemplateExpression
     */
    pub fn toTemplateExpression(self) -> TemplateExpression {
        for (templateExpression in TemplateExpression(__all_data__)) {
            if (templateExpression.key_eq(self)) {
                return templateExpression
            }
        }
    }
    
    /**
     * trans to NoSubstitutionTemplateLiteral
     */
    pub fn toNoSubstitutionTemplateLiteral(self) -> NoSubstitutionTemplateLiteral {
        for (noSubstitutionTemplateLiteral in NoSubstitutionTemplateLiteral(__all_data__)) {
            if (noSubstitutionTemplateLiteral.key_eq(self)) {
                return noSubstitutionTemplateLiteral
            }
        }
    }
    
}

/**
 * This type consists of the following types: [PlusPlusToken, MinusMinusToken, PlusToken, MinusToken, TildeToken, ExclamationToken]
 */
schema PrefixUnaryOperator extends AstNode {
}

impl PrefixUnaryOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PrefixUnaryOperator {
        for (plusPlusToken in PlusPlusToken(db)) {
            yield PrefixUnaryOperator {
                id : plusPlusToken.id,
                kind : plusPlusToken.kind,
                parent_id : plusPlusToken.parent_id,
                parent_kind : plusPlusToken.parent_kind,
                index : plusPlusToken.index,
                location_id : plusPlusToken.location_id,
            }
        }
        for (minusMinusToken in MinusMinusToken(db)) {
            yield PrefixUnaryOperator {
                id : minusMinusToken.id,
                kind : minusMinusToken.kind,
                parent_id : minusMinusToken.parent_id,
                parent_kind : minusMinusToken.parent_kind,
                index : minusMinusToken.index,
                location_id : minusMinusToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield PrefixUnaryOperator {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield PrefixUnaryOperator {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
        for (tildeToken in TildeToken(db)) {
            yield PrefixUnaryOperator {
                id : tildeToken.id,
                kind : tildeToken.kind,
                parent_id : tildeToken.parent_id,
                parent_kind : tildeToken.parent_kind,
                index : tildeToken.index,
                location_id : tildeToken.location_id,
            }
        }
        for (exclamationToken in ExclamationToken(db)) {
            yield PrefixUnaryOperator {
                id : exclamationToken.id,
                kind : exclamationToken.kind,
                parent_id : exclamationToken.parent_id,
                parent_kind : exclamationToken.parent_kind,
                index : exclamationToken.index,
                location_id : exclamationToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to PlusPlusToken
     */
    pub fn toPlusPlusToken(self) -> PlusPlusToken {
        for (plusPlusToken in PlusPlusToken(__all_data__)) {
            if (plusPlusToken.key_eq(self)) {
                return plusPlusToken
            }
        }
    }
    
    /**
     * trans to MinusMinusToken
     */
    pub fn toMinusMinusToken(self) -> MinusMinusToken {
        for (minusMinusToken in MinusMinusToken(__all_data__)) {
            if (minusMinusToken.key_eq(self)) {
                return minusMinusToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
    /**
     * trans to TildeToken
     */
    pub fn toTildeToken(self) -> TildeToken {
        for (tildeToken in TildeToken(__all_data__)) {
            if (tildeToken.key_eq(self)) {
                return tildeToken
            }
        }
    }
    
    /**
     * trans to ExclamationToken
     */
    pub fn toExclamationToken(self) -> ExclamationToken {
        for (exclamationToken in ExclamationToken(__all_data__)) {
            if (exclamationToken.key_eq(self)) {
                return exclamationToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [PlusPlusToken, MinusMinusToken]
 */
schema PostUnaryOperator extends AstNode {
}

impl PostUnaryOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PostUnaryOperator {
        for (plusPlusToken in PlusPlusToken(db)) {
            yield PostUnaryOperator {
                id : plusPlusToken.id,
                kind : plusPlusToken.kind,
                parent_id : plusPlusToken.parent_id,
                parent_kind : plusPlusToken.parent_kind,
                index : plusPlusToken.index,
                location_id : plusPlusToken.location_id,
            }
        }
        for (minusMinusToken in MinusMinusToken(db)) {
            yield PostUnaryOperator {
                id : minusMinusToken.id,
                kind : minusMinusToken.kind,
                parent_id : minusMinusToken.parent_id,
                parent_kind : minusMinusToken.parent_kind,
                index : minusMinusToken.index,
                location_id : minusMinusToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to PlusPlusToken
     */
    pub fn toPlusPlusToken(self) -> PlusPlusToken {
        for (plusPlusToken in PlusPlusToken(__all_data__)) {
            if (plusPlusToken.key_eq(self)) {
                return plusPlusToken
            }
        }
    }
    
    /**
     * trans to MinusMinusToken
     */
    pub fn toMinusMinusToken(self) -> MinusMinusToken {
        for (minusMinusToken in MinusMinusToken(__all_data__)) {
            if (minusMinusToken.key_eq(self)) {
                return minusMinusToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AsteriskAsteriskToken]
 */
schema ExponentiationOperator extends AstNode {
}

impl ExponentiationOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExponentiationOperator {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield ExponentiationOperator {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AsteriskToken, SlashToken, PercentToken]
 */
schema MultiplicativeOperator extends AstNode {
}

impl MultiplicativeOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MultiplicativeOperator {
        for (asteriskToken in AsteriskToken(db)) {
            yield MultiplicativeOperator {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield MultiplicativeOperator {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield MultiplicativeOperator {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AsteriskAsteriskToken, AsteriskToken, SlashToken, PercentToken]
 */
schema MultiplicativeOperatorOrHigher extends AstNode {
}

impl MultiplicativeOperatorOrHigher {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MultiplicativeOperatorOrHigher {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield MultiplicativeOperatorOrHigher {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
        for (asteriskToken in AsteriskToken(db)) {
            yield MultiplicativeOperatorOrHigher {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield MultiplicativeOperatorOrHigher {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield MultiplicativeOperatorOrHigher {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [PlusToken, MinusToken]
 */
schema AdditiveOperator extends AstNode {
}

impl AdditiveOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AdditiveOperator {
        for (plusToken in PlusToken(db)) {
            yield AdditiveOperator {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield AdditiveOperator {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AsteriskAsteriskToken, AsteriskToken, SlashToken, PercentToken, PlusToken, MinusToken]
 */
schema AdditiveOperatorOrHigher extends AstNode {
}

impl AdditiveOperatorOrHigher {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AdditiveOperatorOrHigher {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield AdditiveOperatorOrHigher {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
        for (asteriskToken in AsteriskToken(db)) {
            yield AdditiveOperatorOrHigher {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield AdditiveOperatorOrHigher {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield AdditiveOperatorOrHigher {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield AdditiveOperatorOrHigher {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield AdditiveOperatorOrHigher {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [LessThanLessThanToken, GreaterThanGreaterThanToken, GreaterThanGreaterThanGreaterThanToken]
 */
schema ShiftOperator extends AstNode {
}

impl ShiftOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ShiftOperator {
        for (lessThanLessThanToken in LessThanLessThanToken(db)) {
            yield ShiftOperator {
                id : lessThanLessThanToken.id,
                kind : lessThanLessThanToken.kind,
                parent_id : lessThanLessThanToken.parent_id,
                parent_kind : lessThanLessThanToken.parent_kind,
                index : lessThanLessThanToken.index,
                location_id : lessThanLessThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(db)) {
            yield ShiftOperator {
                id : greaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(db)) {
            yield ShiftOperator {
                id : greaterThanGreaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanGreaterThanToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to LessThanLessThanToken
     */
    pub fn toLessThanLessThanToken(self) -> LessThanLessThanToken {
        for (lessThanLessThanToken in LessThanLessThanToken(__all_data__)) {
            if (lessThanLessThanToken.key_eq(self)) {
                return lessThanLessThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanToken {
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanGreaterThanToken {
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AsteriskAsteriskToken, AsteriskToken, SlashToken, PercentToken, PlusToken, MinusToken, LessThanLessThanToken, GreaterThanGreaterThanToken, GreaterThanGreaterThanGreaterThanToken]
 */
schema ShiftOperatorOrHigher extends AstNode {
}

impl ShiftOperatorOrHigher {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ShiftOperatorOrHigher {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield ShiftOperatorOrHigher {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
        for (asteriskToken in AsteriskToken(db)) {
            yield ShiftOperatorOrHigher {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield ShiftOperatorOrHigher {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield ShiftOperatorOrHigher {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield ShiftOperatorOrHigher {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield ShiftOperatorOrHigher {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
        for (lessThanLessThanToken in LessThanLessThanToken(db)) {
            yield ShiftOperatorOrHigher {
                id : lessThanLessThanToken.id,
                kind : lessThanLessThanToken.kind,
                parent_id : lessThanLessThanToken.parent_id,
                parent_kind : lessThanLessThanToken.parent_kind,
                index : lessThanLessThanToken.index,
                location_id : lessThanLessThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(db)) {
            yield ShiftOperatorOrHigher {
                id : greaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(db)) {
            yield ShiftOperatorOrHigher {
                id : greaterThanGreaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanGreaterThanToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanToken
     */
    pub fn toLessThanLessThanToken(self) -> LessThanLessThanToken {
        for (lessThanLessThanToken in LessThanLessThanToken(__all_data__)) {
            if (lessThanLessThanToken.key_eq(self)) {
                return lessThanLessThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanToken {
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanGreaterThanToken {
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [LessThanToken, LessThanEqualsToken, GreaterThanToken, GreaterThanEqualsToken, InstanceOfKeyword, InKeyword]
 */
schema RelationalOperator extends AstNode {
}

impl RelationalOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *RelationalOperator {
        for (lessThanToken in LessThanToken(db)) {
            yield RelationalOperator {
                id : lessThanToken.id,
                kind : lessThanToken.kind,
                parent_id : lessThanToken.parent_id,
                parent_kind : lessThanToken.parent_kind,
                index : lessThanToken.index,
                location_id : lessThanToken.location_id,
            }
        }
        for (lessThanEqualsToken in LessThanEqualsToken(db)) {
            yield RelationalOperator {
                id : lessThanEqualsToken.id,
                kind : lessThanEqualsToken.kind,
                parent_id : lessThanEqualsToken.parent_id,
                parent_kind : lessThanEqualsToken.parent_kind,
                index : lessThanEqualsToken.index,
                location_id : lessThanEqualsToken.location_id,
            }
        }
        for (greaterThanToken in GreaterThanToken(db)) {
            yield RelationalOperator {
                id : greaterThanToken.id,
                kind : greaterThanToken.kind,
                parent_id : greaterThanToken.parent_id,
                parent_kind : greaterThanToken.parent_kind,
                index : greaterThanToken.index,
                location_id : greaterThanToken.location_id,
            }
        }
        for (greaterThanEqualsToken in GreaterThanEqualsToken(db)) {
            yield RelationalOperator {
                id : greaterThanEqualsToken.id,
                kind : greaterThanEqualsToken.kind,
                parent_id : greaterThanEqualsToken.parent_id,
                parent_kind : greaterThanEqualsToken.parent_kind,
                index : greaterThanEqualsToken.index,
                location_id : greaterThanEqualsToken.location_id,
            }
        }
        for (instanceOfKeyword in InstanceOfKeyword(db)) {
            yield RelationalOperator {
                id : instanceOfKeyword.id,
                kind : instanceOfKeyword.kind,
                parent_id : instanceOfKeyword.parent_id,
                parent_kind : instanceOfKeyword.parent_kind,
                index : instanceOfKeyword.index,
                location_id : instanceOfKeyword.location_id,
            }
        }
        for (inKeyword in InKeyword(db)) {
            yield RelationalOperator {
                id : inKeyword.id,
                kind : inKeyword.kind,
                parent_id : inKeyword.parent_id,
                parent_kind : inKeyword.parent_kind,
                index : inKeyword.index,
                location_id : inKeyword.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to LessThanToken
     */
    pub fn toLessThanToken(self) -> LessThanToken {
        for (lessThanToken in LessThanToken(__all_data__)) {
            if (lessThanToken.key_eq(self)) {
                return lessThanToken
            }
        }
    }
    
    /**
     * trans to LessThanEqualsToken
     */
    pub fn toLessThanEqualsToken(self) -> LessThanEqualsToken {
        for (lessThanEqualsToken in LessThanEqualsToken(__all_data__)) {
            if (lessThanEqualsToken.key_eq(self)) {
                return lessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanToken
     */
    pub fn toGreaterThanToken(self) -> GreaterThanToken {
        for (greaterThanToken in GreaterThanToken(__all_data__)) {
            if (greaterThanToken.key_eq(self)) {
                return greaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanEqualsToken
     */
    pub fn toGreaterThanEqualsToken(self) -> GreaterThanEqualsToken {
        for (greaterThanEqualsToken in GreaterThanEqualsToken(__all_data__)) {
            if (greaterThanEqualsToken.key_eq(self)) {
                return greaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to InstanceOfKeyword
     */
    pub fn toInstanceOfKeyword(self) -> InstanceOfKeyword {
        for (instanceOfKeyword in InstanceOfKeyword(__all_data__)) {
            if (instanceOfKeyword.key_eq(self)) {
                return instanceOfKeyword
            }
        }
    }
    
    /**
     * trans to InKeyword
     */
    pub fn toInKeyword(self) -> InKeyword {
        for (inKeyword in InKeyword(__all_data__)) {
            if (inKeyword.key_eq(self)) {
                return inKeyword
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AsteriskAsteriskToken, AsteriskToken, SlashToken, PercentToken, PlusToken, MinusToken, LessThanLessThanToken, GreaterThanGreaterThanToken, GreaterThanGreaterThanGreaterThanToken, LessThanToken, LessThanEqualsToken, GreaterThanToken, GreaterThanEqualsToken, InstanceOfKeyword, InKeyword]
 */
schema RelationalOperatorOrHigher extends AstNode {
}

impl RelationalOperatorOrHigher {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *RelationalOperatorOrHigher {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield RelationalOperatorOrHigher {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
        for (asteriskToken in AsteriskToken(db)) {
            yield RelationalOperatorOrHigher {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield RelationalOperatorOrHigher {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield RelationalOperatorOrHigher {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield RelationalOperatorOrHigher {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield RelationalOperatorOrHigher {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
        for (lessThanLessThanToken in LessThanLessThanToken(db)) {
            yield RelationalOperatorOrHigher {
                id : lessThanLessThanToken.id,
                kind : lessThanLessThanToken.kind,
                parent_id : lessThanLessThanToken.parent_id,
                parent_kind : lessThanLessThanToken.parent_kind,
                index : lessThanLessThanToken.index,
                location_id : lessThanLessThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(db)) {
            yield RelationalOperatorOrHigher {
                id : greaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(db)) {
            yield RelationalOperatorOrHigher {
                id : greaterThanGreaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanGreaterThanToken.location_id,
            }
        }
        for (lessThanToken in LessThanToken(db)) {
            yield RelationalOperatorOrHigher {
                id : lessThanToken.id,
                kind : lessThanToken.kind,
                parent_id : lessThanToken.parent_id,
                parent_kind : lessThanToken.parent_kind,
                index : lessThanToken.index,
                location_id : lessThanToken.location_id,
            }
        }
        for (lessThanEqualsToken in LessThanEqualsToken(db)) {
            yield RelationalOperatorOrHigher {
                id : lessThanEqualsToken.id,
                kind : lessThanEqualsToken.kind,
                parent_id : lessThanEqualsToken.parent_id,
                parent_kind : lessThanEqualsToken.parent_kind,
                index : lessThanEqualsToken.index,
                location_id : lessThanEqualsToken.location_id,
            }
        }
        for (greaterThanToken in GreaterThanToken(db)) {
            yield RelationalOperatorOrHigher {
                id : greaterThanToken.id,
                kind : greaterThanToken.kind,
                parent_id : greaterThanToken.parent_id,
                parent_kind : greaterThanToken.parent_kind,
                index : greaterThanToken.index,
                location_id : greaterThanToken.location_id,
            }
        }
        for (greaterThanEqualsToken in GreaterThanEqualsToken(db)) {
            yield RelationalOperatorOrHigher {
                id : greaterThanEqualsToken.id,
                kind : greaterThanEqualsToken.kind,
                parent_id : greaterThanEqualsToken.parent_id,
                parent_kind : greaterThanEqualsToken.parent_kind,
                index : greaterThanEqualsToken.index,
                location_id : greaterThanEqualsToken.location_id,
            }
        }
        for (instanceOfKeyword in InstanceOfKeyword(db)) {
            yield RelationalOperatorOrHigher {
                id : instanceOfKeyword.id,
                kind : instanceOfKeyword.kind,
                parent_id : instanceOfKeyword.parent_id,
                parent_kind : instanceOfKeyword.parent_kind,
                index : instanceOfKeyword.index,
                location_id : instanceOfKeyword.location_id,
            }
        }
        for (inKeyword in InKeyword(db)) {
            yield RelationalOperatorOrHigher {
                id : inKeyword.id,
                kind : inKeyword.kind,
                parent_id : inKeyword.parent_id,
                parent_kind : inKeyword.parent_kind,
                index : inKeyword.index,
                location_id : inKeyword.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanToken
     */
    pub fn toLessThanLessThanToken(self) -> LessThanLessThanToken {
        for (lessThanLessThanToken in LessThanLessThanToken(__all_data__)) {
            if (lessThanLessThanToken.key_eq(self)) {
                return lessThanLessThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanToken {
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanGreaterThanToken {
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to LessThanToken
     */
    pub fn toLessThanToken(self) -> LessThanToken {
        for (lessThanToken in LessThanToken(__all_data__)) {
            if (lessThanToken.key_eq(self)) {
                return lessThanToken
            }
        }
    }
    
    /**
     * trans to LessThanEqualsToken
     */
    pub fn toLessThanEqualsToken(self) -> LessThanEqualsToken {
        for (lessThanEqualsToken in LessThanEqualsToken(__all_data__)) {
            if (lessThanEqualsToken.key_eq(self)) {
                return lessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanToken
     */
    pub fn toGreaterThanToken(self) -> GreaterThanToken {
        for (greaterThanToken in GreaterThanToken(__all_data__)) {
            if (greaterThanToken.key_eq(self)) {
                return greaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanEqualsToken
     */
    pub fn toGreaterThanEqualsToken(self) -> GreaterThanEqualsToken {
        for (greaterThanEqualsToken in GreaterThanEqualsToken(__all_data__)) {
            if (greaterThanEqualsToken.key_eq(self)) {
                return greaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to InstanceOfKeyword
     */
    pub fn toInstanceOfKeyword(self) -> InstanceOfKeyword {
        for (instanceOfKeyword in InstanceOfKeyword(__all_data__)) {
            if (instanceOfKeyword.key_eq(self)) {
                return instanceOfKeyword
            }
        }
    }
    
    /**
     * trans to InKeyword
     */
    pub fn toInKeyword(self) -> InKeyword {
        for (inKeyword in InKeyword(__all_data__)) {
            if (inKeyword.key_eq(self)) {
                return inKeyword
            }
        }
    }
    
}

/**
 * This type consists of the following types: [EqualsEqualsToken, EqualsEqualsEqualsToken, ExclamationEqualsEqualsToken, ExclamationEqualsToken]
 */
schema EqualityOperator extends AstNode {
}

impl EqualityOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EqualityOperator {
        for (equalsEqualsToken in EqualsEqualsToken(db)) {
            yield EqualityOperator {
                id : equalsEqualsToken.id,
                kind : equalsEqualsToken.kind,
                parent_id : equalsEqualsToken.parent_id,
                parent_kind : equalsEqualsToken.parent_kind,
                index : equalsEqualsToken.index,
                location_id : equalsEqualsToken.location_id,
            }
        }
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(db)) {
            yield EqualityOperator {
                id : equalsEqualsEqualsToken.id,
                kind : equalsEqualsEqualsToken.kind,
                parent_id : equalsEqualsEqualsToken.parent_id,
                parent_kind : equalsEqualsEqualsToken.parent_kind,
                index : equalsEqualsEqualsToken.index,
                location_id : equalsEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(db)) {
            yield EqualityOperator {
                id : exclamationEqualsEqualsToken.id,
                kind : exclamationEqualsEqualsToken.kind,
                parent_id : exclamationEqualsEqualsToken.parent_id,
                parent_kind : exclamationEqualsEqualsToken.parent_kind,
                index : exclamationEqualsEqualsToken.index,
                location_id : exclamationEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsToken in ExclamationEqualsToken(db)) {
            yield EqualityOperator {
                id : exclamationEqualsToken.id,
                kind : exclamationEqualsToken.kind,
                parent_id : exclamationEqualsToken.parent_id,
                parent_kind : exclamationEqualsToken.parent_kind,
                index : exclamationEqualsToken.index,
                location_id : exclamationEqualsToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to EqualsEqualsToken
     */
    pub fn toEqualsEqualsToken(self) -> EqualsEqualsToken {
        for (equalsEqualsToken in EqualsEqualsToken(__all_data__)) {
            if (equalsEqualsToken.key_eq(self)) {
                return equalsEqualsToken
            }
        }
    }
    
    /**
     * trans to EqualsEqualsEqualsToken
     */
    pub fn toEqualsEqualsEqualsToken(self) -> EqualsEqualsEqualsToken {
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(__all_data__)) {
            if (equalsEqualsEqualsToken.key_eq(self)) {
                return equalsEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsEqualsToken
     */
    pub fn toExclamationEqualsEqualsToken(self) -> ExclamationEqualsEqualsToken {
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(__all_data__)) {
            if (exclamationEqualsEqualsToken.key_eq(self)) {
                return exclamationEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsToken
     */
    pub fn toExclamationEqualsToken(self) -> ExclamationEqualsToken {
        for (exclamationEqualsToken in ExclamationEqualsToken(__all_data__)) {
            if (exclamationEqualsToken.key_eq(self)) {
                return exclamationEqualsToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AsteriskAsteriskToken, AsteriskToken, SlashToken, PercentToken, PlusToken, MinusToken, LessThanLessThanToken, GreaterThanGreaterThanToken, GreaterThanGreaterThanGreaterThanToken, LessThanToken, LessThanEqualsToken, GreaterThanToken, GreaterThanEqualsToken, InstanceOfKeyword, InKeyword, EqualsEqualsToken, EqualsEqualsEqualsToken, ExclamationEqualsEqualsToken, ExclamationEqualsToken]
 */
schema EqualityOperatorOrHigher extends AstNode {
}

impl EqualityOperatorOrHigher {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *EqualityOperatorOrHigher {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield EqualityOperatorOrHigher {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
        for (asteriskToken in AsteriskToken(db)) {
            yield EqualityOperatorOrHigher {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield EqualityOperatorOrHigher {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield EqualityOperatorOrHigher {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield EqualityOperatorOrHigher {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield EqualityOperatorOrHigher {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
        for (lessThanLessThanToken in LessThanLessThanToken(db)) {
            yield EqualityOperatorOrHigher {
                id : lessThanLessThanToken.id,
                kind : lessThanLessThanToken.kind,
                parent_id : lessThanLessThanToken.parent_id,
                parent_kind : lessThanLessThanToken.parent_kind,
                index : lessThanLessThanToken.index,
                location_id : lessThanLessThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(db)) {
            yield EqualityOperatorOrHigher {
                id : greaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(db)) {
            yield EqualityOperatorOrHigher {
                id : greaterThanGreaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanGreaterThanToken.location_id,
            }
        }
        for (lessThanToken in LessThanToken(db)) {
            yield EqualityOperatorOrHigher {
                id : lessThanToken.id,
                kind : lessThanToken.kind,
                parent_id : lessThanToken.parent_id,
                parent_kind : lessThanToken.parent_kind,
                index : lessThanToken.index,
                location_id : lessThanToken.location_id,
            }
        }
        for (lessThanEqualsToken in LessThanEqualsToken(db)) {
            yield EqualityOperatorOrHigher {
                id : lessThanEqualsToken.id,
                kind : lessThanEqualsToken.kind,
                parent_id : lessThanEqualsToken.parent_id,
                parent_kind : lessThanEqualsToken.parent_kind,
                index : lessThanEqualsToken.index,
                location_id : lessThanEqualsToken.location_id,
            }
        }
        for (greaterThanToken in GreaterThanToken(db)) {
            yield EqualityOperatorOrHigher {
                id : greaterThanToken.id,
                kind : greaterThanToken.kind,
                parent_id : greaterThanToken.parent_id,
                parent_kind : greaterThanToken.parent_kind,
                index : greaterThanToken.index,
                location_id : greaterThanToken.location_id,
            }
        }
        for (greaterThanEqualsToken in GreaterThanEqualsToken(db)) {
            yield EqualityOperatorOrHigher {
                id : greaterThanEqualsToken.id,
                kind : greaterThanEqualsToken.kind,
                parent_id : greaterThanEqualsToken.parent_id,
                parent_kind : greaterThanEqualsToken.parent_kind,
                index : greaterThanEqualsToken.index,
                location_id : greaterThanEqualsToken.location_id,
            }
        }
        for (instanceOfKeyword in InstanceOfKeyword(db)) {
            yield EqualityOperatorOrHigher {
                id : instanceOfKeyword.id,
                kind : instanceOfKeyword.kind,
                parent_id : instanceOfKeyword.parent_id,
                parent_kind : instanceOfKeyword.parent_kind,
                index : instanceOfKeyword.index,
                location_id : instanceOfKeyword.location_id,
            }
        }
        for (inKeyword in InKeyword(db)) {
            yield EqualityOperatorOrHigher {
                id : inKeyword.id,
                kind : inKeyword.kind,
                parent_id : inKeyword.parent_id,
                parent_kind : inKeyword.parent_kind,
                index : inKeyword.index,
                location_id : inKeyword.location_id,
            }
        }
        for (equalsEqualsToken in EqualsEqualsToken(db)) {
            yield EqualityOperatorOrHigher {
                id : equalsEqualsToken.id,
                kind : equalsEqualsToken.kind,
                parent_id : equalsEqualsToken.parent_id,
                parent_kind : equalsEqualsToken.parent_kind,
                index : equalsEqualsToken.index,
                location_id : equalsEqualsToken.location_id,
            }
        }
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(db)) {
            yield EqualityOperatorOrHigher {
                id : equalsEqualsEqualsToken.id,
                kind : equalsEqualsEqualsToken.kind,
                parent_id : equalsEqualsEqualsToken.parent_id,
                parent_kind : equalsEqualsEqualsToken.parent_kind,
                index : equalsEqualsEqualsToken.index,
                location_id : equalsEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(db)) {
            yield EqualityOperatorOrHigher {
                id : exclamationEqualsEqualsToken.id,
                kind : exclamationEqualsEqualsToken.kind,
                parent_id : exclamationEqualsEqualsToken.parent_id,
                parent_kind : exclamationEqualsEqualsToken.parent_kind,
                index : exclamationEqualsEqualsToken.index,
                location_id : exclamationEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsToken in ExclamationEqualsToken(db)) {
            yield EqualityOperatorOrHigher {
                id : exclamationEqualsToken.id,
                kind : exclamationEqualsToken.kind,
                parent_id : exclamationEqualsToken.parent_id,
                parent_kind : exclamationEqualsToken.parent_kind,
                index : exclamationEqualsToken.index,
                location_id : exclamationEqualsToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanToken
     */
    pub fn toLessThanLessThanToken(self) -> LessThanLessThanToken {
        for (lessThanLessThanToken in LessThanLessThanToken(__all_data__)) {
            if (lessThanLessThanToken.key_eq(self)) {
                return lessThanLessThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanToken {
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanGreaterThanToken {
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to LessThanToken
     */
    pub fn toLessThanToken(self) -> LessThanToken {
        for (lessThanToken in LessThanToken(__all_data__)) {
            if (lessThanToken.key_eq(self)) {
                return lessThanToken
            }
        }
    }
    
    /**
     * trans to LessThanEqualsToken
     */
    pub fn toLessThanEqualsToken(self) -> LessThanEqualsToken {
        for (lessThanEqualsToken in LessThanEqualsToken(__all_data__)) {
            if (lessThanEqualsToken.key_eq(self)) {
                return lessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanToken
     */
    pub fn toGreaterThanToken(self) -> GreaterThanToken {
        for (greaterThanToken in GreaterThanToken(__all_data__)) {
            if (greaterThanToken.key_eq(self)) {
                return greaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanEqualsToken
     */
    pub fn toGreaterThanEqualsToken(self) -> GreaterThanEqualsToken {
        for (greaterThanEqualsToken in GreaterThanEqualsToken(__all_data__)) {
            if (greaterThanEqualsToken.key_eq(self)) {
                return greaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to InstanceOfKeyword
     */
    pub fn toInstanceOfKeyword(self) -> InstanceOfKeyword {
        for (instanceOfKeyword in InstanceOfKeyword(__all_data__)) {
            if (instanceOfKeyword.key_eq(self)) {
                return instanceOfKeyword
            }
        }
    }
    
    /**
     * trans to InKeyword
     */
    pub fn toInKeyword(self) -> InKeyword {
        for (inKeyword in InKeyword(__all_data__)) {
            if (inKeyword.key_eq(self)) {
                return inKeyword
            }
        }
    }
    
    /**
     * trans to EqualsEqualsToken
     */
    pub fn toEqualsEqualsToken(self) -> EqualsEqualsToken {
        for (equalsEqualsToken in EqualsEqualsToken(__all_data__)) {
            if (equalsEqualsToken.key_eq(self)) {
                return equalsEqualsToken
            }
        }
    }
    
    /**
     * trans to EqualsEqualsEqualsToken
     */
    pub fn toEqualsEqualsEqualsToken(self) -> EqualsEqualsEqualsToken {
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(__all_data__)) {
            if (equalsEqualsEqualsToken.key_eq(self)) {
                return equalsEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsEqualsToken
     */
    pub fn toExclamationEqualsEqualsToken(self) -> ExclamationEqualsEqualsToken {
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(__all_data__)) {
            if (exclamationEqualsEqualsToken.key_eq(self)) {
                return exclamationEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsToken
     */
    pub fn toExclamationEqualsToken(self) -> ExclamationEqualsToken {
        for (exclamationEqualsToken in ExclamationEqualsToken(__all_data__)) {
            if (exclamationEqualsToken.key_eq(self)) {
                return exclamationEqualsToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AmpersandToken, BarToken, CaretToken]
 */
schema BitwiseOperator extends AstNode {
}

impl BitwiseOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BitwiseOperator {
        for (ampersandToken in AmpersandToken(db)) {
            yield BitwiseOperator {
                id : ampersandToken.id,
                kind : ampersandToken.kind,
                parent_id : ampersandToken.parent_id,
                parent_kind : ampersandToken.parent_kind,
                index : ampersandToken.index,
                location_id : ampersandToken.location_id,
            }
        }
        for (barToken in BarToken(db)) {
            yield BitwiseOperator {
                id : barToken.id,
                kind : barToken.kind,
                parent_id : barToken.parent_id,
                parent_kind : barToken.parent_kind,
                index : barToken.index,
                location_id : barToken.location_id,
            }
        }
        for (caretToken in CaretToken(db)) {
            yield BitwiseOperator {
                id : caretToken.id,
                kind : caretToken.kind,
                parent_id : caretToken.parent_id,
                parent_kind : caretToken.parent_kind,
                index : caretToken.index,
                location_id : caretToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AmpersandToken
     */
    pub fn toAmpersandToken(self) -> AmpersandToken {
        for (ampersandToken in AmpersandToken(__all_data__)) {
            if (ampersandToken.key_eq(self)) {
                return ampersandToken
            }
        }
    }
    
    /**
     * trans to BarToken
     */
    pub fn toBarToken(self) -> BarToken {
        for (barToken in BarToken(__all_data__)) {
            if (barToken.key_eq(self)) {
                return barToken
            }
        }
    }
    
    /**
     * trans to CaretToken
     */
    pub fn toCaretToken(self) -> CaretToken {
        for (caretToken in CaretToken(__all_data__)) {
            if (caretToken.key_eq(self)) {
                return caretToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AsteriskAsteriskToken, AsteriskToken, SlashToken, PercentToken, PlusToken, MinusToken, LessThanLessThanToken, GreaterThanGreaterThanToken, GreaterThanGreaterThanGreaterThanToken, LessThanToken, LessThanEqualsToken, GreaterThanToken, GreaterThanEqualsToken, InstanceOfKeyword, InKeyword, EqualsEqualsToken, EqualsEqualsEqualsToken, ExclamationEqualsEqualsToken, ExclamationEqualsToken, AmpersandToken, BarToken, CaretToken]
 */
schema BitwiseOperatorOrHigher extends AstNode {
}

impl BitwiseOperatorOrHigher {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BitwiseOperatorOrHigher {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
        for (asteriskToken in AsteriskToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
        for (lessThanLessThanToken in LessThanLessThanToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : lessThanLessThanToken.id,
                kind : lessThanLessThanToken.kind,
                parent_id : lessThanLessThanToken.parent_id,
                parent_kind : lessThanLessThanToken.parent_kind,
                index : lessThanLessThanToken.index,
                location_id : lessThanLessThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : greaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : greaterThanGreaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanGreaterThanToken.location_id,
            }
        }
        for (lessThanToken in LessThanToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : lessThanToken.id,
                kind : lessThanToken.kind,
                parent_id : lessThanToken.parent_id,
                parent_kind : lessThanToken.parent_kind,
                index : lessThanToken.index,
                location_id : lessThanToken.location_id,
            }
        }
        for (lessThanEqualsToken in LessThanEqualsToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : lessThanEqualsToken.id,
                kind : lessThanEqualsToken.kind,
                parent_id : lessThanEqualsToken.parent_id,
                parent_kind : lessThanEqualsToken.parent_kind,
                index : lessThanEqualsToken.index,
                location_id : lessThanEqualsToken.location_id,
            }
        }
        for (greaterThanToken in GreaterThanToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : greaterThanToken.id,
                kind : greaterThanToken.kind,
                parent_id : greaterThanToken.parent_id,
                parent_kind : greaterThanToken.parent_kind,
                index : greaterThanToken.index,
                location_id : greaterThanToken.location_id,
            }
        }
        for (greaterThanEqualsToken in GreaterThanEqualsToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : greaterThanEqualsToken.id,
                kind : greaterThanEqualsToken.kind,
                parent_id : greaterThanEqualsToken.parent_id,
                parent_kind : greaterThanEqualsToken.parent_kind,
                index : greaterThanEqualsToken.index,
                location_id : greaterThanEqualsToken.location_id,
            }
        }
        for (instanceOfKeyword in InstanceOfKeyword(db)) {
            yield BitwiseOperatorOrHigher {
                id : instanceOfKeyword.id,
                kind : instanceOfKeyword.kind,
                parent_id : instanceOfKeyword.parent_id,
                parent_kind : instanceOfKeyword.parent_kind,
                index : instanceOfKeyword.index,
                location_id : instanceOfKeyword.location_id,
            }
        }
        for (inKeyword in InKeyword(db)) {
            yield BitwiseOperatorOrHigher {
                id : inKeyword.id,
                kind : inKeyword.kind,
                parent_id : inKeyword.parent_id,
                parent_kind : inKeyword.parent_kind,
                index : inKeyword.index,
                location_id : inKeyword.location_id,
            }
        }
        for (equalsEqualsToken in EqualsEqualsToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : equalsEqualsToken.id,
                kind : equalsEqualsToken.kind,
                parent_id : equalsEqualsToken.parent_id,
                parent_kind : equalsEqualsToken.parent_kind,
                index : equalsEqualsToken.index,
                location_id : equalsEqualsToken.location_id,
            }
        }
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : equalsEqualsEqualsToken.id,
                kind : equalsEqualsEqualsToken.kind,
                parent_id : equalsEqualsEqualsToken.parent_id,
                parent_kind : equalsEqualsEqualsToken.parent_kind,
                index : equalsEqualsEqualsToken.index,
                location_id : equalsEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : exclamationEqualsEqualsToken.id,
                kind : exclamationEqualsEqualsToken.kind,
                parent_id : exclamationEqualsEqualsToken.parent_id,
                parent_kind : exclamationEqualsEqualsToken.parent_kind,
                index : exclamationEqualsEqualsToken.index,
                location_id : exclamationEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsToken in ExclamationEqualsToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : exclamationEqualsToken.id,
                kind : exclamationEqualsToken.kind,
                parent_id : exclamationEqualsToken.parent_id,
                parent_kind : exclamationEqualsToken.parent_kind,
                index : exclamationEqualsToken.index,
                location_id : exclamationEqualsToken.location_id,
            }
        }
        for (ampersandToken in AmpersandToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : ampersandToken.id,
                kind : ampersandToken.kind,
                parent_id : ampersandToken.parent_id,
                parent_kind : ampersandToken.parent_kind,
                index : ampersandToken.index,
                location_id : ampersandToken.location_id,
            }
        }
        for (barToken in BarToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : barToken.id,
                kind : barToken.kind,
                parent_id : barToken.parent_id,
                parent_kind : barToken.parent_kind,
                index : barToken.index,
                location_id : barToken.location_id,
            }
        }
        for (caretToken in CaretToken(db)) {
            yield BitwiseOperatorOrHigher {
                id : caretToken.id,
                kind : caretToken.kind,
                parent_id : caretToken.parent_id,
                parent_kind : caretToken.parent_kind,
                index : caretToken.index,
                location_id : caretToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanToken
     */
    pub fn toLessThanLessThanToken(self) -> LessThanLessThanToken {
        for (lessThanLessThanToken in LessThanLessThanToken(__all_data__)) {
            if (lessThanLessThanToken.key_eq(self)) {
                return lessThanLessThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanToken {
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanGreaterThanToken {
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to LessThanToken
     */
    pub fn toLessThanToken(self) -> LessThanToken {
        for (lessThanToken in LessThanToken(__all_data__)) {
            if (lessThanToken.key_eq(self)) {
                return lessThanToken
            }
        }
    }
    
    /**
     * trans to LessThanEqualsToken
     */
    pub fn toLessThanEqualsToken(self) -> LessThanEqualsToken {
        for (lessThanEqualsToken in LessThanEqualsToken(__all_data__)) {
            if (lessThanEqualsToken.key_eq(self)) {
                return lessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanToken
     */
    pub fn toGreaterThanToken(self) -> GreaterThanToken {
        for (greaterThanToken in GreaterThanToken(__all_data__)) {
            if (greaterThanToken.key_eq(self)) {
                return greaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanEqualsToken
     */
    pub fn toGreaterThanEqualsToken(self) -> GreaterThanEqualsToken {
        for (greaterThanEqualsToken in GreaterThanEqualsToken(__all_data__)) {
            if (greaterThanEqualsToken.key_eq(self)) {
                return greaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to InstanceOfKeyword
     */
    pub fn toInstanceOfKeyword(self) -> InstanceOfKeyword {
        for (instanceOfKeyword in InstanceOfKeyword(__all_data__)) {
            if (instanceOfKeyword.key_eq(self)) {
                return instanceOfKeyword
            }
        }
    }
    
    /**
     * trans to InKeyword
     */
    pub fn toInKeyword(self) -> InKeyword {
        for (inKeyword in InKeyword(__all_data__)) {
            if (inKeyword.key_eq(self)) {
                return inKeyword
            }
        }
    }
    
    /**
     * trans to EqualsEqualsToken
     */
    pub fn toEqualsEqualsToken(self) -> EqualsEqualsToken {
        for (equalsEqualsToken in EqualsEqualsToken(__all_data__)) {
            if (equalsEqualsToken.key_eq(self)) {
                return equalsEqualsToken
            }
        }
    }
    
    /**
     * trans to EqualsEqualsEqualsToken
     */
    pub fn toEqualsEqualsEqualsToken(self) -> EqualsEqualsEqualsToken {
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(__all_data__)) {
            if (equalsEqualsEqualsToken.key_eq(self)) {
                return equalsEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsEqualsToken
     */
    pub fn toExclamationEqualsEqualsToken(self) -> ExclamationEqualsEqualsToken {
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(__all_data__)) {
            if (exclamationEqualsEqualsToken.key_eq(self)) {
                return exclamationEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsToken
     */
    pub fn toExclamationEqualsToken(self) -> ExclamationEqualsToken {
        for (exclamationEqualsToken in ExclamationEqualsToken(__all_data__)) {
            if (exclamationEqualsToken.key_eq(self)) {
                return exclamationEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandToken
     */
    pub fn toAmpersandToken(self) -> AmpersandToken {
        for (ampersandToken in AmpersandToken(__all_data__)) {
            if (ampersandToken.key_eq(self)) {
                return ampersandToken
            }
        }
    }
    
    /**
     * trans to BarToken
     */
    pub fn toBarToken(self) -> BarToken {
        for (barToken in BarToken(__all_data__)) {
            if (barToken.key_eq(self)) {
                return barToken
            }
        }
    }
    
    /**
     * trans to CaretToken
     */
    pub fn toCaretToken(self) -> CaretToken {
        for (caretToken in CaretToken(__all_data__)) {
            if (caretToken.key_eq(self)) {
                return caretToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AmpersandAmpersandToken, BarBarToken]
 */
schema LogicalOperator extends AstNode {
}

impl LogicalOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LogicalOperator {
        for (ampersandAmpersandToken in AmpersandAmpersandToken(db)) {
            yield LogicalOperator {
                id : ampersandAmpersandToken.id,
                kind : ampersandAmpersandToken.kind,
                parent_id : ampersandAmpersandToken.parent_id,
                parent_kind : ampersandAmpersandToken.parent_kind,
                index : ampersandAmpersandToken.index,
                location_id : ampersandAmpersandToken.location_id,
            }
        }
        for (barBarToken in BarBarToken(db)) {
            yield LogicalOperator {
                id : barBarToken.id,
                kind : barBarToken.kind,
                parent_id : barBarToken.parent_id,
                parent_kind : barBarToken.parent_kind,
                index : barBarToken.index,
                location_id : barBarToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AmpersandAmpersandToken
     */
    pub fn toAmpersandAmpersandToken(self) -> AmpersandAmpersandToken {
        for (ampersandAmpersandToken in AmpersandAmpersandToken(__all_data__)) {
            if (ampersandAmpersandToken.key_eq(self)) {
                return ampersandAmpersandToken
            }
        }
    }
    
    /**
     * trans to BarBarToken
     */
    pub fn toBarBarToken(self) -> BarBarToken {
        for (barBarToken in BarBarToken(__all_data__)) {
            if (barBarToken.key_eq(self)) {
                return barBarToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [AsteriskAsteriskToken, AsteriskToken, SlashToken, PercentToken, PlusToken, MinusToken, LessThanLessThanToken, GreaterThanGreaterThanToken, GreaterThanGreaterThanGreaterThanToken, LessThanToken, LessThanEqualsToken, GreaterThanToken, GreaterThanEqualsToken, InstanceOfKeyword, InKeyword, EqualsEqualsToken, EqualsEqualsEqualsToken, ExclamationEqualsEqualsToken, ExclamationEqualsToken, AmpersandToken, BarToken, CaretToken, AmpersandAmpersandToken, BarBarToken]
 */
schema LogicalOperatorOrHigher extends AstNode {
}

impl LogicalOperatorOrHigher {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *LogicalOperatorOrHigher {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield LogicalOperatorOrHigher {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
        for (asteriskToken in AsteriskToken(db)) {
            yield LogicalOperatorOrHigher {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield LogicalOperatorOrHigher {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield LogicalOperatorOrHigher {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield LogicalOperatorOrHigher {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield LogicalOperatorOrHigher {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
        for (lessThanLessThanToken in LessThanLessThanToken(db)) {
            yield LogicalOperatorOrHigher {
                id : lessThanLessThanToken.id,
                kind : lessThanLessThanToken.kind,
                parent_id : lessThanLessThanToken.parent_id,
                parent_kind : lessThanLessThanToken.parent_kind,
                index : lessThanLessThanToken.index,
                location_id : lessThanLessThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(db)) {
            yield LogicalOperatorOrHigher {
                id : greaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(db)) {
            yield LogicalOperatorOrHigher {
                id : greaterThanGreaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanGreaterThanToken.location_id,
            }
        }
        for (lessThanToken in LessThanToken(db)) {
            yield LogicalOperatorOrHigher {
                id : lessThanToken.id,
                kind : lessThanToken.kind,
                parent_id : lessThanToken.parent_id,
                parent_kind : lessThanToken.parent_kind,
                index : lessThanToken.index,
                location_id : lessThanToken.location_id,
            }
        }
        for (lessThanEqualsToken in LessThanEqualsToken(db)) {
            yield LogicalOperatorOrHigher {
                id : lessThanEqualsToken.id,
                kind : lessThanEqualsToken.kind,
                parent_id : lessThanEqualsToken.parent_id,
                parent_kind : lessThanEqualsToken.parent_kind,
                index : lessThanEqualsToken.index,
                location_id : lessThanEqualsToken.location_id,
            }
        }
        for (greaterThanToken in GreaterThanToken(db)) {
            yield LogicalOperatorOrHigher {
                id : greaterThanToken.id,
                kind : greaterThanToken.kind,
                parent_id : greaterThanToken.parent_id,
                parent_kind : greaterThanToken.parent_kind,
                index : greaterThanToken.index,
                location_id : greaterThanToken.location_id,
            }
        }
        for (greaterThanEqualsToken in GreaterThanEqualsToken(db)) {
            yield LogicalOperatorOrHigher {
                id : greaterThanEqualsToken.id,
                kind : greaterThanEqualsToken.kind,
                parent_id : greaterThanEqualsToken.parent_id,
                parent_kind : greaterThanEqualsToken.parent_kind,
                index : greaterThanEqualsToken.index,
                location_id : greaterThanEqualsToken.location_id,
            }
        }
        for (instanceOfKeyword in InstanceOfKeyword(db)) {
            yield LogicalOperatorOrHigher {
                id : instanceOfKeyword.id,
                kind : instanceOfKeyword.kind,
                parent_id : instanceOfKeyword.parent_id,
                parent_kind : instanceOfKeyword.parent_kind,
                index : instanceOfKeyword.index,
                location_id : instanceOfKeyword.location_id,
            }
        }
        for (inKeyword in InKeyword(db)) {
            yield LogicalOperatorOrHigher {
                id : inKeyword.id,
                kind : inKeyword.kind,
                parent_id : inKeyword.parent_id,
                parent_kind : inKeyword.parent_kind,
                index : inKeyword.index,
                location_id : inKeyword.location_id,
            }
        }
        for (equalsEqualsToken in EqualsEqualsToken(db)) {
            yield LogicalOperatorOrHigher {
                id : equalsEqualsToken.id,
                kind : equalsEqualsToken.kind,
                parent_id : equalsEqualsToken.parent_id,
                parent_kind : equalsEqualsToken.parent_kind,
                index : equalsEqualsToken.index,
                location_id : equalsEqualsToken.location_id,
            }
        }
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(db)) {
            yield LogicalOperatorOrHigher {
                id : equalsEqualsEqualsToken.id,
                kind : equalsEqualsEqualsToken.kind,
                parent_id : equalsEqualsEqualsToken.parent_id,
                parent_kind : equalsEqualsEqualsToken.parent_kind,
                index : equalsEqualsEqualsToken.index,
                location_id : equalsEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(db)) {
            yield LogicalOperatorOrHigher {
                id : exclamationEqualsEqualsToken.id,
                kind : exclamationEqualsEqualsToken.kind,
                parent_id : exclamationEqualsEqualsToken.parent_id,
                parent_kind : exclamationEqualsEqualsToken.parent_kind,
                index : exclamationEqualsEqualsToken.index,
                location_id : exclamationEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsToken in ExclamationEqualsToken(db)) {
            yield LogicalOperatorOrHigher {
                id : exclamationEqualsToken.id,
                kind : exclamationEqualsToken.kind,
                parent_id : exclamationEqualsToken.parent_id,
                parent_kind : exclamationEqualsToken.parent_kind,
                index : exclamationEqualsToken.index,
                location_id : exclamationEqualsToken.location_id,
            }
        }
        for (ampersandToken in AmpersandToken(db)) {
            yield LogicalOperatorOrHigher {
                id : ampersandToken.id,
                kind : ampersandToken.kind,
                parent_id : ampersandToken.parent_id,
                parent_kind : ampersandToken.parent_kind,
                index : ampersandToken.index,
                location_id : ampersandToken.location_id,
            }
        }
        for (barToken in BarToken(db)) {
            yield LogicalOperatorOrHigher {
                id : barToken.id,
                kind : barToken.kind,
                parent_id : barToken.parent_id,
                parent_kind : barToken.parent_kind,
                index : barToken.index,
                location_id : barToken.location_id,
            }
        }
        for (caretToken in CaretToken(db)) {
            yield LogicalOperatorOrHigher {
                id : caretToken.id,
                kind : caretToken.kind,
                parent_id : caretToken.parent_id,
                parent_kind : caretToken.parent_kind,
                index : caretToken.index,
                location_id : caretToken.location_id,
            }
        }
        for (ampersandAmpersandToken in AmpersandAmpersandToken(db)) {
            yield LogicalOperatorOrHigher {
                id : ampersandAmpersandToken.id,
                kind : ampersandAmpersandToken.kind,
                parent_id : ampersandAmpersandToken.parent_id,
                parent_kind : ampersandAmpersandToken.parent_kind,
                index : ampersandAmpersandToken.index,
                location_id : ampersandAmpersandToken.location_id,
            }
        }
        for (barBarToken in BarBarToken(db)) {
            yield LogicalOperatorOrHigher {
                id : barBarToken.id,
                kind : barBarToken.kind,
                parent_id : barBarToken.parent_id,
                parent_kind : barBarToken.parent_kind,
                index : barBarToken.index,
                location_id : barBarToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanToken
     */
    pub fn toLessThanLessThanToken(self) -> LessThanLessThanToken {
        for (lessThanLessThanToken in LessThanLessThanToken(__all_data__)) {
            if (lessThanLessThanToken.key_eq(self)) {
                return lessThanLessThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanToken {
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanGreaterThanToken {
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to LessThanToken
     */
    pub fn toLessThanToken(self) -> LessThanToken {
        for (lessThanToken in LessThanToken(__all_data__)) {
            if (lessThanToken.key_eq(self)) {
                return lessThanToken
            }
        }
    }
    
    /**
     * trans to LessThanEqualsToken
     */
    pub fn toLessThanEqualsToken(self) -> LessThanEqualsToken {
        for (lessThanEqualsToken in LessThanEqualsToken(__all_data__)) {
            if (lessThanEqualsToken.key_eq(self)) {
                return lessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanToken
     */
    pub fn toGreaterThanToken(self) -> GreaterThanToken {
        for (greaterThanToken in GreaterThanToken(__all_data__)) {
            if (greaterThanToken.key_eq(self)) {
                return greaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanEqualsToken
     */
    pub fn toGreaterThanEqualsToken(self) -> GreaterThanEqualsToken {
        for (greaterThanEqualsToken in GreaterThanEqualsToken(__all_data__)) {
            if (greaterThanEqualsToken.key_eq(self)) {
                return greaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to InstanceOfKeyword
     */
    pub fn toInstanceOfKeyword(self) -> InstanceOfKeyword {
        for (instanceOfKeyword in InstanceOfKeyword(__all_data__)) {
            if (instanceOfKeyword.key_eq(self)) {
                return instanceOfKeyword
            }
        }
    }
    
    /**
     * trans to InKeyword
     */
    pub fn toInKeyword(self) -> InKeyword {
        for (inKeyword in InKeyword(__all_data__)) {
            if (inKeyword.key_eq(self)) {
                return inKeyword
            }
        }
    }
    
    /**
     * trans to EqualsEqualsToken
     */
    pub fn toEqualsEqualsToken(self) -> EqualsEqualsToken {
        for (equalsEqualsToken in EqualsEqualsToken(__all_data__)) {
            if (equalsEqualsToken.key_eq(self)) {
                return equalsEqualsToken
            }
        }
    }
    
    /**
     * trans to EqualsEqualsEqualsToken
     */
    pub fn toEqualsEqualsEqualsToken(self) -> EqualsEqualsEqualsToken {
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(__all_data__)) {
            if (equalsEqualsEqualsToken.key_eq(self)) {
                return equalsEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsEqualsToken
     */
    pub fn toExclamationEqualsEqualsToken(self) -> ExclamationEqualsEqualsToken {
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(__all_data__)) {
            if (exclamationEqualsEqualsToken.key_eq(self)) {
                return exclamationEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsToken
     */
    pub fn toExclamationEqualsToken(self) -> ExclamationEqualsToken {
        for (exclamationEqualsToken in ExclamationEqualsToken(__all_data__)) {
            if (exclamationEqualsToken.key_eq(self)) {
                return exclamationEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandToken
     */
    pub fn toAmpersandToken(self) -> AmpersandToken {
        for (ampersandToken in AmpersandToken(__all_data__)) {
            if (ampersandToken.key_eq(self)) {
                return ampersandToken
            }
        }
    }
    
    /**
     * trans to BarToken
     */
    pub fn toBarToken(self) -> BarToken {
        for (barToken in BarToken(__all_data__)) {
            if (barToken.key_eq(self)) {
                return barToken
            }
        }
    }
    
    /**
     * trans to CaretToken
     */
    pub fn toCaretToken(self) -> CaretToken {
        for (caretToken in CaretToken(__all_data__)) {
            if (caretToken.key_eq(self)) {
                return caretToken
            }
        }
    }
    
    /**
     * trans to AmpersandAmpersandToken
     */
    pub fn toAmpersandAmpersandToken(self) -> AmpersandAmpersandToken {
        for (ampersandAmpersandToken in AmpersandAmpersandToken(__all_data__)) {
            if (ampersandAmpersandToken.key_eq(self)) {
                return ampersandAmpersandToken
            }
        }
    }
    
    /**
     * trans to BarBarToken
     */
    pub fn toBarBarToken(self) -> BarBarToken {
        for (barBarToken in BarBarToken(__all_data__)) {
            if (barBarToken.key_eq(self)) {
                return barBarToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [PlusEqualsToken, MinusEqualsToken, AsteriskEqualsToken, AsteriskAsteriskEqualsToken, SlashEqualsToken, PercentEqualsToken, AmpersandEqualsToken, BarEqualsToken, CaretEqualsToken, LessThanLessThanEqualsToken, GreaterThanGreaterThanGreaterThanEqualsToken, GreaterThanGreaterThanEqualsToken, BarBarEqualsToken, AmpersandAmpersandEqualsToken, QuestionQuestionEqualsToken]
 */
schema CompoundAssignmentOperator extends AstNode {
}

impl CompoundAssignmentOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CompoundAssignmentOperator {
        for (plusEqualsToken in PlusEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : plusEqualsToken.id,
                kind : plusEqualsToken.kind,
                parent_id : plusEqualsToken.parent_id,
                parent_kind : plusEqualsToken.parent_kind,
                index : plusEqualsToken.index,
                location_id : plusEqualsToken.location_id,
            }
        }
        for (minusEqualsToken in MinusEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : minusEqualsToken.id,
                kind : minusEqualsToken.kind,
                parent_id : minusEqualsToken.parent_id,
                parent_kind : minusEqualsToken.parent_kind,
                index : minusEqualsToken.index,
                location_id : minusEqualsToken.location_id,
            }
        }
        for (asteriskEqualsToken in AsteriskEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : asteriskEqualsToken.id,
                kind : asteriskEqualsToken.kind,
                parent_id : asteriskEqualsToken.parent_id,
                parent_kind : asteriskEqualsToken.parent_kind,
                index : asteriskEqualsToken.index,
                location_id : asteriskEqualsToken.location_id,
            }
        }
        for (asteriskAsteriskEqualsToken in AsteriskAsteriskEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : asteriskAsteriskEqualsToken.id,
                kind : asteriskAsteriskEqualsToken.kind,
                parent_id : asteriskAsteriskEqualsToken.parent_id,
                parent_kind : asteriskAsteriskEqualsToken.parent_kind,
                index : asteriskAsteriskEqualsToken.index,
                location_id : asteriskAsteriskEqualsToken.location_id,
            }
        }
        for (slashEqualsToken in SlashEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : slashEqualsToken.id,
                kind : slashEqualsToken.kind,
                parent_id : slashEqualsToken.parent_id,
                parent_kind : slashEqualsToken.parent_kind,
                index : slashEqualsToken.index,
                location_id : slashEqualsToken.location_id,
            }
        }
        for (percentEqualsToken in PercentEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : percentEqualsToken.id,
                kind : percentEqualsToken.kind,
                parent_id : percentEqualsToken.parent_id,
                parent_kind : percentEqualsToken.parent_kind,
                index : percentEqualsToken.index,
                location_id : percentEqualsToken.location_id,
            }
        }
        for (ampersandEqualsToken in AmpersandEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : ampersandEqualsToken.id,
                kind : ampersandEqualsToken.kind,
                parent_id : ampersandEqualsToken.parent_id,
                parent_kind : ampersandEqualsToken.parent_kind,
                index : ampersandEqualsToken.index,
                location_id : ampersandEqualsToken.location_id,
            }
        }
        for (barEqualsToken in BarEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : barEqualsToken.id,
                kind : barEqualsToken.kind,
                parent_id : barEqualsToken.parent_id,
                parent_kind : barEqualsToken.parent_kind,
                index : barEqualsToken.index,
                location_id : barEqualsToken.location_id,
            }
        }
        for (caretEqualsToken in CaretEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : caretEqualsToken.id,
                kind : caretEqualsToken.kind,
                parent_id : caretEqualsToken.parent_id,
                parent_kind : caretEqualsToken.parent_kind,
                index : caretEqualsToken.index,
                location_id : caretEqualsToken.location_id,
            }
        }
        for (lessThanLessThanEqualsToken in LessThanLessThanEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : lessThanLessThanEqualsToken.id,
                kind : lessThanLessThanEqualsToken.kind,
                parent_id : lessThanLessThanEqualsToken.parent_id,
                parent_kind : lessThanLessThanEqualsToken.parent_kind,
                index : lessThanLessThanEqualsToken.index,
                location_id : lessThanLessThanEqualsToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanEqualsToken in GreaterThanGreaterThanGreaterThanEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : greaterThanGreaterThanGreaterThanEqualsToken.id,
                kind : greaterThanGreaterThanGreaterThanEqualsToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanEqualsToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanEqualsToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanEqualsToken.index,
                location_id : greaterThanGreaterThanGreaterThanEqualsToken.location_id,
            }
        }
        for (greaterThanGreaterThanEqualsToken in GreaterThanGreaterThanEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : greaterThanGreaterThanEqualsToken.id,
                kind : greaterThanGreaterThanEqualsToken.kind,
                parent_id : greaterThanGreaterThanEqualsToken.parent_id,
                parent_kind : greaterThanGreaterThanEqualsToken.parent_kind,
                index : greaterThanGreaterThanEqualsToken.index,
                location_id : greaterThanGreaterThanEqualsToken.location_id,
            }
        }
        for (barBarEqualsToken in BarBarEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : barBarEqualsToken.id,
                kind : barBarEqualsToken.kind,
                parent_id : barBarEqualsToken.parent_id,
                parent_kind : barBarEqualsToken.parent_kind,
                index : barBarEqualsToken.index,
                location_id : barBarEqualsToken.location_id,
            }
        }
        for (ampersandAmpersandEqualsToken in AmpersandAmpersandEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : ampersandAmpersandEqualsToken.id,
                kind : ampersandAmpersandEqualsToken.kind,
                parent_id : ampersandAmpersandEqualsToken.parent_id,
                parent_kind : ampersandAmpersandEqualsToken.parent_kind,
                index : ampersandAmpersandEqualsToken.index,
                location_id : ampersandAmpersandEqualsToken.location_id,
            }
        }
        for (questionQuestionEqualsToken in QuestionQuestionEqualsToken(db)) {
            yield CompoundAssignmentOperator {
                id : questionQuestionEqualsToken.id,
                kind : questionQuestionEqualsToken.kind,
                parent_id : questionQuestionEqualsToken.parent_id,
                parent_kind : questionQuestionEqualsToken.parent_kind,
                index : questionQuestionEqualsToken.index,
                location_id : questionQuestionEqualsToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to PlusEqualsToken
     */
    pub fn toPlusEqualsToken(self) -> PlusEqualsToken {
        for (plusEqualsToken in PlusEqualsToken(__all_data__)) {
            if (plusEqualsToken.key_eq(self)) {
                return plusEqualsToken
            }
        }
    }
    
    /**
     * trans to MinusEqualsToken
     */
    pub fn toMinusEqualsToken(self) -> MinusEqualsToken {
        for (minusEqualsToken in MinusEqualsToken(__all_data__)) {
            if (minusEqualsToken.key_eq(self)) {
                return minusEqualsToken
            }
        }
    }
    
    /**
     * trans to AsteriskEqualsToken
     */
    pub fn toAsteriskEqualsToken(self) -> AsteriskEqualsToken {
        for (asteriskEqualsToken in AsteriskEqualsToken(__all_data__)) {
            if (asteriskEqualsToken.key_eq(self)) {
                return asteriskEqualsToken
            }
        }
    }
    
    /**
     * trans to AsteriskAsteriskEqualsToken
     */
    pub fn toAsteriskAsteriskEqualsToken(self) -> AsteriskAsteriskEqualsToken {
        for (asteriskAsteriskEqualsToken in AsteriskAsteriskEqualsToken(__all_data__)) {
            if (asteriskAsteriskEqualsToken.key_eq(self)) {
                return asteriskAsteriskEqualsToken
            }
        }
    }
    
    /**
     * trans to SlashEqualsToken
     */
    pub fn toSlashEqualsToken(self) -> SlashEqualsToken {
        for (slashEqualsToken in SlashEqualsToken(__all_data__)) {
            if (slashEqualsToken.key_eq(self)) {
                return slashEqualsToken
            }
        }
    }
    
    /**
     * trans to PercentEqualsToken
     */
    pub fn toPercentEqualsToken(self) -> PercentEqualsToken {
        for (percentEqualsToken in PercentEqualsToken(__all_data__)) {
            if (percentEqualsToken.key_eq(self)) {
                return percentEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandEqualsToken
     */
    pub fn toAmpersandEqualsToken(self) -> AmpersandEqualsToken {
        for (ampersandEqualsToken in AmpersandEqualsToken(__all_data__)) {
            if (ampersandEqualsToken.key_eq(self)) {
                return ampersandEqualsToken
            }
        }
    }
    
    /**
     * trans to BarEqualsToken
     */
    pub fn toBarEqualsToken(self) -> BarEqualsToken {
        for (barEqualsToken in BarEqualsToken(__all_data__)) {
            if (barEqualsToken.key_eq(self)) {
                return barEqualsToken
            }
        }
    }
    
    /**
     * trans to CaretEqualsToken
     */
    pub fn toCaretEqualsToken(self) -> CaretEqualsToken {
        for (caretEqualsToken in CaretEqualsToken(__all_data__)) {
            if (caretEqualsToken.key_eq(self)) {
                return caretEqualsToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanEqualsToken
     */
    pub fn toLessThanLessThanEqualsToken(self) -> LessThanLessThanEqualsToken {
        for (lessThanLessThanEqualsToken in LessThanLessThanEqualsToken(__all_data__)) {
            if (lessThanLessThanEqualsToken.key_eq(self)) {
                return lessThanLessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanEqualsToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanEqualsToken(self) -> GreaterThanGreaterThanGreaterThanEqualsToken {
        for (greaterThanGreaterThanGreaterThanEqualsToken in GreaterThanGreaterThanGreaterThanEqualsToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanEqualsToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanEqualsToken
     */
    pub fn toGreaterThanGreaterThanEqualsToken(self) -> GreaterThanGreaterThanEqualsToken {
        for (greaterThanGreaterThanEqualsToken in GreaterThanGreaterThanEqualsToken(__all_data__)) {
            if (greaterThanGreaterThanEqualsToken.key_eq(self)) {
                return greaterThanGreaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to BarBarEqualsToken
     */
    pub fn toBarBarEqualsToken(self) -> BarBarEqualsToken {
        for (barBarEqualsToken in BarBarEqualsToken(__all_data__)) {
            if (barBarEqualsToken.key_eq(self)) {
                return barBarEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandAmpersandEqualsToken
     */
    pub fn toAmpersandAmpersandEqualsToken(self) -> AmpersandAmpersandEqualsToken {
        for (ampersandAmpersandEqualsToken in AmpersandAmpersandEqualsToken(__all_data__)) {
            if (ampersandAmpersandEqualsToken.key_eq(self)) {
                return ampersandAmpersandEqualsToken
            }
        }
    }
    
    /**
     * trans to QuestionQuestionEqualsToken
     */
    pub fn toQuestionQuestionEqualsToken(self) -> QuestionQuestionEqualsToken {
        for (questionQuestionEqualsToken in QuestionQuestionEqualsToken(__all_data__)) {
            if (questionQuestionEqualsToken.key_eq(self)) {
                return questionQuestionEqualsToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [EqualsToken, PlusEqualsToken, MinusEqualsToken, AsteriskEqualsToken, AsteriskAsteriskEqualsToken, SlashEqualsToken, PercentEqualsToken, AmpersandEqualsToken, BarEqualsToken, CaretEqualsToken, LessThanLessThanEqualsToken, GreaterThanGreaterThanGreaterThanEqualsToken, GreaterThanGreaterThanEqualsToken, BarBarEqualsToken, AmpersandAmpersandEqualsToken, QuestionQuestionEqualsToken]
 */
schema AssignmentOperator extends AstNode {
}

impl AssignmentOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AssignmentOperator {
        for (equalsToken in EqualsToken(db)) {
            yield AssignmentOperator {
                id : equalsToken.id,
                kind : equalsToken.kind,
                parent_id : equalsToken.parent_id,
                parent_kind : equalsToken.parent_kind,
                index : equalsToken.index,
                location_id : equalsToken.location_id,
            }
        }
        for (plusEqualsToken in PlusEqualsToken(db)) {
            yield AssignmentOperator {
                id : plusEqualsToken.id,
                kind : plusEqualsToken.kind,
                parent_id : plusEqualsToken.parent_id,
                parent_kind : plusEqualsToken.parent_kind,
                index : plusEqualsToken.index,
                location_id : plusEqualsToken.location_id,
            }
        }
        for (minusEqualsToken in MinusEqualsToken(db)) {
            yield AssignmentOperator {
                id : minusEqualsToken.id,
                kind : minusEqualsToken.kind,
                parent_id : minusEqualsToken.parent_id,
                parent_kind : minusEqualsToken.parent_kind,
                index : minusEqualsToken.index,
                location_id : minusEqualsToken.location_id,
            }
        }
        for (asteriskEqualsToken in AsteriskEqualsToken(db)) {
            yield AssignmentOperator {
                id : asteriskEqualsToken.id,
                kind : asteriskEqualsToken.kind,
                parent_id : asteriskEqualsToken.parent_id,
                parent_kind : asteriskEqualsToken.parent_kind,
                index : asteriskEqualsToken.index,
                location_id : asteriskEqualsToken.location_id,
            }
        }
        for (asteriskAsteriskEqualsToken in AsteriskAsteriskEqualsToken(db)) {
            yield AssignmentOperator {
                id : asteriskAsteriskEqualsToken.id,
                kind : asteriskAsteriskEqualsToken.kind,
                parent_id : asteriskAsteriskEqualsToken.parent_id,
                parent_kind : asteriskAsteriskEqualsToken.parent_kind,
                index : asteriskAsteriskEqualsToken.index,
                location_id : asteriskAsteriskEqualsToken.location_id,
            }
        }
        for (slashEqualsToken in SlashEqualsToken(db)) {
            yield AssignmentOperator {
                id : slashEqualsToken.id,
                kind : slashEqualsToken.kind,
                parent_id : slashEqualsToken.parent_id,
                parent_kind : slashEqualsToken.parent_kind,
                index : slashEqualsToken.index,
                location_id : slashEqualsToken.location_id,
            }
        }
        for (percentEqualsToken in PercentEqualsToken(db)) {
            yield AssignmentOperator {
                id : percentEqualsToken.id,
                kind : percentEqualsToken.kind,
                parent_id : percentEqualsToken.parent_id,
                parent_kind : percentEqualsToken.parent_kind,
                index : percentEqualsToken.index,
                location_id : percentEqualsToken.location_id,
            }
        }
        for (ampersandEqualsToken in AmpersandEqualsToken(db)) {
            yield AssignmentOperator {
                id : ampersandEqualsToken.id,
                kind : ampersandEqualsToken.kind,
                parent_id : ampersandEqualsToken.parent_id,
                parent_kind : ampersandEqualsToken.parent_kind,
                index : ampersandEqualsToken.index,
                location_id : ampersandEqualsToken.location_id,
            }
        }
        for (barEqualsToken in BarEqualsToken(db)) {
            yield AssignmentOperator {
                id : barEqualsToken.id,
                kind : barEqualsToken.kind,
                parent_id : barEqualsToken.parent_id,
                parent_kind : barEqualsToken.parent_kind,
                index : barEqualsToken.index,
                location_id : barEqualsToken.location_id,
            }
        }
        for (caretEqualsToken in CaretEqualsToken(db)) {
            yield AssignmentOperator {
                id : caretEqualsToken.id,
                kind : caretEqualsToken.kind,
                parent_id : caretEqualsToken.parent_id,
                parent_kind : caretEqualsToken.parent_kind,
                index : caretEqualsToken.index,
                location_id : caretEqualsToken.location_id,
            }
        }
        for (lessThanLessThanEqualsToken in LessThanLessThanEqualsToken(db)) {
            yield AssignmentOperator {
                id : lessThanLessThanEqualsToken.id,
                kind : lessThanLessThanEqualsToken.kind,
                parent_id : lessThanLessThanEqualsToken.parent_id,
                parent_kind : lessThanLessThanEqualsToken.parent_kind,
                index : lessThanLessThanEqualsToken.index,
                location_id : lessThanLessThanEqualsToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanEqualsToken in GreaterThanGreaterThanGreaterThanEqualsToken(db)) {
            yield AssignmentOperator {
                id : greaterThanGreaterThanGreaterThanEqualsToken.id,
                kind : greaterThanGreaterThanGreaterThanEqualsToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanEqualsToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanEqualsToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanEqualsToken.index,
                location_id : greaterThanGreaterThanGreaterThanEqualsToken.location_id,
            }
        }
        for (greaterThanGreaterThanEqualsToken in GreaterThanGreaterThanEqualsToken(db)) {
            yield AssignmentOperator {
                id : greaterThanGreaterThanEqualsToken.id,
                kind : greaterThanGreaterThanEqualsToken.kind,
                parent_id : greaterThanGreaterThanEqualsToken.parent_id,
                parent_kind : greaterThanGreaterThanEqualsToken.parent_kind,
                index : greaterThanGreaterThanEqualsToken.index,
                location_id : greaterThanGreaterThanEqualsToken.location_id,
            }
        }
        for (barBarEqualsToken in BarBarEqualsToken(db)) {
            yield AssignmentOperator {
                id : barBarEqualsToken.id,
                kind : barBarEqualsToken.kind,
                parent_id : barBarEqualsToken.parent_id,
                parent_kind : barBarEqualsToken.parent_kind,
                index : barBarEqualsToken.index,
                location_id : barBarEqualsToken.location_id,
            }
        }
        for (ampersandAmpersandEqualsToken in AmpersandAmpersandEqualsToken(db)) {
            yield AssignmentOperator {
                id : ampersandAmpersandEqualsToken.id,
                kind : ampersandAmpersandEqualsToken.kind,
                parent_id : ampersandAmpersandEqualsToken.parent_id,
                parent_kind : ampersandAmpersandEqualsToken.parent_kind,
                index : ampersandAmpersandEqualsToken.index,
                location_id : ampersandAmpersandEqualsToken.location_id,
            }
        }
        for (questionQuestionEqualsToken in QuestionQuestionEqualsToken(db)) {
            yield AssignmentOperator {
                id : questionQuestionEqualsToken.id,
                kind : questionQuestionEqualsToken.kind,
                parent_id : questionQuestionEqualsToken.parent_id,
                parent_kind : questionQuestionEqualsToken.parent_kind,
                index : questionQuestionEqualsToken.index,
                location_id : questionQuestionEqualsToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to EqualsToken
     */
    pub fn toEqualsToken(self) -> EqualsToken {
        for (equalsToken in EqualsToken(__all_data__)) {
            if (equalsToken.key_eq(self)) {
                return equalsToken
            }
        }
    }
    
    /**
     * trans to PlusEqualsToken
     */
    pub fn toPlusEqualsToken(self) -> PlusEqualsToken {
        for (plusEqualsToken in PlusEqualsToken(__all_data__)) {
            if (plusEqualsToken.key_eq(self)) {
                return plusEqualsToken
            }
        }
    }
    
    /**
     * trans to MinusEqualsToken
     */
    pub fn toMinusEqualsToken(self) -> MinusEqualsToken {
        for (minusEqualsToken in MinusEqualsToken(__all_data__)) {
            if (minusEqualsToken.key_eq(self)) {
                return minusEqualsToken
            }
        }
    }
    
    /**
     * trans to AsteriskEqualsToken
     */
    pub fn toAsteriskEqualsToken(self) -> AsteriskEqualsToken {
        for (asteriskEqualsToken in AsteriskEqualsToken(__all_data__)) {
            if (asteriskEqualsToken.key_eq(self)) {
                return asteriskEqualsToken
            }
        }
    }
    
    /**
     * trans to AsteriskAsteriskEqualsToken
     */
    pub fn toAsteriskAsteriskEqualsToken(self) -> AsteriskAsteriskEqualsToken {
        for (asteriskAsteriskEqualsToken in AsteriskAsteriskEqualsToken(__all_data__)) {
            if (asteriskAsteriskEqualsToken.key_eq(self)) {
                return asteriskAsteriskEqualsToken
            }
        }
    }
    
    /**
     * trans to SlashEqualsToken
     */
    pub fn toSlashEqualsToken(self) -> SlashEqualsToken {
        for (slashEqualsToken in SlashEqualsToken(__all_data__)) {
            if (slashEqualsToken.key_eq(self)) {
                return slashEqualsToken
            }
        }
    }
    
    /**
     * trans to PercentEqualsToken
     */
    pub fn toPercentEqualsToken(self) -> PercentEqualsToken {
        for (percentEqualsToken in PercentEqualsToken(__all_data__)) {
            if (percentEqualsToken.key_eq(self)) {
                return percentEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandEqualsToken
     */
    pub fn toAmpersandEqualsToken(self) -> AmpersandEqualsToken {
        for (ampersandEqualsToken in AmpersandEqualsToken(__all_data__)) {
            if (ampersandEqualsToken.key_eq(self)) {
                return ampersandEqualsToken
            }
        }
    }
    
    /**
     * trans to BarEqualsToken
     */
    pub fn toBarEqualsToken(self) -> BarEqualsToken {
        for (barEqualsToken in BarEqualsToken(__all_data__)) {
            if (barEqualsToken.key_eq(self)) {
                return barEqualsToken
            }
        }
    }
    
    /**
     * trans to CaretEqualsToken
     */
    pub fn toCaretEqualsToken(self) -> CaretEqualsToken {
        for (caretEqualsToken in CaretEqualsToken(__all_data__)) {
            if (caretEqualsToken.key_eq(self)) {
                return caretEqualsToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanEqualsToken
     */
    pub fn toLessThanLessThanEqualsToken(self) -> LessThanLessThanEqualsToken {
        for (lessThanLessThanEqualsToken in LessThanLessThanEqualsToken(__all_data__)) {
            if (lessThanLessThanEqualsToken.key_eq(self)) {
                return lessThanLessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanEqualsToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanEqualsToken(self) -> GreaterThanGreaterThanGreaterThanEqualsToken {
        for (greaterThanGreaterThanGreaterThanEqualsToken in GreaterThanGreaterThanGreaterThanEqualsToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanEqualsToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanEqualsToken
     */
    pub fn toGreaterThanGreaterThanEqualsToken(self) -> GreaterThanGreaterThanEqualsToken {
        for (greaterThanGreaterThanEqualsToken in GreaterThanGreaterThanEqualsToken(__all_data__)) {
            if (greaterThanGreaterThanEqualsToken.key_eq(self)) {
                return greaterThanGreaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to BarBarEqualsToken
     */
    pub fn toBarBarEqualsToken(self) -> BarBarEqualsToken {
        for (barBarEqualsToken in BarBarEqualsToken(__all_data__)) {
            if (barBarEqualsToken.key_eq(self)) {
                return barBarEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandAmpersandEqualsToken
     */
    pub fn toAmpersandAmpersandEqualsToken(self) -> AmpersandAmpersandEqualsToken {
        for (ampersandAmpersandEqualsToken in AmpersandAmpersandEqualsToken(__all_data__)) {
            if (ampersandAmpersandEqualsToken.key_eq(self)) {
                return ampersandAmpersandEqualsToken
            }
        }
    }
    
    /**
     * trans to QuestionQuestionEqualsToken
     */
    pub fn toQuestionQuestionEqualsToken(self) -> QuestionQuestionEqualsToken {
        for (questionQuestionEqualsToken in QuestionQuestionEqualsToken(__all_data__)) {
            if (questionQuestionEqualsToken.key_eq(self)) {
                return questionQuestionEqualsToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [QuestionQuestionToken, AsteriskAsteriskToken, AsteriskToken, SlashToken, PercentToken, PlusToken, MinusToken, LessThanLessThanToken, GreaterThanGreaterThanToken, GreaterThanGreaterThanGreaterThanToken, LessThanToken, LessThanEqualsToken, GreaterThanToken, GreaterThanEqualsToken, InstanceOfKeyword, InKeyword, EqualsEqualsToken, EqualsEqualsEqualsToken, ExclamationEqualsEqualsToken, ExclamationEqualsToken, AmpersandToken, BarToken, CaretToken, AmpersandAmpersandToken, BarBarToken, EqualsToken, PlusEqualsToken, MinusEqualsToken, AsteriskEqualsToken, AsteriskAsteriskEqualsToken, SlashEqualsToken, PercentEqualsToken, AmpersandEqualsToken, BarEqualsToken, CaretEqualsToken, LessThanLessThanEqualsToken, GreaterThanGreaterThanGreaterThanEqualsToken, GreaterThanGreaterThanEqualsToken, BarBarEqualsToken, AmpersandAmpersandEqualsToken, QuestionQuestionEqualsToken]
 */
schema AssignmentOperatorOrHigher extends AstNode {
}

impl AssignmentOperatorOrHigher {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AssignmentOperatorOrHigher {
        for (questionQuestionToken in QuestionQuestionToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : questionQuestionToken.id,
                kind : questionQuestionToken.kind,
                parent_id : questionQuestionToken.parent_id,
                parent_kind : questionQuestionToken.parent_kind,
                index : questionQuestionToken.index,
                location_id : questionQuestionToken.location_id,
            }
        }
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
        for (asteriskToken in AsteriskToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
        for (lessThanLessThanToken in LessThanLessThanToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : lessThanLessThanToken.id,
                kind : lessThanLessThanToken.kind,
                parent_id : lessThanLessThanToken.parent_id,
                parent_kind : lessThanLessThanToken.parent_kind,
                index : lessThanLessThanToken.index,
                location_id : lessThanLessThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : greaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : greaterThanGreaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanGreaterThanToken.location_id,
            }
        }
        for (lessThanToken in LessThanToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : lessThanToken.id,
                kind : lessThanToken.kind,
                parent_id : lessThanToken.parent_id,
                parent_kind : lessThanToken.parent_kind,
                index : lessThanToken.index,
                location_id : lessThanToken.location_id,
            }
        }
        for (lessThanEqualsToken in LessThanEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : lessThanEqualsToken.id,
                kind : lessThanEqualsToken.kind,
                parent_id : lessThanEqualsToken.parent_id,
                parent_kind : lessThanEqualsToken.parent_kind,
                index : lessThanEqualsToken.index,
                location_id : lessThanEqualsToken.location_id,
            }
        }
        for (greaterThanToken in GreaterThanToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : greaterThanToken.id,
                kind : greaterThanToken.kind,
                parent_id : greaterThanToken.parent_id,
                parent_kind : greaterThanToken.parent_kind,
                index : greaterThanToken.index,
                location_id : greaterThanToken.location_id,
            }
        }
        for (greaterThanEqualsToken in GreaterThanEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : greaterThanEqualsToken.id,
                kind : greaterThanEqualsToken.kind,
                parent_id : greaterThanEqualsToken.parent_id,
                parent_kind : greaterThanEqualsToken.parent_kind,
                index : greaterThanEqualsToken.index,
                location_id : greaterThanEqualsToken.location_id,
            }
        }
        for (instanceOfKeyword in InstanceOfKeyword(db)) {
            yield AssignmentOperatorOrHigher {
                id : instanceOfKeyword.id,
                kind : instanceOfKeyword.kind,
                parent_id : instanceOfKeyword.parent_id,
                parent_kind : instanceOfKeyword.parent_kind,
                index : instanceOfKeyword.index,
                location_id : instanceOfKeyword.location_id,
            }
        }
        for (inKeyword in InKeyword(db)) {
            yield AssignmentOperatorOrHigher {
                id : inKeyword.id,
                kind : inKeyword.kind,
                parent_id : inKeyword.parent_id,
                parent_kind : inKeyword.parent_kind,
                index : inKeyword.index,
                location_id : inKeyword.location_id,
            }
        }
        for (equalsEqualsToken in EqualsEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : equalsEqualsToken.id,
                kind : equalsEqualsToken.kind,
                parent_id : equalsEqualsToken.parent_id,
                parent_kind : equalsEqualsToken.parent_kind,
                index : equalsEqualsToken.index,
                location_id : equalsEqualsToken.location_id,
            }
        }
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : equalsEqualsEqualsToken.id,
                kind : equalsEqualsEqualsToken.kind,
                parent_id : equalsEqualsEqualsToken.parent_id,
                parent_kind : equalsEqualsEqualsToken.parent_kind,
                index : equalsEqualsEqualsToken.index,
                location_id : equalsEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : exclamationEqualsEqualsToken.id,
                kind : exclamationEqualsEqualsToken.kind,
                parent_id : exclamationEqualsEqualsToken.parent_id,
                parent_kind : exclamationEqualsEqualsToken.parent_kind,
                index : exclamationEqualsEqualsToken.index,
                location_id : exclamationEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsToken in ExclamationEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : exclamationEqualsToken.id,
                kind : exclamationEqualsToken.kind,
                parent_id : exclamationEqualsToken.parent_id,
                parent_kind : exclamationEqualsToken.parent_kind,
                index : exclamationEqualsToken.index,
                location_id : exclamationEqualsToken.location_id,
            }
        }
        for (ampersandToken in AmpersandToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : ampersandToken.id,
                kind : ampersandToken.kind,
                parent_id : ampersandToken.parent_id,
                parent_kind : ampersandToken.parent_kind,
                index : ampersandToken.index,
                location_id : ampersandToken.location_id,
            }
        }
        for (barToken in BarToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : barToken.id,
                kind : barToken.kind,
                parent_id : barToken.parent_id,
                parent_kind : barToken.parent_kind,
                index : barToken.index,
                location_id : barToken.location_id,
            }
        }
        for (caretToken in CaretToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : caretToken.id,
                kind : caretToken.kind,
                parent_id : caretToken.parent_id,
                parent_kind : caretToken.parent_kind,
                index : caretToken.index,
                location_id : caretToken.location_id,
            }
        }
        for (ampersandAmpersandToken in AmpersandAmpersandToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : ampersandAmpersandToken.id,
                kind : ampersandAmpersandToken.kind,
                parent_id : ampersandAmpersandToken.parent_id,
                parent_kind : ampersandAmpersandToken.parent_kind,
                index : ampersandAmpersandToken.index,
                location_id : ampersandAmpersandToken.location_id,
            }
        }
        for (barBarToken in BarBarToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : barBarToken.id,
                kind : barBarToken.kind,
                parent_id : barBarToken.parent_id,
                parent_kind : barBarToken.parent_kind,
                index : barBarToken.index,
                location_id : barBarToken.location_id,
            }
        }
        for (equalsToken in EqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : equalsToken.id,
                kind : equalsToken.kind,
                parent_id : equalsToken.parent_id,
                parent_kind : equalsToken.parent_kind,
                index : equalsToken.index,
                location_id : equalsToken.location_id,
            }
        }
        for (plusEqualsToken in PlusEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : plusEqualsToken.id,
                kind : plusEqualsToken.kind,
                parent_id : plusEqualsToken.parent_id,
                parent_kind : plusEqualsToken.parent_kind,
                index : plusEqualsToken.index,
                location_id : plusEqualsToken.location_id,
            }
        }
        for (minusEqualsToken in MinusEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : minusEqualsToken.id,
                kind : minusEqualsToken.kind,
                parent_id : minusEqualsToken.parent_id,
                parent_kind : minusEqualsToken.parent_kind,
                index : minusEqualsToken.index,
                location_id : minusEqualsToken.location_id,
            }
        }
        for (asteriskEqualsToken in AsteriskEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : asteriskEqualsToken.id,
                kind : asteriskEqualsToken.kind,
                parent_id : asteriskEqualsToken.parent_id,
                parent_kind : asteriskEqualsToken.parent_kind,
                index : asteriskEqualsToken.index,
                location_id : asteriskEqualsToken.location_id,
            }
        }
        for (asteriskAsteriskEqualsToken in AsteriskAsteriskEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : asteriskAsteriskEqualsToken.id,
                kind : asteriskAsteriskEqualsToken.kind,
                parent_id : asteriskAsteriskEqualsToken.parent_id,
                parent_kind : asteriskAsteriskEqualsToken.parent_kind,
                index : asteriskAsteriskEqualsToken.index,
                location_id : asteriskAsteriskEqualsToken.location_id,
            }
        }
        for (slashEqualsToken in SlashEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : slashEqualsToken.id,
                kind : slashEqualsToken.kind,
                parent_id : slashEqualsToken.parent_id,
                parent_kind : slashEqualsToken.parent_kind,
                index : slashEqualsToken.index,
                location_id : slashEqualsToken.location_id,
            }
        }
        for (percentEqualsToken in PercentEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : percentEqualsToken.id,
                kind : percentEqualsToken.kind,
                parent_id : percentEqualsToken.parent_id,
                parent_kind : percentEqualsToken.parent_kind,
                index : percentEqualsToken.index,
                location_id : percentEqualsToken.location_id,
            }
        }
        for (ampersandEqualsToken in AmpersandEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : ampersandEqualsToken.id,
                kind : ampersandEqualsToken.kind,
                parent_id : ampersandEqualsToken.parent_id,
                parent_kind : ampersandEqualsToken.parent_kind,
                index : ampersandEqualsToken.index,
                location_id : ampersandEqualsToken.location_id,
            }
        }
        for (barEqualsToken in BarEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : barEqualsToken.id,
                kind : barEqualsToken.kind,
                parent_id : barEqualsToken.parent_id,
                parent_kind : barEqualsToken.parent_kind,
                index : barEqualsToken.index,
                location_id : barEqualsToken.location_id,
            }
        }
        for (caretEqualsToken in CaretEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : caretEqualsToken.id,
                kind : caretEqualsToken.kind,
                parent_id : caretEqualsToken.parent_id,
                parent_kind : caretEqualsToken.parent_kind,
                index : caretEqualsToken.index,
                location_id : caretEqualsToken.location_id,
            }
        }
        for (lessThanLessThanEqualsToken in LessThanLessThanEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : lessThanLessThanEqualsToken.id,
                kind : lessThanLessThanEqualsToken.kind,
                parent_id : lessThanLessThanEqualsToken.parent_id,
                parent_kind : lessThanLessThanEqualsToken.parent_kind,
                index : lessThanLessThanEqualsToken.index,
                location_id : lessThanLessThanEqualsToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanEqualsToken in GreaterThanGreaterThanGreaterThanEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : greaterThanGreaterThanGreaterThanEqualsToken.id,
                kind : greaterThanGreaterThanGreaterThanEqualsToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanEqualsToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanEqualsToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanEqualsToken.index,
                location_id : greaterThanGreaterThanGreaterThanEqualsToken.location_id,
            }
        }
        for (greaterThanGreaterThanEqualsToken in GreaterThanGreaterThanEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : greaterThanGreaterThanEqualsToken.id,
                kind : greaterThanGreaterThanEqualsToken.kind,
                parent_id : greaterThanGreaterThanEqualsToken.parent_id,
                parent_kind : greaterThanGreaterThanEqualsToken.parent_kind,
                index : greaterThanGreaterThanEqualsToken.index,
                location_id : greaterThanGreaterThanEqualsToken.location_id,
            }
        }
        for (barBarEqualsToken in BarBarEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : barBarEqualsToken.id,
                kind : barBarEqualsToken.kind,
                parent_id : barBarEqualsToken.parent_id,
                parent_kind : barBarEqualsToken.parent_kind,
                index : barBarEqualsToken.index,
                location_id : barBarEqualsToken.location_id,
            }
        }
        for (ampersandAmpersandEqualsToken in AmpersandAmpersandEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : ampersandAmpersandEqualsToken.id,
                kind : ampersandAmpersandEqualsToken.kind,
                parent_id : ampersandAmpersandEqualsToken.parent_id,
                parent_kind : ampersandAmpersandEqualsToken.parent_kind,
                index : ampersandAmpersandEqualsToken.index,
                location_id : ampersandAmpersandEqualsToken.location_id,
            }
        }
        for (questionQuestionEqualsToken in QuestionQuestionEqualsToken(db)) {
            yield AssignmentOperatorOrHigher {
                id : questionQuestionEqualsToken.id,
                kind : questionQuestionEqualsToken.kind,
                parent_id : questionQuestionEqualsToken.parent_id,
                parent_kind : questionQuestionEqualsToken.parent_kind,
                index : questionQuestionEqualsToken.index,
                location_id : questionQuestionEqualsToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to QuestionQuestionToken
     */
    pub fn toQuestionQuestionToken(self) -> QuestionQuestionToken {
        for (questionQuestionToken in QuestionQuestionToken(__all_data__)) {
            if (questionQuestionToken.key_eq(self)) {
                return questionQuestionToken
            }
        }
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanToken
     */
    pub fn toLessThanLessThanToken(self) -> LessThanLessThanToken {
        for (lessThanLessThanToken in LessThanLessThanToken(__all_data__)) {
            if (lessThanLessThanToken.key_eq(self)) {
                return lessThanLessThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanToken {
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanGreaterThanToken {
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to LessThanToken
     */
    pub fn toLessThanToken(self) -> LessThanToken {
        for (lessThanToken in LessThanToken(__all_data__)) {
            if (lessThanToken.key_eq(self)) {
                return lessThanToken
            }
        }
    }
    
    /**
     * trans to LessThanEqualsToken
     */
    pub fn toLessThanEqualsToken(self) -> LessThanEqualsToken {
        for (lessThanEqualsToken in LessThanEqualsToken(__all_data__)) {
            if (lessThanEqualsToken.key_eq(self)) {
                return lessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanToken
     */
    pub fn toGreaterThanToken(self) -> GreaterThanToken {
        for (greaterThanToken in GreaterThanToken(__all_data__)) {
            if (greaterThanToken.key_eq(self)) {
                return greaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanEqualsToken
     */
    pub fn toGreaterThanEqualsToken(self) -> GreaterThanEqualsToken {
        for (greaterThanEqualsToken in GreaterThanEqualsToken(__all_data__)) {
            if (greaterThanEqualsToken.key_eq(self)) {
                return greaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to InstanceOfKeyword
     */
    pub fn toInstanceOfKeyword(self) -> InstanceOfKeyword {
        for (instanceOfKeyword in InstanceOfKeyword(__all_data__)) {
            if (instanceOfKeyword.key_eq(self)) {
                return instanceOfKeyword
            }
        }
    }
    
    /**
     * trans to InKeyword
     */
    pub fn toInKeyword(self) -> InKeyword {
        for (inKeyword in InKeyword(__all_data__)) {
            if (inKeyword.key_eq(self)) {
                return inKeyword
            }
        }
    }
    
    /**
     * trans to EqualsEqualsToken
     */
    pub fn toEqualsEqualsToken(self) -> EqualsEqualsToken {
        for (equalsEqualsToken in EqualsEqualsToken(__all_data__)) {
            if (equalsEqualsToken.key_eq(self)) {
                return equalsEqualsToken
            }
        }
    }
    
    /**
     * trans to EqualsEqualsEqualsToken
     */
    pub fn toEqualsEqualsEqualsToken(self) -> EqualsEqualsEqualsToken {
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(__all_data__)) {
            if (equalsEqualsEqualsToken.key_eq(self)) {
                return equalsEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsEqualsToken
     */
    pub fn toExclamationEqualsEqualsToken(self) -> ExclamationEqualsEqualsToken {
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(__all_data__)) {
            if (exclamationEqualsEqualsToken.key_eq(self)) {
                return exclamationEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsToken
     */
    pub fn toExclamationEqualsToken(self) -> ExclamationEqualsToken {
        for (exclamationEqualsToken in ExclamationEqualsToken(__all_data__)) {
            if (exclamationEqualsToken.key_eq(self)) {
                return exclamationEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandToken
     */
    pub fn toAmpersandToken(self) -> AmpersandToken {
        for (ampersandToken in AmpersandToken(__all_data__)) {
            if (ampersandToken.key_eq(self)) {
                return ampersandToken
            }
        }
    }
    
    /**
     * trans to BarToken
     */
    pub fn toBarToken(self) -> BarToken {
        for (barToken in BarToken(__all_data__)) {
            if (barToken.key_eq(self)) {
                return barToken
            }
        }
    }
    
    /**
     * trans to CaretToken
     */
    pub fn toCaretToken(self) -> CaretToken {
        for (caretToken in CaretToken(__all_data__)) {
            if (caretToken.key_eq(self)) {
                return caretToken
            }
        }
    }
    
    /**
     * trans to AmpersandAmpersandToken
     */
    pub fn toAmpersandAmpersandToken(self) -> AmpersandAmpersandToken {
        for (ampersandAmpersandToken in AmpersandAmpersandToken(__all_data__)) {
            if (ampersandAmpersandToken.key_eq(self)) {
                return ampersandAmpersandToken
            }
        }
    }
    
    /**
     * trans to BarBarToken
     */
    pub fn toBarBarToken(self) -> BarBarToken {
        for (barBarToken in BarBarToken(__all_data__)) {
            if (barBarToken.key_eq(self)) {
                return barBarToken
            }
        }
    }
    
    /**
     * trans to EqualsToken
     */
    pub fn toEqualsToken(self) -> EqualsToken {
        for (equalsToken in EqualsToken(__all_data__)) {
            if (equalsToken.key_eq(self)) {
                return equalsToken
            }
        }
    }
    
    /**
     * trans to PlusEqualsToken
     */
    pub fn toPlusEqualsToken(self) -> PlusEqualsToken {
        for (plusEqualsToken in PlusEqualsToken(__all_data__)) {
            if (plusEqualsToken.key_eq(self)) {
                return plusEqualsToken
            }
        }
    }
    
    /**
     * trans to MinusEqualsToken
     */
    pub fn toMinusEqualsToken(self) -> MinusEqualsToken {
        for (minusEqualsToken in MinusEqualsToken(__all_data__)) {
            if (minusEqualsToken.key_eq(self)) {
                return minusEqualsToken
            }
        }
    }
    
    /**
     * trans to AsteriskEqualsToken
     */
    pub fn toAsteriskEqualsToken(self) -> AsteriskEqualsToken {
        for (asteriskEqualsToken in AsteriskEqualsToken(__all_data__)) {
            if (asteriskEqualsToken.key_eq(self)) {
                return asteriskEqualsToken
            }
        }
    }
    
    /**
     * trans to AsteriskAsteriskEqualsToken
     */
    pub fn toAsteriskAsteriskEqualsToken(self) -> AsteriskAsteriskEqualsToken {
        for (asteriskAsteriskEqualsToken in AsteriskAsteriskEqualsToken(__all_data__)) {
            if (asteriskAsteriskEqualsToken.key_eq(self)) {
                return asteriskAsteriskEqualsToken
            }
        }
    }
    
    /**
     * trans to SlashEqualsToken
     */
    pub fn toSlashEqualsToken(self) -> SlashEqualsToken {
        for (slashEqualsToken in SlashEqualsToken(__all_data__)) {
            if (slashEqualsToken.key_eq(self)) {
                return slashEqualsToken
            }
        }
    }
    
    /**
     * trans to PercentEqualsToken
     */
    pub fn toPercentEqualsToken(self) -> PercentEqualsToken {
        for (percentEqualsToken in PercentEqualsToken(__all_data__)) {
            if (percentEqualsToken.key_eq(self)) {
                return percentEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandEqualsToken
     */
    pub fn toAmpersandEqualsToken(self) -> AmpersandEqualsToken {
        for (ampersandEqualsToken in AmpersandEqualsToken(__all_data__)) {
            if (ampersandEqualsToken.key_eq(self)) {
                return ampersandEqualsToken
            }
        }
    }
    
    /**
     * trans to BarEqualsToken
     */
    pub fn toBarEqualsToken(self) -> BarEqualsToken {
        for (barEqualsToken in BarEqualsToken(__all_data__)) {
            if (barEqualsToken.key_eq(self)) {
                return barEqualsToken
            }
        }
    }
    
    /**
     * trans to CaretEqualsToken
     */
    pub fn toCaretEqualsToken(self) -> CaretEqualsToken {
        for (caretEqualsToken in CaretEqualsToken(__all_data__)) {
            if (caretEqualsToken.key_eq(self)) {
                return caretEqualsToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanEqualsToken
     */
    pub fn toLessThanLessThanEqualsToken(self) -> LessThanLessThanEqualsToken {
        for (lessThanLessThanEqualsToken in LessThanLessThanEqualsToken(__all_data__)) {
            if (lessThanLessThanEqualsToken.key_eq(self)) {
                return lessThanLessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanEqualsToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanEqualsToken(self) -> GreaterThanGreaterThanGreaterThanEqualsToken {
        for (greaterThanGreaterThanGreaterThanEqualsToken in GreaterThanGreaterThanGreaterThanEqualsToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanEqualsToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanEqualsToken
     */
    pub fn toGreaterThanGreaterThanEqualsToken(self) -> GreaterThanGreaterThanEqualsToken {
        for (greaterThanGreaterThanEqualsToken in GreaterThanGreaterThanEqualsToken(__all_data__)) {
            if (greaterThanGreaterThanEqualsToken.key_eq(self)) {
                return greaterThanGreaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to BarBarEqualsToken
     */
    pub fn toBarBarEqualsToken(self) -> BarBarEqualsToken {
        for (barBarEqualsToken in BarBarEqualsToken(__all_data__)) {
            if (barBarEqualsToken.key_eq(self)) {
                return barBarEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandAmpersandEqualsToken
     */
    pub fn toAmpersandAmpersandEqualsToken(self) -> AmpersandAmpersandEqualsToken {
        for (ampersandAmpersandEqualsToken in AmpersandAmpersandEqualsToken(__all_data__)) {
            if (ampersandAmpersandEqualsToken.key_eq(self)) {
                return ampersandAmpersandEqualsToken
            }
        }
    }
    
    /**
     * trans to QuestionQuestionEqualsToken
     */
    pub fn toQuestionQuestionEqualsToken(self) -> QuestionQuestionEqualsToken {
        for (questionQuestionEqualsToken in QuestionQuestionEqualsToken(__all_data__)) {
            if (questionQuestionEqualsToken.key_eq(self)) {
                return questionQuestionEqualsToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [CommaToken, QuestionQuestionToken, AsteriskAsteriskToken, AsteriskToken, SlashToken, PercentToken, PlusToken, MinusToken, LessThanLessThanToken, GreaterThanGreaterThanToken, GreaterThanGreaterThanGreaterThanToken, LessThanToken, LessThanEqualsToken, GreaterThanToken, GreaterThanEqualsToken, InstanceOfKeyword, InKeyword, EqualsEqualsToken, EqualsEqualsEqualsToken, ExclamationEqualsEqualsToken, ExclamationEqualsToken, AmpersandToken, BarToken, CaretToken, AmpersandAmpersandToken, BarBarToken, EqualsToken, PlusEqualsToken, MinusEqualsToken, AsteriskEqualsToken, AsteriskAsteriskEqualsToken, SlashEqualsToken, PercentEqualsToken, AmpersandEqualsToken, BarEqualsToken, CaretEqualsToken, LessThanLessThanEqualsToken, GreaterThanGreaterThanGreaterThanEqualsToken, GreaterThanGreaterThanEqualsToken, BarBarEqualsToken, AmpersandAmpersandEqualsToken, QuestionQuestionEqualsToken]
 */
schema BinaryOperator extends AstNode {
}

impl BinaryOperator {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BinaryOperator {
        for (commaToken in CommaToken(db)) {
            yield BinaryOperator {
                id : commaToken.id,
                kind : commaToken.kind,
                parent_id : commaToken.parent_id,
                parent_kind : commaToken.parent_kind,
                index : commaToken.index,
                location_id : commaToken.location_id,
            }
        }
        for (questionQuestionToken in QuestionQuestionToken(db)) {
            yield BinaryOperator {
                id : questionQuestionToken.id,
                kind : questionQuestionToken.kind,
                parent_id : questionQuestionToken.parent_id,
                parent_kind : questionQuestionToken.parent_kind,
                index : questionQuestionToken.index,
                location_id : questionQuestionToken.location_id,
            }
        }
        for (asteriskAsteriskToken in AsteriskAsteriskToken(db)) {
            yield BinaryOperator {
                id : asteriskAsteriskToken.id,
                kind : asteriskAsteriskToken.kind,
                parent_id : asteriskAsteriskToken.parent_id,
                parent_kind : asteriskAsteriskToken.parent_kind,
                index : asteriskAsteriskToken.index,
                location_id : asteriskAsteriskToken.location_id,
            }
        }
        for (asteriskToken in AsteriskToken(db)) {
            yield BinaryOperator {
                id : asteriskToken.id,
                kind : asteriskToken.kind,
                parent_id : asteriskToken.parent_id,
                parent_kind : asteriskToken.parent_kind,
                index : asteriskToken.index,
                location_id : asteriskToken.location_id,
            }
        }
        for (slashToken in SlashToken(db)) {
            yield BinaryOperator {
                id : slashToken.id,
                kind : slashToken.kind,
                parent_id : slashToken.parent_id,
                parent_kind : slashToken.parent_kind,
                index : slashToken.index,
                location_id : slashToken.location_id,
            }
        }
        for (percentToken in PercentToken(db)) {
            yield BinaryOperator {
                id : percentToken.id,
                kind : percentToken.kind,
                parent_id : percentToken.parent_id,
                parent_kind : percentToken.parent_kind,
                index : percentToken.index,
                location_id : percentToken.location_id,
            }
        }
        for (plusToken in PlusToken(db)) {
            yield BinaryOperator {
                id : plusToken.id,
                kind : plusToken.kind,
                parent_id : plusToken.parent_id,
                parent_kind : plusToken.parent_kind,
                index : plusToken.index,
                location_id : plusToken.location_id,
            }
        }
        for (minusToken in MinusToken(db)) {
            yield BinaryOperator {
                id : minusToken.id,
                kind : minusToken.kind,
                parent_id : minusToken.parent_id,
                parent_kind : minusToken.parent_kind,
                index : minusToken.index,
                location_id : minusToken.location_id,
            }
        }
        for (lessThanLessThanToken in LessThanLessThanToken(db)) {
            yield BinaryOperator {
                id : lessThanLessThanToken.id,
                kind : lessThanLessThanToken.kind,
                parent_id : lessThanLessThanToken.parent_id,
                parent_kind : lessThanLessThanToken.parent_kind,
                index : lessThanLessThanToken.index,
                location_id : lessThanLessThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(db)) {
            yield BinaryOperator {
                id : greaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(db)) {
            yield BinaryOperator {
                id : greaterThanGreaterThanGreaterThanToken.id,
                kind : greaterThanGreaterThanGreaterThanToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanToken.index,
                location_id : greaterThanGreaterThanGreaterThanToken.location_id,
            }
        }
        for (lessThanToken in LessThanToken(db)) {
            yield BinaryOperator {
                id : lessThanToken.id,
                kind : lessThanToken.kind,
                parent_id : lessThanToken.parent_id,
                parent_kind : lessThanToken.parent_kind,
                index : lessThanToken.index,
                location_id : lessThanToken.location_id,
            }
        }
        for (lessThanEqualsToken in LessThanEqualsToken(db)) {
            yield BinaryOperator {
                id : lessThanEqualsToken.id,
                kind : lessThanEqualsToken.kind,
                parent_id : lessThanEqualsToken.parent_id,
                parent_kind : lessThanEqualsToken.parent_kind,
                index : lessThanEqualsToken.index,
                location_id : lessThanEqualsToken.location_id,
            }
        }
        for (greaterThanToken in GreaterThanToken(db)) {
            yield BinaryOperator {
                id : greaterThanToken.id,
                kind : greaterThanToken.kind,
                parent_id : greaterThanToken.parent_id,
                parent_kind : greaterThanToken.parent_kind,
                index : greaterThanToken.index,
                location_id : greaterThanToken.location_id,
            }
        }
        for (greaterThanEqualsToken in GreaterThanEqualsToken(db)) {
            yield BinaryOperator {
                id : greaterThanEqualsToken.id,
                kind : greaterThanEqualsToken.kind,
                parent_id : greaterThanEqualsToken.parent_id,
                parent_kind : greaterThanEqualsToken.parent_kind,
                index : greaterThanEqualsToken.index,
                location_id : greaterThanEqualsToken.location_id,
            }
        }
        for (instanceOfKeyword in InstanceOfKeyword(db)) {
            yield BinaryOperator {
                id : instanceOfKeyword.id,
                kind : instanceOfKeyword.kind,
                parent_id : instanceOfKeyword.parent_id,
                parent_kind : instanceOfKeyword.parent_kind,
                index : instanceOfKeyword.index,
                location_id : instanceOfKeyword.location_id,
            }
        }
        for (inKeyword in InKeyword(db)) {
            yield BinaryOperator {
                id : inKeyword.id,
                kind : inKeyword.kind,
                parent_id : inKeyword.parent_id,
                parent_kind : inKeyword.parent_kind,
                index : inKeyword.index,
                location_id : inKeyword.location_id,
            }
        }
        for (equalsEqualsToken in EqualsEqualsToken(db)) {
            yield BinaryOperator {
                id : equalsEqualsToken.id,
                kind : equalsEqualsToken.kind,
                parent_id : equalsEqualsToken.parent_id,
                parent_kind : equalsEqualsToken.parent_kind,
                index : equalsEqualsToken.index,
                location_id : equalsEqualsToken.location_id,
            }
        }
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(db)) {
            yield BinaryOperator {
                id : equalsEqualsEqualsToken.id,
                kind : equalsEqualsEqualsToken.kind,
                parent_id : equalsEqualsEqualsToken.parent_id,
                parent_kind : equalsEqualsEqualsToken.parent_kind,
                index : equalsEqualsEqualsToken.index,
                location_id : equalsEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(db)) {
            yield BinaryOperator {
                id : exclamationEqualsEqualsToken.id,
                kind : exclamationEqualsEqualsToken.kind,
                parent_id : exclamationEqualsEqualsToken.parent_id,
                parent_kind : exclamationEqualsEqualsToken.parent_kind,
                index : exclamationEqualsEqualsToken.index,
                location_id : exclamationEqualsEqualsToken.location_id,
            }
        }
        for (exclamationEqualsToken in ExclamationEqualsToken(db)) {
            yield BinaryOperator {
                id : exclamationEqualsToken.id,
                kind : exclamationEqualsToken.kind,
                parent_id : exclamationEqualsToken.parent_id,
                parent_kind : exclamationEqualsToken.parent_kind,
                index : exclamationEqualsToken.index,
                location_id : exclamationEqualsToken.location_id,
            }
        }
        for (ampersandToken in AmpersandToken(db)) {
            yield BinaryOperator {
                id : ampersandToken.id,
                kind : ampersandToken.kind,
                parent_id : ampersandToken.parent_id,
                parent_kind : ampersandToken.parent_kind,
                index : ampersandToken.index,
                location_id : ampersandToken.location_id,
            }
        }
        for (barToken in BarToken(db)) {
            yield BinaryOperator {
                id : barToken.id,
                kind : barToken.kind,
                parent_id : barToken.parent_id,
                parent_kind : barToken.parent_kind,
                index : barToken.index,
                location_id : barToken.location_id,
            }
        }
        for (caretToken in CaretToken(db)) {
            yield BinaryOperator {
                id : caretToken.id,
                kind : caretToken.kind,
                parent_id : caretToken.parent_id,
                parent_kind : caretToken.parent_kind,
                index : caretToken.index,
                location_id : caretToken.location_id,
            }
        }
        for (ampersandAmpersandToken in AmpersandAmpersandToken(db)) {
            yield BinaryOperator {
                id : ampersandAmpersandToken.id,
                kind : ampersandAmpersandToken.kind,
                parent_id : ampersandAmpersandToken.parent_id,
                parent_kind : ampersandAmpersandToken.parent_kind,
                index : ampersandAmpersandToken.index,
                location_id : ampersandAmpersandToken.location_id,
            }
        }
        for (barBarToken in BarBarToken(db)) {
            yield BinaryOperator {
                id : barBarToken.id,
                kind : barBarToken.kind,
                parent_id : barBarToken.parent_id,
                parent_kind : barBarToken.parent_kind,
                index : barBarToken.index,
                location_id : barBarToken.location_id,
            }
        }
        for (equalsToken in EqualsToken(db)) {
            yield BinaryOperator {
                id : equalsToken.id,
                kind : equalsToken.kind,
                parent_id : equalsToken.parent_id,
                parent_kind : equalsToken.parent_kind,
                index : equalsToken.index,
                location_id : equalsToken.location_id,
            }
        }
        for (plusEqualsToken in PlusEqualsToken(db)) {
            yield BinaryOperator {
                id : plusEqualsToken.id,
                kind : plusEqualsToken.kind,
                parent_id : plusEqualsToken.parent_id,
                parent_kind : plusEqualsToken.parent_kind,
                index : plusEqualsToken.index,
                location_id : plusEqualsToken.location_id,
            }
        }
        for (minusEqualsToken in MinusEqualsToken(db)) {
            yield BinaryOperator {
                id : minusEqualsToken.id,
                kind : minusEqualsToken.kind,
                parent_id : minusEqualsToken.parent_id,
                parent_kind : minusEqualsToken.parent_kind,
                index : minusEqualsToken.index,
                location_id : minusEqualsToken.location_id,
            }
        }
        for (asteriskEqualsToken in AsteriskEqualsToken(db)) {
            yield BinaryOperator {
                id : asteriskEqualsToken.id,
                kind : asteriskEqualsToken.kind,
                parent_id : asteriskEqualsToken.parent_id,
                parent_kind : asteriskEqualsToken.parent_kind,
                index : asteriskEqualsToken.index,
                location_id : asteriskEqualsToken.location_id,
            }
        }
        for (asteriskAsteriskEqualsToken in AsteriskAsteriskEqualsToken(db)) {
            yield BinaryOperator {
                id : asteriskAsteriskEqualsToken.id,
                kind : asteriskAsteriskEqualsToken.kind,
                parent_id : asteriskAsteriskEqualsToken.parent_id,
                parent_kind : asteriskAsteriskEqualsToken.parent_kind,
                index : asteriskAsteriskEqualsToken.index,
                location_id : asteriskAsteriskEqualsToken.location_id,
            }
        }
        for (slashEqualsToken in SlashEqualsToken(db)) {
            yield BinaryOperator {
                id : slashEqualsToken.id,
                kind : slashEqualsToken.kind,
                parent_id : slashEqualsToken.parent_id,
                parent_kind : slashEqualsToken.parent_kind,
                index : slashEqualsToken.index,
                location_id : slashEqualsToken.location_id,
            }
        }
        for (percentEqualsToken in PercentEqualsToken(db)) {
            yield BinaryOperator {
                id : percentEqualsToken.id,
                kind : percentEqualsToken.kind,
                parent_id : percentEqualsToken.parent_id,
                parent_kind : percentEqualsToken.parent_kind,
                index : percentEqualsToken.index,
                location_id : percentEqualsToken.location_id,
            }
        }
        for (ampersandEqualsToken in AmpersandEqualsToken(db)) {
            yield BinaryOperator {
                id : ampersandEqualsToken.id,
                kind : ampersandEqualsToken.kind,
                parent_id : ampersandEqualsToken.parent_id,
                parent_kind : ampersandEqualsToken.parent_kind,
                index : ampersandEqualsToken.index,
                location_id : ampersandEqualsToken.location_id,
            }
        }
        for (barEqualsToken in BarEqualsToken(db)) {
            yield BinaryOperator {
                id : barEqualsToken.id,
                kind : barEqualsToken.kind,
                parent_id : barEqualsToken.parent_id,
                parent_kind : barEqualsToken.parent_kind,
                index : barEqualsToken.index,
                location_id : barEqualsToken.location_id,
            }
        }
        for (caretEqualsToken in CaretEqualsToken(db)) {
            yield BinaryOperator {
                id : caretEqualsToken.id,
                kind : caretEqualsToken.kind,
                parent_id : caretEqualsToken.parent_id,
                parent_kind : caretEqualsToken.parent_kind,
                index : caretEqualsToken.index,
                location_id : caretEqualsToken.location_id,
            }
        }
        for (lessThanLessThanEqualsToken in LessThanLessThanEqualsToken(db)) {
            yield BinaryOperator {
                id : lessThanLessThanEqualsToken.id,
                kind : lessThanLessThanEqualsToken.kind,
                parent_id : lessThanLessThanEqualsToken.parent_id,
                parent_kind : lessThanLessThanEqualsToken.parent_kind,
                index : lessThanLessThanEqualsToken.index,
                location_id : lessThanLessThanEqualsToken.location_id,
            }
        }
        for (greaterThanGreaterThanGreaterThanEqualsToken in GreaterThanGreaterThanGreaterThanEqualsToken(db)) {
            yield BinaryOperator {
                id : greaterThanGreaterThanGreaterThanEqualsToken.id,
                kind : greaterThanGreaterThanGreaterThanEqualsToken.kind,
                parent_id : greaterThanGreaterThanGreaterThanEqualsToken.parent_id,
                parent_kind : greaterThanGreaterThanGreaterThanEqualsToken.parent_kind,
                index : greaterThanGreaterThanGreaterThanEqualsToken.index,
                location_id : greaterThanGreaterThanGreaterThanEqualsToken.location_id,
            }
        }
        for (greaterThanGreaterThanEqualsToken in GreaterThanGreaterThanEqualsToken(db)) {
            yield BinaryOperator {
                id : greaterThanGreaterThanEqualsToken.id,
                kind : greaterThanGreaterThanEqualsToken.kind,
                parent_id : greaterThanGreaterThanEqualsToken.parent_id,
                parent_kind : greaterThanGreaterThanEqualsToken.parent_kind,
                index : greaterThanGreaterThanEqualsToken.index,
                location_id : greaterThanGreaterThanEqualsToken.location_id,
            }
        }
        for (barBarEqualsToken in BarBarEqualsToken(db)) {
            yield BinaryOperator {
                id : barBarEqualsToken.id,
                kind : barBarEqualsToken.kind,
                parent_id : barBarEqualsToken.parent_id,
                parent_kind : barBarEqualsToken.parent_kind,
                index : barBarEqualsToken.index,
                location_id : barBarEqualsToken.location_id,
            }
        }
        for (ampersandAmpersandEqualsToken in AmpersandAmpersandEqualsToken(db)) {
            yield BinaryOperator {
                id : ampersandAmpersandEqualsToken.id,
                kind : ampersandAmpersandEqualsToken.kind,
                parent_id : ampersandAmpersandEqualsToken.parent_id,
                parent_kind : ampersandAmpersandEqualsToken.parent_kind,
                index : ampersandAmpersandEqualsToken.index,
                location_id : ampersandAmpersandEqualsToken.location_id,
            }
        }
        for (questionQuestionEqualsToken in QuestionQuestionEqualsToken(db)) {
            yield BinaryOperator {
                id : questionQuestionEqualsToken.id,
                kind : questionQuestionEqualsToken.kind,
                parent_id : questionQuestionEqualsToken.parent_id,
                parent_kind : questionQuestionEqualsToken.parent_kind,
                index : questionQuestionEqualsToken.index,
                location_id : questionQuestionEqualsToken.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to CommaToken
     */
    pub fn toCommaToken(self) -> CommaToken {
        for (commaToken in CommaToken(__all_data__)) {
            if (commaToken.key_eq(self)) {
                return commaToken
            }
        }
    }
    
    /**
     * trans to QuestionQuestionToken
     */
    pub fn toQuestionQuestionToken(self) -> QuestionQuestionToken {
        for (questionQuestionToken in QuestionQuestionToken(__all_data__)) {
            if (questionQuestionToken.key_eq(self)) {
                return questionQuestionToken
            }
        }
    }
    
    /**
     * trans to AsteriskAsteriskToken
     */
    pub fn toAsteriskAsteriskToken(self) -> AsteriskAsteriskToken {
        for (asteriskAsteriskToken in AsteriskAsteriskToken(__all_data__)) {
            if (asteriskAsteriskToken.key_eq(self)) {
                return asteriskAsteriskToken
            }
        }
    }
    
    /**
     * trans to AsteriskToken
     */
    pub fn toAsteriskToken(self) -> AsteriskToken {
        for (asteriskToken in AsteriskToken(__all_data__)) {
            if (asteriskToken.key_eq(self)) {
                return asteriskToken
            }
        }
    }
    
    /**
     * trans to SlashToken
     */
    pub fn toSlashToken(self) -> SlashToken {
        for (slashToken in SlashToken(__all_data__)) {
            if (slashToken.key_eq(self)) {
                return slashToken
            }
        }
    }
    
    /**
     * trans to PercentToken
     */
    pub fn toPercentToken(self) -> PercentToken {
        for (percentToken in PercentToken(__all_data__)) {
            if (percentToken.key_eq(self)) {
                return percentToken
            }
        }
    }
    
    /**
     * trans to PlusToken
     */
    pub fn toPlusToken(self) -> PlusToken {
        for (plusToken in PlusToken(__all_data__)) {
            if (plusToken.key_eq(self)) {
                return plusToken
            }
        }
    }
    
    /**
     * trans to MinusToken
     */
    pub fn toMinusToken(self) -> MinusToken {
        for (minusToken in MinusToken(__all_data__)) {
            if (minusToken.key_eq(self)) {
                return minusToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanToken
     */
    pub fn toLessThanLessThanToken(self) -> LessThanLessThanToken {
        for (lessThanLessThanToken in LessThanLessThanToken(__all_data__)) {
            if (lessThanLessThanToken.key_eq(self)) {
                return lessThanLessThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanToken {
        for (greaterThanGreaterThanToken in GreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanToken(self) -> GreaterThanGreaterThanGreaterThanToken {
        for (greaterThanGreaterThanGreaterThanToken in GreaterThanGreaterThanGreaterThanToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanToken
            }
        }
    }
    
    /**
     * trans to LessThanToken
     */
    pub fn toLessThanToken(self) -> LessThanToken {
        for (lessThanToken in LessThanToken(__all_data__)) {
            if (lessThanToken.key_eq(self)) {
                return lessThanToken
            }
        }
    }
    
    /**
     * trans to LessThanEqualsToken
     */
    pub fn toLessThanEqualsToken(self) -> LessThanEqualsToken {
        for (lessThanEqualsToken in LessThanEqualsToken(__all_data__)) {
            if (lessThanEqualsToken.key_eq(self)) {
                return lessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanToken
     */
    pub fn toGreaterThanToken(self) -> GreaterThanToken {
        for (greaterThanToken in GreaterThanToken(__all_data__)) {
            if (greaterThanToken.key_eq(self)) {
                return greaterThanToken
            }
        }
    }
    
    /**
     * trans to GreaterThanEqualsToken
     */
    pub fn toGreaterThanEqualsToken(self) -> GreaterThanEqualsToken {
        for (greaterThanEqualsToken in GreaterThanEqualsToken(__all_data__)) {
            if (greaterThanEqualsToken.key_eq(self)) {
                return greaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to InstanceOfKeyword
     */
    pub fn toInstanceOfKeyword(self) -> InstanceOfKeyword {
        for (instanceOfKeyword in InstanceOfKeyword(__all_data__)) {
            if (instanceOfKeyword.key_eq(self)) {
                return instanceOfKeyword
            }
        }
    }
    
    /**
     * trans to InKeyword
     */
    pub fn toInKeyword(self) -> InKeyword {
        for (inKeyword in InKeyword(__all_data__)) {
            if (inKeyword.key_eq(self)) {
                return inKeyword
            }
        }
    }
    
    /**
     * trans to EqualsEqualsToken
     */
    pub fn toEqualsEqualsToken(self) -> EqualsEqualsToken {
        for (equalsEqualsToken in EqualsEqualsToken(__all_data__)) {
            if (equalsEqualsToken.key_eq(self)) {
                return equalsEqualsToken
            }
        }
    }
    
    /**
     * trans to EqualsEqualsEqualsToken
     */
    pub fn toEqualsEqualsEqualsToken(self) -> EqualsEqualsEqualsToken {
        for (equalsEqualsEqualsToken in EqualsEqualsEqualsToken(__all_data__)) {
            if (equalsEqualsEqualsToken.key_eq(self)) {
                return equalsEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsEqualsToken
     */
    pub fn toExclamationEqualsEqualsToken(self) -> ExclamationEqualsEqualsToken {
        for (exclamationEqualsEqualsToken in ExclamationEqualsEqualsToken(__all_data__)) {
            if (exclamationEqualsEqualsToken.key_eq(self)) {
                return exclamationEqualsEqualsToken
            }
        }
    }
    
    /**
     * trans to ExclamationEqualsToken
     */
    pub fn toExclamationEqualsToken(self) -> ExclamationEqualsToken {
        for (exclamationEqualsToken in ExclamationEqualsToken(__all_data__)) {
            if (exclamationEqualsToken.key_eq(self)) {
                return exclamationEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandToken
     */
    pub fn toAmpersandToken(self) -> AmpersandToken {
        for (ampersandToken in AmpersandToken(__all_data__)) {
            if (ampersandToken.key_eq(self)) {
                return ampersandToken
            }
        }
    }
    
    /**
     * trans to BarToken
     */
    pub fn toBarToken(self) -> BarToken {
        for (barToken in BarToken(__all_data__)) {
            if (barToken.key_eq(self)) {
                return barToken
            }
        }
    }
    
    /**
     * trans to CaretToken
     */
    pub fn toCaretToken(self) -> CaretToken {
        for (caretToken in CaretToken(__all_data__)) {
            if (caretToken.key_eq(self)) {
                return caretToken
            }
        }
    }
    
    /**
     * trans to AmpersandAmpersandToken
     */
    pub fn toAmpersandAmpersandToken(self) -> AmpersandAmpersandToken {
        for (ampersandAmpersandToken in AmpersandAmpersandToken(__all_data__)) {
            if (ampersandAmpersandToken.key_eq(self)) {
                return ampersandAmpersandToken
            }
        }
    }
    
    /**
     * trans to BarBarToken
     */
    pub fn toBarBarToken(self) -> BarBarToken {
        for (barBarToken in BarBarToken(__all_data__)) {
            if (barBarToken.key_eq(self)) {
                return barBarToken
            }
        }
    }
    
    /**
     * trans to EqualsToken
     */
    pub fn toEqualsToken(self) -> EqualsToken {
        for (equalsToken in EqualsToken(__all_data__)) {
            if (equalsToken.key_eq(self)) {
                return equalsToken
            }
        }
    }
    
    /**
     * trans to PlusEqualsToken
     */
    pub fn toPlusEqualsToken(self) -> PlusEqualsToken {
        for (plusEqualsToken in PlusEqualsToken(__all_data__)) {
            if (plusEqualsToken.key_eq(self)) {
                return plusEqualsToken
            }
        }
    }
    
    /**
     * trans to MinusEqualsToken
     */
    pub fn toMinusEqualsToken(self) -> MinusEqualsToken {
        for (minusEqualsToken in MinusEqualsToken(__all_data__)) {
            if (minusEqualsToken.key_eq(self)) {
                return minusEqualsToken
            }
        }
    }
    
    /**
     * trans to AsteriskEqualsToken
     */
    pub fn toAsteriskEqualsToken(self) -> AsteriskEqualsToken {
        for (asteriskEqualsToken in AsteriskEqualsToken(__all_data__)) {
            if (asteriskEqualsToken.key_eq(self)) {
                return asteriskEqualsToken
            }
        }
    }
    
    /**
     * trans to AsteriskAsteriskEqualsToken
     */
    pub fn toAsteriskAsteriskEqualsToken(self) -> AsteriskAsteriskEqualsToken {
        for (asteriskAsteriskEqualsToken in AsteriskAsteriskEqualsToken(__all_data__)) {
            if (asteriskAsteriskEqualsToken.key_eq(self)) {
                return asteriskAsteriskEqualsToken
            }
        }
    }
    
    /**
     * trans to SlashEqualsToken
     */
    pub fn toSlashEqualsToken(self) -> SlashEqualsToken {
        for (slashEqualsToken in SlashEqualsToken(__all_data__)) {
            if (slashEqualsToken.key_eq(self)) {
                return slashEqualsToken
            }
        }
    }
    
    /**
     * trans to PercentEqualsToken
     */
    pub fn toPercentEqualsToken(self) -> PercentEqualsToken {
        for (percentEqualsToken in PercentEqualsToken(__all_data__)) {
            if (percentEqualsToken.key_eq(self)) {
                return percentEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandEqualsToken
     */
    pub fn toAmpersandEqualsToken(self) -> AmpersandEqualsToken {
        for (ampersandEqualsToken in AmpersandEqualsToken(__all_data__)) {
            if (ampersandEqualsToken.key_eq(self)) {
                return ampersandEqualsToken
            }
        }
    }
    
    /**
     * trans to BarEqualsToken
     */
    pub fn toBarEqualsToken(self) -> BarEqualsToken {
        for (barEqualsToken in BarEqualsToken(__all_data__)) {
            if (barEqualsToken.key_eq(self)) {
                return barEqualsToken
            }
        }
    }
    
    /**
     * trans to CaretEqualsToken
     */
    pub fn toCaretEqualsToken(self) -> CaretEqualsToken {
        for (caretEqualsToken in CaretEqualsToken(__all_data__)) {
            if (caretEqualsToken.key_eq(self)) {
                return caretEqualsToken
            }
        }
    }
    
    /**
     * trans to LessThanLessThanEqualsToken
     */
    pub fn toLessThanLessThanEqualsToken(self) -> LessThanLessThanEqualsToken {
        for (lessThanLessThanEqualsToken in LessThanLessThanEqualsToken(__all_data__)) {
            if (lessThanLessThanEqualsToken.key_eq(self)) {
                return lessThanLessThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanGreaterThanEqualsToken
     */
    pub fn toGreaterThanGreaterThanGreaterThanEqualsToken(self) -> GreaterThanGreaterThanGreaterThanEqualsToken {
        for (greaterThanGreaterThanGreaterThanEqualsToken in GreaterThanGreaterThanGreaterThanEqualsToken(__all_data__)) {
            if (greaterThanGreaterThanGreaterThanEqualsToken.key_eq(self)) {
                return greaterThanGreaterThanGreaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to GreaterThanGreaterThanEqualsToken
     */
    pub fn toGreaterThanGreaterThanEqualsToken(self) -> GreaterThanGreaterThanEqualsToken {
        for (greaterThanGreaterThanEqualsToken in GreaterThanGreaterThanEqualsToken(__all_data__)) {
            if (greaterThanGreaterThanEqualsToken.key_eq(self)) {
                return greaterThanGreaterThanEqualsToken
            }
        }
    }
    
    /**
     * trans to BarBarEqualsToken
     */
    pub fn toBarBarEqualsToken(self) -> BarBarEqualsToken {
        for (barBarEqualsToken in BarBarEqualsToken(__all_data__)) {
            if (barBarEqualsToken.key_eq(self)) {
                return barBarEqualsToken
            }
        }
    }
    
    /**
     * trans to AmpersandAmpersandEqualsToken
     */
    pub fn toAmpersandAmpersandEqualsToken(self) -> AmpersandAmpersandEqualsToken {
        for (ampersandAmpersandEqualsToken in AmpersandAmpersandEqualsToken(__all_data__)) {
            if (ampersandAmpersandEqualsToken.key_eq(self)) {
                return ampersandAmpersandEqualsToken
            }
        }
    }
    
    /**
     * trans to QuestionQuestionEqualsToken
     */
    pub fn toQuestionQuestionEqualsToken(self) -> QuestionQuestionEqualsToken {
        for (questionQuestionEqualsToken in QuestionQuestionEqualsToken(__all_data__)) {
            if (questionQuestionEqualsToken.key_eq(self)) {
                return questionQuestionEqualsToken
            }
        }
    }
    
}

/**
 * This type consists of the following types: [NewKeyword, ImportKeyword]
 */
schema NewOrImportKeyword extends AstNode {
}

impl NewOrImportKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NewOrImportKeyword {
        for (newKeyword in NewKeyword(db)) {
            yield NewOrImportKeyword {
                id : newKeyword.id,
                kind : newKeyword.kind,
                parent_id : newKeyword.parent_id,
                parent_kind : newKeyword.parent_kind,
                index : newKeyword.index,
                location_id : newKeyword.location_id,
            }
        }
        for (importKeyword in ImportKeyword(db)) {
            yield NewOrImportKeyword {
                id : importKeyword.id,
                kind : importKeyword.kind,
                parent_id : importKeyword.parent_id,
                parent_kind : importKeyword.parent_kind,
                index : importKeyword.index,
                location_id : importKeyword.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to NewKeyword
     */
    pub fn toNewKeyword(self) -> NewKeyword {
        for (newKeyword in NewKeyword(__all_data__)) {
            if (newKeyword.key_eq(self)) {
                return newKeyword
            }
        }
    }
    
    /**
     * trans to ImportKeyword
     */
    pub fn toImportKeyword(self) -> ImportKeyword {
        for (importKeyword in ImportKeyword(__all_data__)) {
            if (importKeyword.key_eq(self)) {
                return importKeyword
            }
        }
    }
    
}

/**
 * This type consists of the following types: [VariableDeclarationList, Expression]
 */
schema ForInitializer extends AstNode {
}

impl ForInitializer {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ForInitializer {
        for (forInitializer in VariableDeclarationList(db)) {
            for (init in ForStatementInitializer(db)) {
                if (init.initializer_id = forInitializer.id) {
                    yield ForInitializer {
                        id : forInitializer.id,
                        kind : forInitializer.kind,
                        parent_id : forInitializer.parent_id,
                        parent_kind : forInitializer.parent_kind,
                        index : forInitializer.index,
                        location_id : forInitializer.location_id,
                    }
                }
            }
            for (init in ForInStatement(db)) {
                if (init.initializer_id = forInitializer.id) {
                    yield ForInitializer {
                        id : forInitializer.id,
                        kind : forInitializer.kind,
                        parent_id : forInitializer.parent_id,
                        parent_kind : forInitializer.parent_kind,
                        index : forInitializer.index,
                        location_id : forInitializer.location_id,
                    }
                }
            }
            for (init in ForOfStatement(db)) {
                if (init.initializer_id = forInitializer.id) {
                    yield ForInitializer {
                        id : forInitializer.id,
                        kind : forInitializer.kind,
                        parent_id : forInitializer.parent_id,
                        parent_kind : forInitializer.parent_kind,
                        index : forInitializer.index,
                        location_id : forInitializer.location_id,
                    }
                }
            }
        }
        for (forInitializer in Expression(db)) {
            for (init in ForStatementInitializer(db)) {
                if (init.initializer_id = forInitializer.id) {
                    yield ForInitializer {
                        id : forInitializer.id,
                        kind : forInitializer.kind,
                        parent_id : forInitializer.parent_id,
                        parent_kind : forInitializer.parent_kind,
                        index : forInitializer.index,
                        location_id : forInitializer.location_id,
                    }
                }
            }
            for (init in ForInStatement(db)) {
                if (init.initializer_id = forInitializer.id) {
                    yield ForInitializer {
                        id : forInitializer.id,
                        kind : forInitializer.kind,
                        parent_id : forInitializer.parent_id,
                        parent_kind : forInitializer.parent_kind,
                        index : forInitializer.index,
                        location_id : forInitializer.location_id,
                    }
                }
            }
            for (init in ForOfStatement(db)) {
                if (init.initializer_id = forInitializer.id) {
                    yield ForInitializer {
                        id : forInitializer.id,
                        kind : forInitializer.kind,
                        parent_id : forInitializer.parent_id,
                        parent_kind : forInitializer.parent_kind,
                        index : forInitializer.index,
                        location_id : forInitializer.location_id,
                    }
                }
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to VariableDeclarationList
     */
    pub fn toVariableDeclarationList(self) -> VariableDeclarationList {
        for (variableDeclarationList in VariableDeclarationList(__all_data__)) {
            if (variableDeclarationList.key_eq(self)) {
                return variableDeclarationList
            }
        }
    }
    
    /**
     * trans to Expression
     */
    pub fn toExpression(self) -> Expression {
        for (expression in Expression(__all_data__)) {
            if (expression.key_eq(self)) {
                return expression
            }
        }
    }
    
}

/**
 * This type consists of the following types: [ForInStatement, ForOfStatement]
 */
schema ForInOrOfStatement extends AstNode {
}

impl ForInOrOfStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ForInOrOfStatement {
        for (forInStatement in ForInStatement(db)) {
            yield ForInOrOfStatement {
                id : forInStatement.id,
                kind : forInStatement.kind,
                parent_id : forInStatement.parent_id,
                parent_kind : forInStatement.parent_kind,
                index : forInStatement.index,
                location_id : forInStatement.location_id,
            }
        }
        for (forOfStatement in ForOfStatement(db)) {
            yield ForInOrOfStatement {
                id : forOfStatement.id,
                kind : forOfStatement.kind,
                parent_id : forOfStatement.parent_id,
                parent_kind : forOfStatement.parent_kind,
                index : forOfStatement.index,
                location_id : forOfStatement.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to ForInStatement
     */
    pub fn toForInStatement(self) -> ForInStatement {
        for (forInStatement in ForInStatement(__all_data__)) {
            if (forInStatement.key_eq(self)) {
                return forInStatement
            }
        }
    }
    
    /**
     * trans to ForOfStatement
     */
    pub fn toForOfStatement(self) -> ForOfStatement {
        for (forOfStatement in ForOfStatement(__all_data__)) {
            if (forOfStatement.key_eq(self)) {
                return forOfStatement
            }
        }
    }
    
}

/**
 * This type consists of the following types: [ContinueStatement, BreakStatement]
 */
schema BreakOrContinueStatement extends AstNode {
}

impl BreakOrContinueStatement {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *BreakOrContinueStatement {
        for (continueStatement in ContinueStatement(db)) {
            yield BreakOrContinueStatement {
                id : continueStatement.id,
                kind : continueStatement.kind,
                parent_id : continueStatement.parent_id,
                parent_kind : continueStatement.parent_kind,
                index : continueStatement.index,
                location_id : continueStatement.location_id,
            }
        }
        for (breakStatement in BreakStatement(db)) {
            yield BreakOrContinueStatement {
                id : breakStatement.id,
                kind : breakStatement.kind,
                parent_id : breakStatement.parent_id,
                parent_kind : breakStatement.parent_kind,
                index : breakStatement.index,
                location_id : breakStatement.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to ContinueStatement
     */
    pub fn toContinueStatement(self) -> ContinueStatement {
        for (continueStatement in ContinueStatement(__all_data__)) {
            if (continueStatement.key_eq(self)) {
                return continueStatement
            }
        }
    }
    
    /**
     * trans to BreakStatement
     */
    pub fn toBreakStatement(self) -> BreakStatement {
        for (breakStatement in BreakStatement(__all_data__)) {
            if (breakStatement.key_eq(self)) {
                return breakStatement
            }
        }
    }
    
}

/**
 * This type consists of the following types: [CaseClause, DefaultClause]
 */
schema CaseOrDefaultClause extends AstNode {
}

impl CaseOrDefaultClause {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CaseOrDefaultClause {
        for (caseClause in CaseClause(db)) {
            yield CaseOrDefaultClause {
                id : caseClause.id,
                kind : caseClause.kind,
                parent_id : caseClause.parent_id,
                parent_kind : caseClause.parent_kind,
                index : caseClause.index,
                location_id : caseClause.location_id,
            }
        }
        for (defaultClause in DefaultClause(db)) {
            yield CaseOrDefaultClause {
                id : defaultClause.id,
                kind : defaultClause.kind,
                parent_id : defaultClause.parent_id,
                parent_kind : defaultClause.parent_kind,
                index : defaultClause.index,
                location_id : defaultClause.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to CaseClause
     */
    pub fn toCaseClause(self) -> CaseClause {
        for (caseClause in CaseClause(__all_data__)) {
            if (caseClause.key_eq(self)) {
                return caseClause
            }
        }
    }
    
    /**
     * trans to DefaultClause
     */
    pub fn toDefaultClause(self) -> DefaultClause {
        for (defaultClause in DefaultClause(__all_data__)) {
            if (defaultClause.key_eq(self)) {
                return defaultClause
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Identifier, StringLiteral, NumericLiteral]
 */
schema DeclarationStatementNameNodeType extends AstNode {
}

impl DeclarationStatementNameNodeType {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *DeclarationStatementNameNodeType {
        for (identifier in Identifier(db)) {
            yield DeclarationStatementNameNodeType {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (stringLiteral in StringLiteral(db)) {
            yield DeclarationStatementNameNodeType {
                id : stringLiteral.id,
                kind : stringLiteral.kind,
                parent_id : stringLiteral.parent_id,
                parent_kind : stringLiteral.parent_kind,
                index : stringLiteral.index,
                location_id : stringLiteral.location_id,
            }
        }
        for (numericLiteral in NumericLiteral(db)) {
            yield DeclarationStatementNameNodeType {
                id : numericLiteral.id,
                kind : numericLiteral.kind,
                parent_id : numericLiteral.parent_id,
                parent_kind : numericLiteral.parent_kind,
                index : numericLiteral.index,
                location_id : numericLiteral.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to StringLiteral
     */
    pub fn toStringLiteral(self) -> StringLiteral {
        for (stringLiteral in StringLiteral(__all_data__)) {
            if (stringLiteral.key_eq(self)) {
                return stringLiteral
            }
        }
    }
    
    /**
     * trans to NumericLiteral
     */
    pub fn toNumericLiteral(self) -> NumericLiteral {
        for (numericLiteral in NumericLiteral(__all_data__)) {
            if (numericLiteral.key_eq(self)) {
                return numericLiteral
            }
        }
    }
    
}

/**
 * This type consists of the following types: [InterfaceDeclaration, ClassLikeDeclaration]
 */
schema InterfaceOrClassLikeDeclaration extends AstNode {
}

impl InterfaceOrClassLikeDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *InterfaceOrClassLikeDeclaration {
        for (interfaceDeclaration in InterfaceDeclaration(db)) {
            yield InterfaceOrClassLikeDeclaration {
                id : interfaceDeclaration.id,
                kind : interfaceDeclaration.kind,
                parent_id : interfaceDeclaration.parent_id,
                parent_kind : interfaceDeclaration.parent_kind,
                index : interfaceDeclaration.index,
                location_id : interfaceDeclaration.location_id,
            }
        }
        for (classLikeDeclaration in ClassLikeDeclaration(db)) {
            yield InterfaceOrClassLikeDeclaration {
                id : classLikeDeclaration.id,
                kind : classLikeDeclaration.kind,
                parent_id : classLikeDeclaration.parent_id,
                parent_kind : classLikeDeclaration.parent_kind,
                index : classLikeDeclaration.index,
                location_id : classLikeDeclaration.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to InterfaceDeclaration
     */
    pub fn toInterfaceDeclaration(self) -> InterfaceDeclaration {
        for (interfaceDeclaration in InterfaceDeclaration(__all_data__)) {
            if (interfaceDeclaration.key_eq(self)) {
                return interfaceDeclaration
            }
        }
    }
    
    /**
     * trans to ClassLikeDeclaration
     */
    pub fn toClassLikeDeclaration(self) -> ClassLikeDeclaration {
        for (classLikeDeclaration in ClassLikeDeclaration(__all_data__)) {
            if (classLikeDeclaration.key_eq(self)) {
                return classLikeDeclaration
            }
        }
    }
    
}

/**
 * This type consists of the following types: [ExtendsKeyword, ImplementsKeyword]
 */
schema ExtendsOrImplementsKeyword extends AstNode {
}

impl ExtendsOrImplementsKeyword {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ExtendsOrImplementsKeyword {
        for (extendsKeyword in ExtendsKeyword(db)) {
            yield ExtendsOrImplementsKeyword {
                id : extendsKeyword.id,
                kind : extendsKeyword.kind,
                parent_id : extendsKeyword.parent_id,
                parent_kind : extendsKeyword.parent_kind,
                index : extendsKeyword.index,
                location_id : extendsKeyword.location_id,
            }
        }
        for (implementsKeyword in ImplementsKeyword(db)) {
            yield ExtendsOrImplementsKeyword {
                id : implementsKeyword.id,
                kind : implementsKeyword.kind,
                parent_id : implementsKeyword.parent_id,
                parent_kind : implementsKeyword.parent_kind,
                index : implementsKeyword.index,
                location_id : implementsKeyword.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to ExtendsKeyword
     */
    pub fn toExtendsKeyword(self) -> ExtendsKeyword {
        for (extendsKeyword in ExtendsKeyword(__all_data__)) {
            if (extendsKeyword.key_eq(self)) {
                return extendsKeyword
            }
        }
    }
    
    /**
     * trans to ImplementsKeyword
     */
    pub fn toImplementsKeyword(self) -> ImplementsKeyword {
        for (implementsKeyword in ImplementsKeyword(__all_data__)) {
            if (implementsKeyword.key_eq(self)) {
                return implementsKeyword
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Identifier, StringLiteral]
 */
schema ModuleName extends AstNode {
}

impl ModuleName {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ModuleName {
        for (identifier in Identifier(db)) {
            yield ModuleName {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (stringLiteral in StringLiteral(db)) {
            yield ModuleName {
                id : stringLiteral.id,
                kind : stringLiteral.kind,
                parent_id : stringLiteral.parent_id,
                parent_kind : stringLiteral.parent_kind,
                index : stringLiteral.index,
                location_id : stringLiteral.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to StringLiteral
     */
    pub fn toStringLiteral(self) -> StringLiteral {
        for (stringLiteral in StringLiteral(__all_data__)) {
            if (stringLiteral.key_eq(self)) {
                return stringLiteral
            }
        }
    }
    
}

/**
 * This type consists of the following types: [ModuleBlock, ModuleDeclaration, Identifier]
 */
schema ModuleBody extends AstNode {
}

impl ModuleBody {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ModuleBody {
        for (moduleBlock in ModuleBlock(db)) {
            yield ModuleBody {
                id : moduleBlock.id,
                kind : moduleBlock.kind,
                parent_id : moduleBlock.parent_id,
                parent_kind : moduleBlock.parent_kind,
                index : moduleBlock.index,
                location_id : moduleBlock.location_id,
            }
        }
        for (moduleDeclaration in ModuleDeclaration(db)) {
            yield ModuleBody {
                id : moduleDeclaration.id,
                kind : moduleDeclaration.kind,
                parent_id : moduleDeclaration.parent_id,
                parent_kind : moduleDeclaration.parent_kind,
                index : moduleDeclaration.index,
                location_id : moduleDeclaration.location_id,
            }
        }
        for (identifier in Identifier(db)) {
            yield ModuleBody {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to ModuleBlock
     */
    pub fn toModuleBlock(self) -> ModuleBlock {
        for (moduleBlock in ModuleBlock(__all_data__)) {
            if (moduleBlock.key_eq(self)) {
                return moduleBlock
            }
        }
    }
    
    /**
     * trans to ModuleDeclaration
     */
    pub fn toModuleDeclaration(self) -> ModuleDeclaration {
        for (moduleDeclaration in ModuleDeclaration(__all_data__)) {
            if (moduleDeclaration.key_eq(self)) {
                return moduleDeclaration
            }
        }
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
}

/**
 * This type consists of the following types: [ExternalModuleReference, Identifier, QualifiedName]
 */
schema ModuleReference extends AstNode {
}

impl ModuleReference {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ModuleReference {
        for (externalModuleReference in ExternalModuleReference(db)) {
            yield ModuleReference {
                id : externalModuleReference.id,
                kind : externalModuleReference.kind,
                parent_id : externalModuleReference.parent_id,
                parent_kind : externalModuleReference.parent_kind,
                index : externalModuleReference.index,
                location_id : externalModuleReference.location_id,
            }
        }
        for (identifier in Identifier(db)) {
            yield ModuleReference {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (qualifiedName in QualifiedName(db)) {
            yield ModuleReference {
                id : qualifiedName.id,
                kind : qualifiedName.kind,
                parent_id : qualifiedName.parent_id,
                parent_kind : qualifiedName.parent_kind,
                index : qualifiedName.index,
                location_id : qualifiedName.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to ExternalModuleReference
     */
    pub fn toExternalModuleReference(self) -> ExternalModuleReference {
        for (externalModuleReference in ExternalModuleReference(__all_data__)) {
            if (externalModuleReference.key_eq(self)) {
                return externalModuleReference
            }
        }
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to QualifiedName
     */
    pub fn toQualifiedName(self) -> QualifiedName {
        for (qualifiedName in QualifiedName(__all_data__)) {
            if (qualifiedName.key_eq(self)) {
                return qualifiedName
            }
        }
    }
    
}

/**
 * This type consists of the following types: [NamespaceImport, NamedImports]
 */
schema NamedImportBindings extends AstNode {
}

impl NamedImportBindings {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamedImportBindings {
        for (namespaceImport in NamespaceImport(db)) {
            yield NamedImportBindings {
                id : namespaceImport.id,
                kind : namespaceImport.kind,
                parent_id : namespaceImport.parent_id,
                parent_kind : namespaceImport.parent_kind,
                index : namespaceImport.index,
                location_id : namespaceImport.location_id,
            }
        }
        for (namedImports in NamedImports(db)) {
            yield NamedImportBindings {
                id : namedImports.id,
                kind : namedImports.kind,
                parent_id : namedImports.parent_id,
                parent_kind : namedImports.parent_kind,
                index : namedImports.index,
                location_id : namedImports.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to NamespaceImport
     */
    pub fn toNamespaceImport(self) -> NamespaceImport {
        for (namespaceImport in NamespaceImport(__all_data__)) {
            if (namespaceImport.key_eq(self)) {
                return namespaceImport
            }
        }
    }
    
    /**
     * trans to NamedImports
     */
    pub fn toNamedImports(self) -> NamedImports {
        for (namedImports in NamedImports(__all_data__)) {
            if (namedImports.key_eq(self)) {
                return namedImports
            }
        }
    }
    
}

/**
 * This type consists of the following types: [Identifier, StringLiteral]
 */
schema AssertionKey extends AstNode {
}

impl AssertionKey {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AssertionKey {
        for (identifier in Identifier(db)) {
            yield AssertionKey {
                id : identifier.id,
                kind : identifier.kind,
                parent_id : identifier.parent_id,
                parent_kind : identifier.parent_kind,
                index : identifier.index,
                location_id : identifier.location_id,
            }
        }
        for (stringLiteral in StringLiteral(db)) {
            yield AssertionKey {
                id : stringLiteral.id,
                kind : stringLiteral.kind,
                parent_id : stringLiteral.parent_id,
                parent_kind : stringLiteral.parent_kind,
                index : stringLiteral.index,
                location_id : stringLiteral.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to Identifier
     */
    pub fn toIdentifier(self) -> Identifier {
        for (identifier in Identifier(__all_data__)) {
            if (identifier.key_eq(self)) {
                return identifier
            }
        }
    }
    
    /**
     * trans to StringLiteral
     */
    pub fn toStringLiteral(self) -> StringLiteral {
        for (stringLiteral in StringLiteral(__all_data__)) {
            if (stringLiteral.key_eq(self)) {
                return stringLiteral
            }
        }
    }
    
}

/**
 * This type consists of the following types: [NamespaceExport, NamedExports]
 */
schema NamedExportBindings extends AstNode {
}

impl NamedExportBindings {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *NamedExportBindings {
        for (namespaceExport in NamespaceExport(db)) {
            yield NamedExportBindings {
                id : namespaceExport.id,
                kind : namespaceExport.kind,
                parent_id : namespaceExport.parent_id,
                parent_kind : namespaceExport.parent_kind,
                index : namespaceExport.index,
                location_id : namespaceExport.location_id,
            }
        }
        for (namedExports in NamedExports(db)) {
            yield NamedExportBindings {
                id : namedExports.id,
                kind : namedExports.kind,
                parent_id : namedExports.parent_id,
                parent_kind : namedExports.parent_kind,
                index : namedExports.index,
                location_id : namedExports.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to NamespaceExport
     */
    pub fn toNamespaceExport(self) -> NamespaceExport {
        for (namespaceExport in NamespaceExport(__all_data__)) {
            if (namespaceExport.key_eq(self)) {
                return namespaceExport
            }
        }
    }
    
    /**
     * trans to NamedExports
     */
    pub fn toNamedExports(self) -> NamedExports {
        for (namedExports in NamedExports(__all_data__)) {
            if (namedExports.key_eq(self)) {
                return namedExports
            }
        }
    }
    
}

/**
 * This type consists of the following types: [TopLevel, FunctionLikeDeclaration, ModuleDeclaration]
 */
schema AstNodeContainer extends AstNode {
}

impl AstNodeContainer {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *AstNodeContainer {
        for (topLevel in TopLevel(db)) {
            yield AstNodeContainer {
                id: topLevel.id,
                kind : topLevel.kind,
                parent_id : -1,  // TopLevel 无父节点，与index信息
                parent_kind : -1,
                index : -1,
                location_id : topLevel.location_id
            }
        }
        for (functionLikeDeclaration in FunctionLikeDeclaration(db)) {
            yield AstNodeContainer {
                id : functionLikeDeclaration.id,
                kind : functionLikeDeclaration.kind,
                parent_id : functionLikeDeclaration.parent_id,
                parent_kind : functionLikeDeclaration.parent_kind,
                index : functionLikeDeclaration.index,
                location_id : functionLikeDeclaration.location_id,
            }
        }
        for (moduleDeclaration in ModuleDeclaration(db)) {
            yield AstNodeContainer {
                id : moduleDeclaration.id,
                kind : moduleDeclaration.kind,
                parent_id : moduleDeclaration.parent_id,
                parent_kind : moduleDeclaration.parent_kind,
                index : moduleDeclaration.index,
                location_id : moduleDeclaration.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to TopLevel
     */
    pub fn toTopLevel(self) -> TopLevel {
        for (topLevel in TopLevel(__all_data__)) {
            if (topLevel.key_eq(self)) {
                return topLevel
            }
        }
    }
    
    /**
     * trans to FunctionLikeDeclaration
     */
    pub fn toFunctionLikeDeclaration(self) -> FunctionLikeDeclaration {
        for (functionLikeDeclaration in FunctionLikeDeclaration(__all_data__)) {
            if (functionLikeDeclaration.key_eq(self)) {
                return functionLikeDeclaration
            }
        }
    }
    
    /**
     * trans to ModuleDeclaration
     */
    pub fn toModuleDeclaration(self) -> ModuleDeclaration {
        for (moduleDeclaration in ModuleDeclaration(__all_data__)) {
            if (moduleDeclaration.key_eq(self)) {
                return moduleDeclaration
            }
        }
    }
    
}

/**
 * This type consists of the following types: [CallExpression, NewExpression, TaggedTemplateExpression, Decorator, EtsComponentExpression]
 */
schema CallLikeExpression extends AstNode {
}

impl CallLikeExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *CallLikeExpression {
        for (callExpression in CallExpression(db)) {
            yield CallLikeExpression {
                id : callExpression.id,
                kind : callExpression.kind,
                parent_id : callExpression.parent_id,
                parent_kind : callExpression.parent_kind,
                index : callExpression.index,
                location_id : callExpression.location_id,
            }
        }
        for (newExpression in NewExpression(db)) {
            yield CallLikeExpression {
                id : newExpression.id,
                kind : newExpression.kind,
                parent_id : newExpression.parent_id,
                parent_kind : newExpression.parent_kind,
                index : newExpression.index,
                location_id : newExpression.location_id,
            }
        }
        for (taggedTemplateExpression in TaggedTemplateExpression(db)) {
            yield CallLikeExpression {
                id : taggedTemplateExpression.id,
                kind : taggedTemplateExpression.kind,
                parent_id : taggedTemplateExpression.parent_id,
                parent_kind : taggedTemplateExpression.parent_kind,
                index : taggedTemplateExpression.index,
                location_id : taggedTemplateExpression.location_id,
            }
        }
        for (decorator in Decorator(db)) {
            yield CallLikeExpression {
                id : decorator.id,
                kind : decorator.kind,
                parent_id : decorator.parent_id,
                parent_kind : decorator.parent_kind,
                index : decorator.index,
                location_id : decorator.location_id,
            }
        }
        for (etsComponentExpression in EtsComponentExpression(db)) {
            yield CallLikeExpression {
                id : etsComponentExpression.id,
                kind : etsComponentExpression.kind,
                parent_id : etsComponentExpression.parent_id,
                parent_kind : etsComponentExpression.parent_kind,
                index : etsComponentExpression.index,
                location_id : etsComponentExpression.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to CallExpression
     */
    pub fn toCallExpression(self) -> CallExpression {
        for (callExpression in CallExpression(__all_data__)) {
            if (callExpression.key_eq(self)) {
                return callExpression
            }
        }
    }
    
    /**
     * trans to NewExpression
     */
    pub fn toNewExpression(self) -> NewExpression {
        for (newExpression in NewExpression(__all_data__)) {
            if (newExpression.key_eq(self)) {
                return newExpression
            }
        }
    }
    
    /**
     * trans to TaggedTemplateExpression
     */
    pub fn toTaggedTemplateExpression(self) -> TaggedTemplateExpression {
        for (taggedTemplateExpression in TaggedTemplateExpression(__all_data__)) {
            if (taggedTemplateExpression.key_eq(self)) {
                return taggedTemplateExpression
            }
        }
    }
    
    /**
     * trans to Decorator
     */
    pub fn toDecorator(self) -> Decorator {
        for (decorator in Decorator(__all_data__)) {
            if (decorator.key_eq(self)) {
                return decorator
            }
        }
    }
    
    /**
     * trans to EtsComponentExpression
     */
    pub fn toEtsComponentExpression(self) -> EtsComponentExpression {
        for (etsComponentExpression in EtsComponentExpression(__all_data__)) {
            if (etsComponentExpression.key_eq(self)) {
                return etsComponentExpression
            }
        }
    }
    
}

/**
 * This type consists of the following types: [CallExpression, NewExpression, TaggedTemplateExpression, Decorator, EtsComponentExpression, PropertyAccessExpression, ElementAccessExpression]
 */
schema MayInvokeExpression extends AstNode {
}

impl MayInvokeExpression {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *MayInvokeExpression {
        for (callExpression in CallExpression(db)) {
            yield MayInvokeExpression {
                id : callExpression.id,
                kind : callExpression.kind,
                parent_id : callExpression.parent_id,
                parent_kind : callExpression.parent_kind,
                index : callExpression.index,
                location_id : callExpression.location_id,
            }
        }
        for (newExpression in NewExpression(db)) {
            yield MayInvokeExpression {
                id : newExpression.id,
                kind : newExpression.kind,
                parent_id : newExpression.parent_id,
                parent_kind : newExpression.parent_kind,
                index : newExpression.index,
                location_id : newExpression.location_id,
            }
        }
        for (taggedTemplateExpression in TaggedTemplateExpression(db)) {
            yield MayInvokeExpression {
                id : taggedTemplateExpression.id,
                kind : taggedTemplateExpression.kind,
                parent_id : taggedTemplateExpression.parent_id,
                parent_kind : taggedTemplateExpression.parent_kind,
                index : taggedTemplateExpression.index,
                location_id : taggedTemplateExpression.location_id,
            }
        }
        for (decorator in Decorator(db)) {
            yield MayInvokeExpression {
                id : decorator.id,
                kind : decorator.kind,
                parent_id : decorator.parent_id,
                parent_kind : decorator.parent_kind,
                index : decorator.index,
                location_id : decorator.location_id,
            }
        }
        for (etsComponentExpression in EtsComponentExpression(db)) {
            yield MayInvokeExpression {
                id : etsComponentExpression.id,
                kind : etsComponentExpression.kind,
                parent_id : etsComponentExpression.parent_id,
                parent_kind : etsComponentExpression.parent_kind,
                index : etsComponentExpression.index,
                location_id : etsComponentExpression.location_id,
            }
        }
        for (propertyAccessExpression in PropertyAccessExpression(db)) {
            for (callSiteImplementation in CallSiteImplementation(db)) {
                if (propertyAccessExpression.id = callSiteImplementation.call_site_id) {
                    yield MayInvokeExpression {
                        id : propertyAccessExpression.id,
                        kind : propertyAccessExpression.kind,
                        parent_id : propertyAccessExpression.parent_id,
                        parent_kind : propertyAccessExpression.parent_kind,
                        index : propertyAccessExpression.index,
                        location_id : propertyAccessExpression.location_id,
                    }
                }
            }
        }
        for (elementAccessExpression in ElementAccessExpression(db)) {
            yield MayInvokeExpression {
                id : elementAccessExpression.id,
                kind : elementAccessExpression.kind,
                parent_id : elementAccessExpression.parent_id,
                parent_kind : elementAccessExpression.parent_kind,
                index : elementAccessExpression.index,
                location_id : elementAccessExpression.location_id,
            }
        }
    }

    /**
     * Get primary key.
     */
    pub fn getPrimaryKey(self) -> int {
        return self.id
    }
    
    /**
     * trans to CallExpression
     */
    pub fn toCallExpression(self) -> CallExpression {
        for (callExpression in CallExpression(__all_data__)) {
            if (callExpression.key_eq(self)) {
                return callExpression
            }
        }
    }
    
    /**
     * trans to NewExpression
     */
    pub fn toNewExpression(self) -> NewExpression {
        for (newExpression in NewExpression(__all_data__)) {
            if (newExpression.key_eq(self)) {
                return newExpression
            }
        }
    }
    
    /**
     * trans to TaggedTemplateExpression
     */
    pub fn toTaggedTemplateExpression(self) -> TaggedTemplateExpression {
        for (taggedTemplateExpression in TaggedTemplateExpression(__all_data__)) {
            if (taggedTemplateExpression.key_eq(self)) {
                return taggedTemplateExpression
            }
        }
    }
    
    /**
     * trans to Decorator
     */
    pub fn toDecorator(self) -> Decorator {
        for (decorator in Decorator(__all_data__)) {
            if (decorator.key_eq(self)) {
                return decorator
            }
        }
    }
    
    /**
     * trans to EtsComponentExpression
     */
    pub fn toEtsComponentExpression(self) -> EtsComponentExpression {
        for (etsComponentExpression in EtsComponentExpression(__all_data__)) {
            if (etsComponentExpression.key_eq(self)) {
                return etsComponentExpression
            }
        }
    }
    
    /**
     * trans to PropertyAccessExpression
     */
    pub fn toPropertyAccessExpression(self) -> PropertyAccessExpression {
        for (propertyAccessExpression in PropertyAccessExpression(__all_data__)) {
            if (propertyAccessExpression.key_eq(self)) {
                return propertyAccessExpression
            }
        }
    }
    
    /**
     * trans to ElementAccessExpression
     */
    pub fn toElementAccessExpression(self) -> ElementAccessExpression {
        for (elementAccessExpression in ElementAccessExpression(__all_data__)) {
            if (elementAccessExpression.key_eq(self)) {
                return elementAccessExpression
            }
        }
    }
    
}

database ArkTsDB {
    location : *LocationDO,
    text : *TextDO,
    number_of_lines : *NumberOfLinesDO,
    file : *FileDO,
    root_directory : *RootDirectoryDO,
    non_root_directory : *NonRootDirectoryDO,
    ast_node : *AstNodeDO,
    dot_token : *DotTokenDO,
    dot_dot_dot_token : *DotDotDotTokenDO,
    comma_token : *CommaTokenDO,
    question_dot_token : *QuestionDotTokenDO,
    less_than_token : *LessThanTokenDO,
    greater_than_token : *GreaterThanTokenDO,
    less_than_equals_token : *LessThanEqualsTokenDO,
    greater_than_equals_token : *GreaterThanEqualsTokenDO,
    equals_equals_token : *EqualsEqualsTokenDO,
    exclamation_equals_token : *ExclamationEqualsTokenDO,
    equals_equals_equals_token : *EqualsEqualsEqualsTokenDO,
    exclamation_equals_equals_token : *ExclamationEqualsEqualsTokenDO,
    equals_greater_than_token : *EqualsGreaterThanTokenDO,
    plus_token : *PlusTokenDO,
    minus_token : *MinusTokenDO,
    asterisk_token : *AsteriskTokenDO,
    asterisk_asterisk_token : *AsteriskAsteriskTokenDO,
    slash_token : *SlashTokenDO,
    percent_token : *PercentTokenDO,
    plus_plus_token : *PlusPlusTokenDO,
    minus_minus_token : *MinusMinusTokenDO,
    less_than_less_than_token : *LessThanLessThanTokenDO,
    greater_than_greater_than_token : *GreaterThanGreaterThanTokenDO,
    greater_than_greater_than_greater_than_token : *GreaterThanGreaterThanGreaterThanTokenDO,
    ampersand_token : *AmpersandTokenDO,
    bar_token : *BarTokenDO,
    caret_token : *CaretTokenDO,
    exclamation_token : *ExclamationTokenDO,
    tilde_token : *TildeTokenDO,
    ampersand_ampersand_token : *AmpersandAmpersandTokenDO,
    bar_bar_token : *BarBarTokenDO,
    question_token : *QuestionTokenDO,
    colon_token : *ColonTokenDO,
    question_question_token : *QuestionQuestionTokenDO,
    equals_token : *EqualsTokenDO,
    plus_equals_token : *PlusEqualsTokenDO,
    minus_equals_token : *MinusEqualsTokenDO,
    asterisk_equals_token : *AsteriskEqualsTokenDO,
    asterisk_asterisk_equals_token : *AsteriskAsteriskEqualsTokenDO,
    slash_equals_token : *SlashEqualsTokenDO,
    percent_equals_token : *PercentEqualsTokenDO,
    less_than_less_than_equals_token : *LessThanLessThanEqualsTokenDO,
    greater_than_greater_than_equals_token : *GreaterThanGreaterThanEqualsTokenDO,
    greater_than_greater_than_greater_than_equals_token : *GreaterThanGreaterThanGreaterThanEqualsTokenDO,
    ampersand_equals_token : *AmpersandEqualsTokenDO,
    bar_equals_token : *BarEqualsTokenDO,
    bar_bar_equals_token : *BarBarEqualsTokenDO,
    ampersand_ampersand_equals_token : *AmpersandAmpersandEqualsTokenDO,
    question_question_equals_token : *QuestionQuestionEqualsTokenDO,
    caret_equals_token : *CaretEqualsTokenDO,
    const_keyword : *ConstKeywordDO,
    default_keyword : *DefaultKeywordDO,
    export_keyword : *ExportKeywordDO,
    extends_keyword : *ExtendsKeywordDO,
    import_keyword : *ImportKeywordDO,
    in_keyword : *InKeywordDO,
    instance_of_keyword : *InstanceOfKeywordDO,
    new_keyword : *NewKeywordDO,
    implements_keyword : *ImplementsKeywordDO,
    private_keyword : *PrivateKeywordDO,
    protected_keyword : *ProtectedKeywordDO,
    public_keyword : *PublicKeywordDO,
    static_keyword : *StaticKeywordDO,
    abstract_keyword : *AbstractKeywordDO,
    accessor_keyword : *AccessorKeywordDO,
    asserts_keyword : *AssertsKeywordDO,
    assert_keyword : *AssertKeywordDO,
    async_keyword : *AsyncKeywordDO,
    await_keyword : *AwaitKeywordDO,
    declare_keyword : *DeclareKeywordDO,
    key_of_keyword : *KeyOfKeywordDO,
    out_keyword : *OutKeywordDO,
    readonly_keyword : *ReadonlyKeywordDO,
    unique_keyword : *UniqueKeywordDO,
    override_keyword : *OverrideKeywordDO,
    declaration : *DeclarationDO,
    declaration_name_node : *DeclarationNameNodeDO,
    expression : *ExpressionDO,
    unary_expression : *UnaryExpressionDO,
    update_expression : *UpdateExpressionDO,
    left_hand_side_expression : *LeftHandSideExpressionDO,
    member_expression : *MemberExpressionDO,
    primary_expression : *PrimaryExpressionDO,
    null_literal : *NullLiteralDO,
    true_literal : *TrueLiteralDO,
    false_literal : *FalseLiteralDO,
    literal_like_node : *LiteralLikeNodeDO,
    literal_expression : *LiteralExpressionDO,
    numeric_literal : *NumericLiteralDO,
    big_int_literal : *BigIntLiteralDO,
    string_literal : *StringLiteralDO,
    regular_expression_literal : *RegularExpressionLiteralDO,
    template_literal_like_node : *TemplateLiteralLikeNodeDO,
    no_substitution_template_literal : *NoSubstitutionTemplateLiteralDO,
    template_head : *TemplateHeadDO,
    template_middle : *TemplateMiddleDO,
    template_tail : *TemplateTailDO,
    template_span : *TemplateSpanDO,
    modifier : *ModifierDO,
    identifier : *IdentifierDO,
    private_identifier : *PrivateIdentifierDO,
    qualified_name : *QualifiedNameDO,
    computed_property_name : *ComputedPropertyNameDO,
    type_node : *TypeNodeDO,
    any_type : *AnyTypeDO,
    big_int_type : *BigIntTypeDO,
    boolean_type : *BooleanTypeDO,
    intrinsic_type : *IntrinsicTypeDO,
    never_type : *NeverTypeDO,
    number_type : *NumberTypeDO,
    object_type : *ObjectTypeDO,
    string_type : *StringTypeDO,
    symbol_type : *SymbolTypeDO,
    undefined_type : *UndefinedTypeDO,
    unknown_type : *UnknownTypeDO,
    void_type : *VoidTypeDO,
    type_parameter : *TypeParameterDO,
    type_parameter_constraint : *TypeParameterConstraintDO,
    type_parameter_default : *TypeParameterDefaultDO,
    parameter : *ParameterDO,
    parameter_dot_dot_dot_token : *ParameterDotDotDotTokenDO,
    parameter_question_token : *ParameterQuestionTokenDO,
    parameter_type_node : *ParameterTypeNodeDO,
    parameter_initializer : *ParameterInitializerDO,
    decorator : *DecoratorDO,
    object_literal_element : *ObjectLiteralElementDO,
    object_literal_element_name_node : *ObjectLiteralElementNameNodeDO,
    class_element : *ClassElementDO,
    class_element_name_node : *ClassElementNameNodeDO,
    type_element : *TypeElementDO,
    type_element_name_node : *TypeElementNameNodeDO,
    type_element_question_token : *TypeElementQuestionTokenDO,
    property_signature : *PropertySignatureDO,
    property_signature_question_token : *PropertySignatureQuestionTokenDO,
    property_signature_type_node : *PropertySignatureTypeNodeDO,
    property_declaration : *PropertyDeclarationDO,
    property_declaration_question_token : *PropertyDeclarationQuestionTokenDO,
    property_declaration_exclamation_token : *PropertyDeclarationExclamationTokenDO,
    property_declaration_type_node : *PropertyDeclarationTypeNodeDO,
    property_declaration_initializer : *PropertyDeclarationInitializerDO,
    method_signature : *MethodSignatureDO,
    method_declaration : *MethodDeclarationDO,
    method_declaration_body : *MethodDeclarationBodyDO,
    class_static_block_declaration : *ClassStaticBlockDeclarationDO,
    constructor : *ConstructorDO,
    constructor_body : *ConstructorBodyDO,
    get_accessor : *GetAccessorDO,
    get_accessor_body : *GetAccessorBodyDO,
    set_accessor : *SetAccessorDO,
    set_accessor_body : *SetAccessorBodyDO,
    call_signature : *CallSignatureDO,
    construct_signature : *ConstructSignatureDO,
    index_signature : *IndexSignatureDO,
    semicolon_class_element : *SemicolonClassElementDO,
    property_assignment : *PropertyAssignmentDO,
    shorthand_property_assignment : *ShorthandPropertyAssignmentDO,
    spread_assignment : *SpreadAssignmentDO,
    enum_member : *EnumMemberDO,
    enum_member_initializer : *EnumMemberInitializerDO,
    signature_declaration : *SignatureDeclarationDO,
    signature_declaration_name_node : *SignatureDeclarationNameNodeDO,
    signature_declaration_type_parameter : *SignatureDeclarationTypeParameterDO,
    signature_declaration_parameter : *SignatureDeclarationParameterDO,
    signature_declaration_type_node : *SignatureDeclarationTypeNodeDO,
    function_like_declaration : *FunctionLikeDeclarationDO,
    function_like_declaration_asterisk_token : *FunctionLikeDeclarationAsteriskTokenDO,
    function_like_declaration_question_token : *FunctionLikeDeclarationQuestionTokenDO,
    function_like_declaration_exclamation_token : *FunctionLikeDeclarationExclamationTokenDO,
    function_like_declaration_body : *FunctionLikeDeclarationBodyDO,
    class_like_declaration : *ClassLikeDeclarationDO,
    class_like_declaration_name_node : *ClassLikeDeclarationNameNodeDO,
    class_like_declaration_type_parameter : *ClassLikeDeclarationTypeParameterDO,
    class_like_declaration_member : *ClassLikeDeclarationMemberDO,
    this_type : *ThisTypeDO,
    type_predicate : *TypePredicateDO,
    type_predicate_asserts_modifier : *TypePredicateAssertsModifierDO,
    type_predicate_type_node : *TypePredicateTypeNodeDO,
    node_with_type_arguments : *NodeWithTypeArgumentsDO,
    node_with_type_arguments_type_argument : *NodeWithTypeArgumentsTypeArgumentDO,
    type_reference : *TypeReferenceDO,
    function_or_constructor_type : *FunctionOrConstructorTypeDO,
    function_type : *FunctionTypeDO,
    constructor_type : *ConstructorTypeDO,
    type_query : *TypeQueryDO,
    type_literal : *TypeLiteralDO,
    type_literal_member : *TypeLiteralMemberDO,
    array_type : *ArrayTypeDO,
    tuple_type : *TupleTypeDO,
    tuple_type_element : *TupleTypeElementDO,
    optional_type : *OptionalTypeDO,
    rest_type : *RestTypeDO,
    union_type : *UnionTypeDO,
    union_type_type_node : *UnionTypeTypeNodeDO,
    intersection_type : *IntersectionTypeDO,
    intersection_type_type_node : *IntersectionTypeTypeNodeDO,
    conditional_type : *ConditionalTypeDO,
    infer_type : *InferTypeDO,
    parenthesized_type : *ParenthesizedTypeDO,
    type_operator : *TypeOperatorDO,
    indexed_access_type : *IndexedAccessTypeDO,
    mapped_type : *MappedTypeDO,
    mapped_type_readonly_token : *MappedTypeReadonlyTokenDO,
    mapped_type_name_type_node : *MappedTypeNameTypeNodeDO,
    mapped_type_question_token : *MappedTypeQuestionTokenDO,
    mapped_type_type_node : *MappedTypeTypeNodeDO,
    literal_type : *LiteralTypeDO,
    named_tuple_member : *NamedTupleMemberDO,
    named_tuple_member_dot_dot_dot_token : *NamedTupleMemberDotDotDotTokenDO,
    named_tuple_member_question_token : *NamedTupleMemberQuestionTokenDO,
    template_literal_type_span : *TemplateLiteralTypeSpanDO,
    template_literal_type : *TemplateLiteralTypeDO,
    import_type_assertion_container : *ImportTypeAssertionContainerDO,
    import_type : *ImportTypeDO,
    import_type_qualifier : *ImportTypeQualifierDO,
    binding_element : *BindingElementDO,
    binding_element_property_name_node : *BindingElementPropertyNameNodeDO,
    binding_element_dot_dot_dot_token : *BindingElementDotDotDotTokenDO,
    binding_element_initializer : *BindingElementInitializerDO,
    object_binding_pattern : *ObjectBindingPatternDO,
    object_binding_pattern_element : *ObjectBindingPatternElementDO,
    array_binding_pattern : *ArrayBindingPatternDO,
    array_binding_pattern_element : *ArrayBindingPatternElementDO,
    this_expression : *ThisExpressionDO,
    super_expression : *SuperExpressionDO,
    import_expression : *ImportExpressionDO,
    array_literal_expression : *ArrayLiteralExpressionDO,
    array_literal_expression_element : *ArrayLiteralExpressionElementDO,
    object_literal_expression : *ObjectLiteralExpressionDO,
    object_literal_expression_property : *ObjectLiteralExpressionPropertyDO,
    property_access_expression : *PropertyAccessExpressionDO,
    property_access_expression_question_dot_token : *PropertyAccessExpressionQuestionDotTokenDO,
    element_access_expression : *ElementAccessExpressionDO,
    element_access_expression_question_dot_token : *ElementAccessExpressionQuestionDotTokenDO,
    call_expression : *CallExpressionDO,
    call_expression_question_dot_token : *CallExpressionQuestionDotTokenDO,
    call_expression_type_argument : *CallExpressionTypeArgumentDO,
    call_expression_argument : *CallExpressionArgumentDO,
    new_expression : *NewExpressionDO,
    new_expression_type_argument : *NewExpressionTypeArgumentDO,
    new_expression_argument : *NewExpressionArgumentDO,
    template_expression : *TemplateExpressionDO,
    tagged_template_expression : *TaggedTemplateExpressionDO,
    tagged_template_expression_type_argument : *TaggedTemplateExpressionTypeArgumentDO,
    type_assertion_expression : *TypeAssertionExpressionDO,
    parenthesized_expression : *ParenthesizedExpressionDO,
    function_expression : *FunctionExpressionDO,
    function_expression_name_node : *FunctionExpressionNameNodeDO,
    arrow_function : *ArrowFunctionDO,
    ets_component_expression : *EtsComponentExpressionDO,
    ets_component_expression_type_argument : *EtsComponentExpressionTypeArgumentDO,
    ets_component_expression_argument : *EtsComponentExpressionArgumentDO,
    ets_component_expression_body : *EtsComponentExpressionBodyDO,
    delete_expression : *DeleteExpressionDO,
    type_of_expression : *TypeOfExpressionDO,
    void_expression : *VoidExpressionDO,
    await_expression : *AwaitExpressionDO,
    prefix_unary_expression : *PrefixUnaryExpressionDO,
    postfix_unary_expression : *PostfixUnaryExpressionDO,
    binary_expression : *BinaryExpressionDO,
    conditional_expression : *ConditionalExpressionDO,
    yield_expression : *YieldExpressionDO,
    yield_expression_asterisk_token : *YieldExpressionAsteriskTokenDO,
    yield_expression_expression : *YieldExpressionExpressionDO,
    spread_element : *SpreadElementDO,
    class_expression : *ClassExpressionDO,
    omitted_expression : *OmittedExpressionDO,
    expression_with_type_arguments : *ExpressionWithTypeArgumentsDO,
    as_expression : *AsExpressionDO,
    non_null_expression : *NonNullExpressionDO,
    meta_property : *MetaPropertyDO,
    satisfies_expression : *SatisfiesExpressionDO,
    statement : *StatementDO,
    block : *BlockDO,
    block_statement : *BlockStatementDO,
    empty_statement : *EmptyStatementDO,
    variable_declaration : *VariableDeclarationDO,
    variable_declaration_exclamation_token : *VariableDeclarationExclamationTokenDO,
    variable_declaration_type_node : *VariableDeclarationTypeNodeDO,
    variable_declaration_initializer : *VariableDeclarationInitializerDO,
    variable_declaration_list : *VariableDeclarationListDO,
    variable_declaration_list_declaration : *VariableDeclarationListDeclarationDO,
    variable_statement : *VariableStatementDO,
    expression_statement : *ExpressionStatementDO,
    if_statement : *IfStatementDO,
    if_statement_else_statement : *IfStatementElseStatementDO,
    iteration_statement : *IterationStatementDO,
    do_statement : *DoStatementDO,
    while_statement : *WhileStatementDO,
    for_statement : *ForStatementDO,
    for_statement_initializer : *ForStatementInitializerDO,
    for_statement_condition : *ForStatementConditionDO,
    for_statement_incrementor : *ForStatementIncrementorDO,
    for_in_statement : *ForInStatementDO,
    for_of_statement : *ForOfStatementDO,
    for_of_statement_await_modifier : *ForOfStatementAwaitModifierDO,
    continue_statement : *ContinueStatementDO,
    continue_statement_label : *ContinueStatementLabelDO,
    break_statement : *BreakStatementDO,
    break_statement_label : *BreakStatementLabelDO,
    return_statement : *ReturnStatementDO,
    return_statement_expression : *ReturnStatementExpressionDO,
    with_statement : *WithStatementDO,
    case_block : *CaseBlockDO,
    case_block_clause : *CaseBlockClauseDO,
    case_clause : *CaseClauseDO,
    case_clause_statement : *CaseClauseStatementDO,
    default_clause : *DefaultClauseDO,
    default_clause_statement : *DefaultClauseStatementDO,
    switch_statement : *SwitchStatementDO,
    labeled_statement : *LabeledStatementDO,
    throw_statement : *ThrowStatementDO,
    try_statement : *TryStatementDO,
    try_statement_finally_block : *TryStatementFinallyBlockDO,
    catch_clause : *CatchClauseDO,
    catch_clause_variable_declaration : *CatchClauseVariableDeclarationDO,
    debugger_statement : *DebuggerStatementDO,
    declaration_statement : *DeclarationStatementDO,
    declaration_statement_name_node : *DeclarationStatementNameNodeDO,
    function_declaration : *FunctionDeclarationDO,
    function_declaration_name_node : *FunctionDeclarationNameNodeDO,
    function_declaration_body : *FunctionDeclarationBodyDO,
    class_declaration : *ClassDeclarationDO,
    class_declaration_name_node : *ClassDeclarationNameNodeDO,
    struct_declaration : *StructDeclarationDO,
    struct_declaration_name_node : *StructDeclarationNameNodeDO,
    heritage_clause : *HeritageClauseDO,
    heritage_clause_type_node : *HeritageClauseTypeNodeDO,
    interface_declaration : *InterfaceDeclarationDO,
    interface_declaration_type_parameter : *InterfaceDeclarationTypeParameterDO,
    interface_declaration_member : *InterfaceDeclarationMemberDO,
    type_alias_declaration : *TypeAliasDeclarationDO,
    type_alias_declaration_type_parameter : *TypeAliasDeclarationTypeParameterDO,
    enum_declaration : *EnumDeclarationDO,
    module_declaration : *ModuleDeclarationDO,
    module_declaration_body : *ModuleDeclarationBodyDO,
    module_block : *ModuleBlockDO,
    module_block_statement : *ModuleBlockStatementDO,
    namespace_export_declaration : *NamespaceExportDeclarationDO,
    external_module_reference : *ExternalModuleReferenceDO,
    import_equals_declaration : *ImportEqualsDeclarationDO,
    namespace_import : *NamespaceImportDO,
    import_specifier : *ImportSpecifierDO,
    import_specifier_property_name_node : *ImportSpecifierPropertyNameNodeDO,
    named_imports : *NamedImportsDO,
    import_clause : *ImportClauseDO,
    import_clause_name_node : *ImportClauseNameNodeDO,
    import_clause_named_bindings : *ImportClauseNamedBindingsDO,
    assert_entry : *AssertEntryDO,
    assert_clause : *AssertClauseDO,
    import_declaration : *ImportDeclarationDO,
    import_declaration_assert_clause : *ImportDeclarationAssertClauseDO,
    export_assignment : *ExportAssignmentDO,
    export_specifier : *ExportSpecifierDO,
    export_specifier_property_name_node : *ExportSpecifierPropertyNameNodeDO,
    named_exports : *NamedExportsDO,
    namespace_export : *NamespaceExportDO,
    export_declaration : *ExportDeclarationDO,
    export_declaration_export_clause : *ExportDeclarationExportClauseDO,
    export_declaration_module_specifier : *ExportDeclarationModuleSpecifierDO,
    export_declaration_assert_clause : *ExportDeclarationAssertClauseDO,
    top_level : *TopLevelDO,
    top_level_statement : *TopLevelStatementDO,
    ast_node_container_relation : *AstNodeContainerRelationDO,
    cfg_entry_node : *CfgEntryNodeDO,
    cfg_exit_node : *CfgExitNodeDO,
    symbol_ : *SymbolDO,
    ast_node_symbol : *AstNodeSymbolDO,
    shorthand_property_assignment_value_symbol : *ShorthandPropertyAssignmentValueSymbolDO,
    type_ : *TypeDO,
    ast_node_type : *AstNodeTypeDO,
    call_site_declaration : *CallSiteDeclarationDO,
    call_site_implementation : *CallSiteImplementationDO,
    comment : *CommentDO,
    ast_node_comment : *AstNodeCommentDO,
    metadata : *MetadataDO,
    ignored_path : *IgnoredPathDO
}

pub fn KindMap(name: string, kind: int) -> bool {
    [
        {"NumericLiteral", 8},
        {"BigIntLiteral", 9},
        {"StringLiteral", 10},
        {"JsxText", 11},
        {"JsxTextAllWhiteSpaces", 12},
        {"RegularExpressionLiteral", 13},
        {"NoSubstitutionTemplateLiteral", 14},
        {"TemplateHead", 15},
        {"TemplateMiddle", 16},
        {"TemplateTail", 17},
        {"OpenBraceToken", 18},
        {"CloseBraceToken", 19},
        {"OpenParenToken", 20},
        {"CloseParenToken", 21},
        {"OpenBracketToken", 22},
        {"CloseBracketToken", 23},
        {"DotToken", 24},
        {"DotDotDotToken", 25},
        {"SemicolonToken", 26},
        {"CommaToken", 27},
        {"QuestionDotToken", 28},
        {"LessThanToken", 29},
        {"LessThanSlashToken", 30},
        {"GreaterThanToken", 31},
        {"LessThanEqualsToken", 32},
        {"GreaterThanEqualsToken", 33},
        {"EqualsEqualsToken", 34},
        {"ExclamationEqualsToken", 35},
        {"EqualsEqualsEqualsToken", 36},
        {"ExclamationEqualsEqualsToken", 37},
        {"EqualsGreaterThanToken", 38},
        {"PlusToken", 39},
        {"MinusToken", 40},
        {"AsteriskToken", 41},
        {"AsteriskAsteriskToken", 42},
        {"SlashToken", 43},
        {"PercentToken", 44},
        {"PlusPlusToken", 45},
        {"MinusMinusToken", 46},
        {"LessThanLessThanToken", 47},
        {"GreaterThanGreaterThanToken", 48},
        {"GreaterThanGreaterThanGreaterThanToken", 49},
        {"AmpersandToken", 50},
        {"BarToken", 51},
        {"CaretToken", 52},
        {"ExclamationToken", 53},
        {"TildeToken", 54},
        {"AmpersandAmpersandToken", 55},
        {"BarBarToken", 56},
        {"QuestionToken", 57},
        {"ColonToken", 58},
        {"AtToken", 59},
        {"QuestionQuestionToken", 60},
        {"BacktickToken", 61},
        {"HashToken", 62},
        {"EqualsToken", 63},
        {"PlusEqualsToken", 64},
        {"MinusEqualsToken", 65},
        {"AsteriskEqualsToken", 66},
        {"AsteriskAsteriskEqualsToken", 67},
        {"SlashEqualsToken", 68},
        {"PercentEqualsToken", 69},
        {"LessThanLessThanEqualsToken", 70},
        {"GreaterThanGreaterThanEqualsToken", 71},
        {"GreaterThanGreaterThanGreaterThanEqualsToken", 72},
        {"AmpersandEqualsToken", 73},
        {"BarEqualsToken", 74},
        {"BarBarEqualsToken", 75},
        {"AmpersandAmpersandEqualsToken", 76},
        {"QuestionQuestionEqualsToken", 77},
        {"CaretEqualsToken", 78},
        {"Identifier", 79},
        {"PrivateIdentifier", 80},
        {"BreakKeyword", 81},
        {"CaseKeyword", 82},
        {"CatchKeyword", 83},
        {"ClassKeyword", 84},
        {"StructKeyword", 85},
        {"ConstKeyword", 86},
        {"ContinueKeyword", 87},
        {"DebuggerKeyword", 88},
        {"DefaultKeyword", 89},
        {"DeleteKeyword", 90},
        {"DoKeyword", 91},
        {"ElseKeyword", 92},
        {"EnumKeyword", 93},
        {"ExportKeyword", 94},
        {"ExtendsKeyword", 95},
        {"FalseKeyword", 96},
        {"FinallyKeyword", 97},
        {"ForKeyword", 98},
        {"FunctionKeyword", 99},
        {"IfKeyword", 100},
        {"ImportKeyword", 101},
        {"InKeyword", 102},
        {"InstanceOfKeyword", 103},
        {"NewKeyword", 104},
        {"NullKeyword", 105},
        {"ReturnKeyword", 106},
        {"SuperExpression", 107},
        {"SwitchKeyword", 108},
        {"ThisExpression", 109},
        {"ThrowKeyword", 110},
        {"TrueKeyword", 111},
        {"TryKeyword", 112},
        {"TypeOfKeyword", 113},
        {"VarKeyword", 114},
        {"VoidKeyword", 115},
        {"WhileKeyword", 116},
        {"WithKeyword", 117},
        {"ImplementsKeyword", 118},
        {"InterfaceKeyword", 119},
        {"LetKeyword", 120},
        {"PackageKeyword", 121},
        {"PrivateKeyword", 122},
        {"ProtectedKeyword", 123},
        {"PublicKeyword", 124},
        {"StaticKeyword", 125},
        {"YieldKeyword", 126},
        {"AbstractKeyword", 127},
        {"AccessorKeyword", 128},
        {"AsKeyword", 129},
        {"AssertsKeyword", 130},
        {"AssertKeyword", 131},
        {"AnyKeyword", 132},
        {"AsyncKeyword", 133},
        {"AwaitKeyword", 134},
        {"BooleanKeyword", 135},
        {"ConstructorKeyword", 136},
        {"DeclareKeyword", 137},
        {"GetKeyword", 138},
        {"InferKeyword", 139},
        {"IntrinsicKeyword", 140},
        {"IsKeyword", 141},
        {"KeyOfKeyword", 142},
        {"ModuleKeyword", 143},
        {"NamespaceKeyword", 144},
        {"NeverKeyword", 145},
        {"OutKeyword", 146},
        {"ReadonlyKeyword", 147},
        {"RequireKeyword", 148},
        {"NumberKeyword", 149},
        {"ObjectKeyword", 150},
        {"SatisfiesKeyword", 151},
        {"SetKeyword", 152},
        {"StringKeyword", 153},
        {"SymbolKeyword", 154},
        {"TypeKeyword", 155},
        {"UndefinedKeyword", 156},
        {"UniqueKeyword", 157},
        {"UnknownKeyword", 158},
        {"FromKeyword", 159},
        {"GlobalKeyword", 160},
        {"BigIntKeyword", 161},
        {"OverrideKeyword", 162},
        {"OfKeyword", 163},
        {"QualifiedName", 164},
        {"ComputedPropertyName", 165},
        {"TypeParameter", 166},
        {"Parameter", 167},
        {"Decorator", 168},
        {"PropertySignature", 169},
        {"PropertyDeclaration", 170},
        {"MethodSignature", 171},
        {"MethodDeclaration", 172},
        {"ClassStaticBlockDeclaration", 173},
        {"Constructor", 174},
        {"GetAccessor", 175},
        {"SetAccessor", 176},
        {"CallSignature", 177},
        {"ConstructSignature", 178},
        {"IndexSignature", 179},
        {"TypePredicate", 180},
        {"TypeReference", 181},
        {"FunctionType", 182},
        {"ConstructorType", 183},
        {"TypeQuery", 184},
        {"TypeLiteral", 185},
        {"ArrayType", 186},
        {"TupleType", 187},
        {"OptionalType", 188},
        {"RestType", 189},
        {"UnionType", 190},
        {"IntersectionType", 191},
        {"ConditionalType", 192},
        {"InferType", 193},
        {"ParenthesizedType", 194},
        {"ThisType", 195},
        {"TypeOperator", 196},
        {"IndexedAccessType", 197},
        {"MappedType", 198},
        {"LiteralType", 199},
        {"NamedTupleMember", 200},
        {"TemplateLiteralType", 201},
        {"TemplateLiteralTypeSpan", 202},
        {"ImportType", 203},
        {"ObjectBindingPattern", 204},
        {"ArrayBindingPattern", 205},
        {"BindingElement", 206},
        {"ArrayLiteralExpression", 207},
        {"ObjectLiteralExpression", 208},
        {"PropertyAccessExpression", 209},
        {"ElementAccessExpression", 210},
        {"CallExpression", 211},
        {"NewExpression", 212},
        {"TaggedTemplateExpression", 213},
        {"TypeAssertionExpression", 214},
        {"ParenthesizedExpression", 215},
        {"FunctionExpression", 216},
        {"ArrowFunction", 217},
        {"EtsComponentExpression", 218},
        {"DeleteExpression", 219},
        {"TypeOfExpression", 220},
        {"VoidExpression", 221},
        {"AwaitExpression", 222},
        {"PrefixUnaryExpression", 223},
        {"PostfixUnaryExpression", 224},
        {"BinaryExpression", 225},
        {"ConditionalExpression", 226},
        {"TemplateExpression", 227},
        {"YieldExpression", 228},
        {"SpreadElement", 229},
        {"ClassExpression", 230},
        {"OmittedExpression", 231},
        {"ExpressionWithTypeArguments", 232},
        {"AsExpression", 233},
        {"NonNullExpression", 234},
        {"MetaProperty", 235},
        {"SyntheticExpression", 236},
        {"SatisfiesExpression", 237},
        {"TemplateSpan", 238},
        {"SemicolonClassElement", 239},
        {"Block", 240},
        {"EmptyStatement", 241},
        {"VariableStatement", 242},
        {"ExpressionStatement", 243},
        {"IfStatement", 244},
        {"DoStatement", 245},
        {"WhileStatement", 246},
        {"ForStatement", 247},
        {"ForInStatement", 248},
        {"ForOfStatement", 249},
        {"ContinueStatement", 250},
        {"BreakStatement", 251},
        {"ReturnStatement", 252},
        {"WithStatement", 253},
        {"SwitchStatement", 254},
        {"LabeledStatement", 255},
        {"ThrowStatement", 256},
        {"TryStatement", 257},
        {"DebuggerStatement", 258},
        {"VariableDeclaration", 259},
        {"VariableDeclarationList", 260},
        {"FunctionDeclaration", 261},
        {"ClassDeclaration", 262},
        {"StructDeclaration", 263},
        {"InterfaceDeclaration", 264},
        {"TypeAliasDeclaration", 265},
        {"EnumDeclaration", 266},
        {"ModuleDeclaration", 267},
        {"ModuleBlock", 268},
        {"CaseBlock", 269},
        {"NamespaceExportDeclaration", 270},
        {"ImportEqualsDeclaration", 271},
        {"ImportDeclaration", 272},
        {"ImportClause", 273},
        {"NamespaceImport", 274},
        {"NamedImports", 275},
        {"ImportSpecifier", 276},
        {"ExportAssignment", 277},
        {"ExportDeclaration", 278},
        {"NamedExports", 279},
        {"NamespaceExport", 280},
        {"ExportSpecifier", 281},
        {"MissingDeclaration", 282},
        {"ExternalModuleReference", 283},
        {"JsxElement", 284},
        {"JsxSelfClosingElement", 285},
        {"JsxOpeningElement", 286},
        {"JsxClosingElement", 287},
        {"JsxFragment", 288},
        {"JsxOpeningFragment", 289},
        {"JsxClosingFragment", 290},
        {"JsxAttribute", 291},
        {"JsxAttributes", 292},
        {"JsxSpreadAttribute", 293},
        {"JsxExpression", 294},
        {"CaseClause", 295},
        {"DefaultClause", 296},
        {"HeritageClause", 297},
        {"CatchClause", 298},
        {"AssertClause", 299},
        {"AssertEntry", 300},
        {"ImportTypeAssertionContainer", 301},
        {"PropertyAssignment", 302},
        {"ShorthandPropertyAssignment", 303},
        {"SpreadAssignment", 304},
        {"EnumMember", 305},
        {"UnparsedPrologue", 306},
        {"UnparsedPrepend", 307},
        {"UnparsedText", 308},
        {"UnparsedInternalText", 309},
        {"UnparsedSyntheticReference", 310},
        {"SourceFile", 311},
        {"Bundle", 312},
        {"UnparsedSource", 313},
        {"InputFiles", 314},
        {"JSDocTypeExpression", 315},
        {"JSDocNameReference", 316},
        {"JSDocMemberName", 317},
        {"JSDocAllType", 318},
        {"JSDocUnknownType", 319},
        {"JSDocNullableType", 320},
        {"JSDocNonNullableType", 321},
        {"JSDocOptionalType", 322},
        {"JSDocFunctionType", 323},
        {"JSDocVariadicType", 324},
        {"JSDocNamepathType", 325},
        {"JSDocComment", 326},
        {"JSDocText", 327},
        {"JSDocTypeLiteral", 328},
        {"JSDocSignature", 329},
        {"JSDocLink", 330},
        {"JSDocLinkCode", 331},
        {"JSDocLinkPlain", 332},
        {"JSDocTag", 333},
        {"JSDocAugmentsTag", 334},
        {"JSDocImplementsTag", 335},
        {"JSDocAuthorTag", 336},
        {"JSDocDeprecatedTag", 337},
        {"JSDocClassTag", 338},
        {"JSDocPublicTag", 339},
        {"JSDocPrivateTag", 340},
        {"JSDocProtectedTag", 341},
        {"JSDocReadonlyTag", 342},
        {"JSDocOverrideTag", 343},
        {"JSDocCallbackTag", 344},
        {"JSDocEnumTag", 345},
        {"JSDocParameterTag", 346},
        {"JSDocReturnTag", 347},
        {"JSDocThisTag", 348},
        {"JSDocTypeTag", 349},
        {"JSDocTemplateTag", 350},
        {"JSDocTypedefTag", 351},
        {"JSDocSeeTag", 352},
        {"JSDocPropertyTag", 353},
        {"SyntaxList", 354},
        {"NotEmittedStatement", 355},
        {"PartiallyEmittedExpression", 356},
        {"CommaListExpression", 357},
        {"MergeDeclarationMarker", 358},
        {"EndOfDeclarationMarker", 359},
        {"SyntheticReferenceExpression", 360}
    ]
}

pub fn getRealKind(kind: int) -> string {
    for (res in string::__undetermined_all__()) {
        if (KindMap(res, kind)) {
            return res
        }
    }
}