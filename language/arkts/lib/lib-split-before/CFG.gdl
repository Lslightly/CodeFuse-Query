/**
 * A synthetic control flow node, which is an entry or exit node.
 */
schema SyntheticCfgNode {
    @primary id: int
}

impl SyntheticCfgNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *SyntheticCfgNode {
        for (cfgEntryNode in CfgEntryNode(db)) {
            yield SyntheticCfgNode {id : cfgEntryNode.id}
        }
        for (cfgExitNode in CfgExitNode(db)) {
            yield SyntheticCfgNode {id : cfgExitNode.id}
        }
    }

    pub fn getAstNode(self) -> AstNode {
        for (cfgEntryNode in CfgEntryNode(__all_data__)) {
            if (cfgEntryNode.key_eq(self)) {
                let (node = cfgEntryNode.getAstNode().to<AstNode>()) {
                    return node
                }
            }
        }
        for (cfgExitNode in CfgExitNode(__all_data__)) {
            if (cfgExitNode.key_eq(self)) {
                let (node = cfgExitNode.getAstNode().to<AstNode>()) {
                    return node
                }
            }
        }
    }
}

/*
 * This class represent control flow node, all ast nodes are
 * control flow nodes.
 * TODO:: ModeleDeclaretion ModuleBlock记得添加succ last，以及first, 若需要则和classDeclaration一起处理
 */
schema ControlFlowNode {
    @primary id: int
}

impl ControlFlowNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *ControlFlowNode {
        for (node in AstNode(db)) {
            yield ControlFlowNode {id: node.id}
        }
        for (node in SyntheticCfgNode(db)) {
            yield ControlFlowNode {id: node.id}
        }
    }

    pub fn toAstNode(self) -> AstNode {
        for (node in AstNode(__all_data__)) {
            if (node.key_eq(self)) {
                return node
            }
        }
        for (node in SyntheticCfgNode(__all_data__)) {
            if (node.key_eq(self)) {
                return node.getAstNode()
            }
        }
    }

    pub fn getText(self) -> string {
        return self.toAstNode().getText()
    }

    pub fn getKindName(self) -> string {
        return self.toAstNode().getKindName()
    }

    pub fn getSymbol(self) -> Symbol {
        return self.toAstNode().getSymbol()
    }

    /**
     * Get the location of this control flow node.
     */
     pub fn getLocation(self) -> Location {
         return self.toAstNode().getLocation()
     }

    /**
     * Get the file of this control flow node.
     */
    pub fn getFile(self) -> File {
        return self.getLocation().getFile()
    }

    /**
     * Get the relative path of this control flow node.
     */
    pub fn getRelativePath(self) -> string {
        return self.getFile().getRelativePath()
    }

    /**
     * Get an immediate successor of this node.
     */
    pub fn getSuccessor(self) -> *ControlFlowNode {
        yield succ(self, __all_data__)
    }

    /**
     * Gets the successor of this node, and query successors recursively
     */
    pub fn getSuccessorRecursive(self) -> *ControlFlowNode {
        yield self.getSuccessor()
        for (tmpCFN in ControlFlowNode(__all_data__)) {
            if (tmpCFN in self.getSuccessor()) {
                yield tmpCFN.getSuccessorRecursive()
            }
        }
    }

    /**
     * Get an immediate predecessor of this node.
     */
    pub fn getPredecessor(self) -> *ControlFlowNode {
        for (predecessor in ControlFlowNode(__all_data__)) {
            if (self in predecessor.getSuccessor()) {
                yield predecessor
            }
        }
    }

    /**
     * Get an immediate successor of this node with the given
     * type of Completion.
     */
    pub fn getSuccessorWithCompletion(self, c: Completion) -> *ControlFlowNode {
        yield succ(self, c)
    }

    /**
     * Get the count of immediate successor nodes.
     */
    pub fn getSuccessorCount(self) -> int {
        return self.getSuccessor().len()
    }

    /**
     * Get the count of immediate predecessor nodes/
     */
    pub fn getPredecessorCount(self) -> int {
        return self.getPredecessor().len()
    }

    /**
     * Get the basic block that contains this node.
     */
    pub fn getBasicBlock(self) -> BasicBlock {
        for (basicBlock in BasicBlock(__all_data__)) {
            if (self in basicBlock.getNode()) {
                return basicBlock
            }
        }
    }

    pub fn isSyntheticNode(self) -> bool {
        for (syntheticCfgNode in SyntheticCfgNode(__all_data__)) {
            if (self.key_eq(syntheticCfgNode)) {
                return true
            }
        }
    }

    pub fn isEntryNode(self) -> bool {
        for (cfgEntryNode in CfgEntryNode(__all_data__)) {
            if (self.key_eq(cfgEntryNode)) {
                return true
            }
        }
    }

    pub fn isExitNode(self) -> bool {
        for (cfgExitNode in CfgExitNode(__all_data__)) {
            if (self.key_eq(cfgExitNode)) {
                return true
            }
        }
    }

    pub fn isAstNode(self) -> bool {
        for (node in AstNode(__all_data__)) {
            if (self.key_eq(node)) {
                return true
            }
        }
    }
}

schema Completion {
    @primary id: int,
    name: string
}

impl Completion {
    @data_constraint
    @inline
    pub fn __all__() -> *Completion {
        yield Completion {id: 1001, name: "NormalCompletion"}
    	yield Completion {id: 1101, name: "ReturnCompletion"}
        // BooleanCompletion
        yield Completion {id: 1201, name: "BooleanCompletion"}
        yield Completion {id: 1202, name: "TrueBooleanCompletion"}
        yield Completion {id: 1203, name: "FalseBooleanCompletion"}
        // end BooleanCompletion
        yield Completion {id: 1301, name: "BreakCompletion"}
        yield Completion {id: 1401, name: "YieldCompletion"}
        yield Completion {id: 1501, name: "ContinueCompletion"}
        yield Completion {id: 1601, name: "ThrowCompletion"}
    }

    pub fn getValue(self) -> int {
        return self.id
    }

    pub fn getName(self) -> string {
        return self.name
    }
}

schema NormalCompletion extends Completion {
}

impl NormalCompletion {
    @data_constraint
    pub fn __all__() -> *NormalCompletion {
        yield NormalCompletion {id: 1001, name: "NormalCompletion"}
    }
}

schema ReturnCompletion extends Completion {
}

impl ReturnCompletion {
    @data_constraint
    pub fn __all__() -> *ReturnCompletion {
        yield ReturnCompletion {id: 1101, name: "ReturnCompletion"}
    }
}

schema BooleanCompletion extends Completion {
}

impl BooleanCompletion {
    @data_constraint
    pub fn __all__() -> *BooleanCompletion {
        yield BooleanCompletion {id: 1201, name: "BooleanCompletion"}
        yield BooleanCompletion {id: 1202, name: "TrueBooleanCompletion"}
        yield BooleanCompletion {id: 1203, name: "FalseBooleanCompletion"}
    }

    pub fn isTrue(self) -> bool {
        if (self.id = 1202) {
            return true
        }
    }

    pub fn isFalse(self) -> bool {
        if (self.id = 1203) {
            return true
        }
    }

    pub fn getValueName(self) -> string {
        if (self.isTrue()) {
            return "true"
        }
        if (!self.isTrue()) {
            return "false"
        }
    }
}

schema TrueBooleanCompletion extends BooleanCompletion {
}

impl TrueBooleanCompletion {
    @data_constraint
    pub fn __all__() -> *TrueBooleanCompletion {
        yield TrueBooleanCompletion {id: 1202, name: "TrueBooleanCompletion"}
    }
}

schema FalseBooleanCompletion extends BooleanCompletion {
}

impl FalseBooleanCompletion {
    @data_constraint
    pub fn __all__() -> *FalseBooleanCompletion {
        yield FalseBooleanCompletion {id: 1203, name: "FalseBooleanCompletion"}
    }
}

schema BreakCompletion extends Completion {
}

impl BreakCompletion {
    @data_constraint
    pub fn __all__() -> *BreakCompletion {
        yield BreakCompletion {id: 1301, name: "BreakCompletion"}
    }
}

/**
 *  FIXME: YieldCompletion should carry a NormalCompletion
 *  or a BooleanCompletion, but we don't have convenient
 *  representation for now
 */
schema YieldCompletion extends Completion {
}

impl YieldCompletion {
    @data_constraint
    pub fn __all__() -> *YieldCompletion {
        yield YieldCompletion {id: 1401, name: "YieldCompletion"}
    }
}

schema ContinueCompletion extends Completion {
}

impl ContinueCompletion {
    @data_constraint
    pub fn __all__() -> *ContinueCompletion {
        yield ContinueCompletion {id: 1501, name: "ContinueCompletion"}
    }
}

schema ThrowCompletion extends Completion {
}

impl ThrowCompletion {
    @data_constraint
    pub fn __all__() -> *ThrowCompletion {
        yield ThrowCompletion {id: 1601, name: "ThrowCompletion"}
    }
}

pub fn isNormalCompletion(c: Completion) -> bool {
    if(c.name = "NormalCompletion") {
        return true
    }
}

pub fn isReturnCompletion(c: Completion) -> bool {
    if (c.name = "ReturnCompletion") {
        return true
    }
}

pub fn isBooleanCompletion(c: Completion) -> bool {
    if (c.name = "BooleanCompletion" || isTrueBooleanCompletion(c) || isFalseBooleanCompletion(c)) {
        return true
    }
}

pub fn isTrueBooleanCompletion(c: Completion) -> bool {
    if (c.name = "TrueBooleanCompletion") {
        return true
    }
}

pub fn isFalseBooleanCompletion(c: Completion) -> bool {
    if (c.name = "FalseBooleanCompletion") {
        return true
    }
}

pub fn isBreakCompletion(c: Completion) -> bool {
    if (c.name = "BreakCompletion") {
        return true
    }
}

pub fn isYieldCompletion(c: Completion) -> bool {
    if (c.name = "YieldCompletion") {
        return true
    }
}

pub fn isContinueCompletion(c: Completion) -> bool {
    if (c.name = "ContinueCompletion") {
        return true
    }
}

pub fn isThrowCompletion(c: Completion) -> bool {
    if(c.name = "YieldCompletion") {
        return true
    }
}


schema PostOrderNode extends ControlFlowNode {
}

impl PostOrderNode {
    @data_constraint
    @inline
    pub fn __all__(db: ArkTsDB) -> *PostOrderNode {
        for (controlFlowNode in ControlFlowNode(db)) {
            if (isPostOrderNode(controlFlowNode)) {
                yield PostOrderNode {
                    id : controlFlowNode.id
                }
            }
        }
    }

    // Gets all child node
    pub fn getAllChild(self) -> *ControlFlowNode {
        for (i in int::__undetermined_all__()) {
            yield self.getChildNode(i)
        }
    }

    /**
     * Gets child node with index, start from 0.
     */
    pub fn getChildNode(self, index: int) -> ControlFlowNode {
        for (cn in ControlFlowNode(__all_data__)) {
            for (objectLiteralExpression in ObjectLiteralExpression(__all_data__)) {
                if (objectLiteralExpression.key_eq(self)) {
                    if (cn.key_eq(objectLiteralExpression.getIthProperty(index))) {
                        return cn
                    }
                }
            }
            for (propertyAssignment in PropertyAssignment(__all_data__)) {
                if (propertyAssignment.key_eq(self)) {
                    if (cn.key_eq(propertyAssignment.getNameNode())) {
                        if (index = 0) {
                            return cn
                        }
                    }
                    if (cn.key_eq(propertyAssignment.getInitializer())) {
                        if (index = 1) {
                            return cn
                        }
                    }
                }
            }
            for (computedPropertyName in ComputedPropertyName(__all_data__)) {
                if (computedPropertyName.key_eq(self)) {
                    if (cn.key_eq(computedPropertyName.getExpression())) {
                        if (index = 0) {
                            return cn
                        }
                    }
                }
            }
            for (shorthandPropertyAssignment in ShorthandPropertyAssignment(__all_data__)) {
                if (shorthandPropertyAssignment.key_eq(self)) {
                    if (cn.key_eq(shorthandPropertyAssignment.getNameNode())) {
                        if (index = 0) {
                            return cn
                        }
                    }
                }
            }
            for (spreadAssignment in SpreadAssignment(__all_data__)) {
                if (spreadAssignment.key_eq(self)) {
                    if (cn.key_eq(spreadAssignment.getExpression())) {
                        if (index = 0) {
                            return cn
                        }
                    }
                }
            }
            for (parameter in Parameter(__all_data__)) {
                if (parameter.key_eq(self)) {
                    if (parameter.hasInitializer()) {
                        if (cn.key_eq(parameter.getInitializer())) {
                            if (index = 0) {
                                return cn
                            }
                        }
                        if (cn.key_eq(parameter.getNameNode())) {
                            if (index = 1) {
                                return cn
                            }
                        }
                    }
                    if (!parameter.hasInitializer()) {
                        if (cn.key_eq(parameter.getNameNode())) {
                            if (index = 0) {
                                return cn
                            }
                        }
                    }
                }
            }

            // UnaryExpression's sub class
            for (tae in TypeAssertionExpression(__all_data__)) {
                if (self.key_eq(tae)) {
                    if (index = 0) {
                        if (cn.key_eq(tae.getExpression())) {
                            return cn
                        }
                    }
                }
            }
            for (de in DeleteExpression(__all_data__)) {
                if (self.key_eq(de)) {
                    if (index = 0) {
                        if (cn.key_eq(de.getExpression())) {
                            return cn
                        }
                    }
                }
            }
            for (toe in TypeOfExpression(__all_data__)) {
                if (self.key_eq(toe)) {
                    if (index = 0) {
                        if (cn.key_eq(toe.getExpression())) {
                            return cn
                        }
                    }
                }
            }
            for (ve in VoidExpression(__all_data__)) {
                if (self.key_eq(ve)) {
                    if (index = 0) {
                        if (cn.key_eq(ve.getExpression())) {
                            return cn
                        }
                    }
                }
            }
            for (awaitExpr in AwaitExpression(__all_data__)) {
                if (self.key_eq(awaitExpr)) {
                    if (index = 0) {
                        if (cn.key_eq(awaitExpr.getExpression())) {
                            return cn
                        }
                    }
                }
            }
            for (prefixUE in PrefixUnaryExpression(__all_data__)) {
                if (self.key_eq(prefixUE)) {
                    if (index = 0) {
                        if (cn.key_eq(prefixUE.getOperand())) {
                            return cn
                        }
                    }
                }
            }
            for (postfixUE in PostfixUnaryExpression(__all_data__)) {
                if (self.key_eq(postfixUE)) {
                    if (index = 0) {
                        if (cn.key_eq(postfixUE.getOperand())) {
                            return cn
                        }
                    }
                }
            }
            for (nne in NonNullExpression(__all_data__)) {
                if (self.key_eq(nne)) {
                    if (index = 0) {
                        if (cn.key_eq(nne.getExpression())) {
                            return cn
                        }
                    }
                }
            }

            for (ce in CallExpression(__all_data__)) {
                if (self.key_eq(ce)) {
                    if (index = 0) {
                        if (cn.key_eq(ce.getExpression())) {
                            return cn
                        }
                    }
                    for (argIndex in int::__undetermined_all__()) {
                        if (cn.key_eq(ce.getIthArgument(argIndex))) {
                            if (index = argIndex + 1) {
                                return cn
                            }
                        }
                    }
                }
            }

            for (ae in AccessExpression(__all_data__)) {
                if (self.key_eq(ae)) {
                    if (index = 0) {
                        if (cn.key_eq(ae.getExpression())) {
                            return cn
                        }
                    }
                    if (index = 1) {
                        if (cn.key_eq(ae.getPropertyExpression())) {
                            return cn
                        }
                    }
                }
            }

            for (ale in ArrayLiteralExpression(__all_data__)) {
                if (self.key_eq(ale)) {
                    if (cn.key_eq(ale.getIthElement(index))) {
                        return cn
                    }
                }
            }

             for (ne in NewExpression(__all_data__)) {
                if (self.key_eq(ne)) {
                    if (index = 0) {
                        if (cn.key_eq(ne.getExpression())) {
                            return cn
                        }
                    }
                    for (argIndex in int::__undetermined_all__()) {
                        if (cn.key_eq(ne.getIthArgument(argIndex))) {
                            if (index = argIndex + 1) {
                                return cn
                            }
                        }
                    }
                }
            }

            for (parenthesizedExpression in ParenthesizedExpression(__all_data__)) {
                if (self.key_eq(parenthesizedExpression)) {
                    if (index = 0) {
                        if (cn.key_eq(parenthesizedExpression.getExpression())) {
                            return cn
                        }
                    }
                }
            }

            // BinaryExpression's sub class
            for (be in BinaryExpression(__all_data__)) {
                if (self.key_eq(be)) {
                    let (astNode = AstNode(__all_data__).find(be)) {
                        // node is assignment expr, visit right hand side first.
                        if (isAssignmentExpression(astNode)) {
                            if (index = 0) {
                                if (cn.key_eq(be.getRight())) {
                                    return cn
                                }
                            }
                            if (index = 1) {
                                if (cn.key_eq(be.getLeft())) {
                                    return cn
                                }
                            }
                        }
                        if (!isAssignmentExpression(astNode)) {
                            if (index = 0) {
                                if (cn.key_eq(be.getLeft())) {
                                    return cn
                                }
                            }
                            if (index = 1) {
                                if (cn.key_eq(be.getRight())) {
                                    return cn
                                }
                            }
                        }
                    }
                }
            }
            for (vdl in VariableDeclarationList(__all_data__)) {
                if (self.key_eq(vdl)) {
                    let (vd = vdl.getIthDeclaration(index)) {
                        if (cn.key_eq(vd)) {
                            return cn
                        }
                    }
                }
            }
            for (variableDeclaration in VariableDeclaration(__all_data__)) {
                if (variableDeclaration.key_eq(self)) {
                    if (variableDeclaration.hasInitializer()) {
                        if (cn.key_eq(variableDeclaration.getInitializer())) {
                            if (index = 0) {
                                return cn
                            }
                        }
                        if (cn.key_eq(variableDeclaration.getNameNode())) {
                            if (index = 1) {
                                return cn
                            }
                        }
                    }
                    if (!variableDeclaration.hasInitializer()) {
                        if (cn.key_eq(variableDeclaration.getNameNode())) {
                            if (index = 0) {
                                return cn
                            }
                        }
                    }
                }
            }
            for (objectBindingPattern in ObjectBindingPattern(__all_data__)) {
                if (objectBindingPattern.key_eq(self)) {
                    if (cn.key_eq(objectBindingPattern.getIthElement(index))) {
                        return cn
                    }
                }
            }
            for (arrayBindingPattern in ArrayBindingPattern(__all_data__)) {
                if (arrayBindingPattern.key_eq(self)) {
                    if (cn.key_eq(arrayBindingPattern.getIthElement(index))) {
                        return cn
                    }
                }
            }
            for (bindingElement in BindingElement(__all_data__)) {
                if (bindingElement.key_eq(self)) {
                    if (bindingElement.hasInitializer()) {
                        if (cn.key_eq(bindingElement.getInitializer())) {
                            if (index = 0) {
                                return cn
                            }
                        }
                        if (cn.key_eq(bindingElement.getNameNode())) {
                            if (index = 1) {
                                return cn
                            }
                        }
                    }
                    if (!bindingElement.hasInitializer()) {
                        if (cn.key_eq(bindingElement.getNameNode())) {
                            if (index = 0) {
                                return cn
                            }
                        }
                    }
                }
            }
            for (rs in ReturnStatement(__all_data__)) {
                if (self.key_eq(rs)) {
                    if (cn.key_eq(rs.getExpression())) {
                        if (index = 0) {
                            return cn
                        }
                    }
                }
            }
            for (ye in YieldExpression(__all_data__)) {
                if (self.key_eq(ye)) {
                    if (cn.key_eq(ye.getExpression())) {
                        if (index = 0) {
                            return cn
                        }
                    }
                }
            }
            for (ae in AsExpression(__all_data__)) {
                if (self.key_eq(ae)) {
                    if (cn.key_eq(ae.getExpression())) {
                        if (index = 0) {
                            return cn
                        }
                    }
                }
            }
            for (se in SpreadElement(__all_data__)) {
                if (self.key_eq(se)) {
                    if (cn.key_eq(se.getExpression())) {
                        if (index = 0) {
                            return cn
                        }
                    }
                }
            }
            for (throwStatement in ThrowStatement(__all_data__)) {
                if (self.key_eq(throwStatement)) {
                    if (cn.key_eq(throwStatement.getExpression())) {
                        if (index = 0) {
                            return cn
                        }
                    }
                }
            }
            for (templateExpression in TemplateExpression(__all_data__)) {
                if (self.key_eq(templateExpression)) {
                    let (templateHead = templateExpression.getHead()) {
                        if (cn.key_eq(templateHead)) {
                            if (index = 0) {
                                return cn
                            }
                        }
                    }
                }
            }
            for (spanIndex in int::__undetermined_all__()) {
                for (templateExpression in TemplateExpression(__all_data__)) {
                    if (self.key_eq(templateExpression)) {
                        let (templateSpan = templateExpression.getIthTemplateSpan(spanIndex)) {
                            if (cn.key_eq(templateSpan)) {
                                if (index = spanIndex + 1) {
                                    return cn
                                }
                            }
                        }
                    }
                }
            }
            for (templateSpan in TemplateSpan(__all_data__)) {
                if (self.key_eq(templateSpan)) {
                    let (expression = templateSpan.getExpression()) {
                        if (cn.key_eq(expression)) {
                            if (index = 0) {
                                return cn
                            }
                        }
                    }
                }
            }
            for (templateSpan in TemplateSpan(__all_data__)) {
                if (self.key_eq(templateSpan)) {
                    let (literal = templateSpan.getLiteral()) {
                        if (cn.key_eq(literal)) {
                            if (index = 1) {
                                return cn
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Gets the first child of this node.
     */
    pub fn firstChild(self) -> ControlFlowNode {
        return self.getChildNode(0)
    }

    /**
     * Hold whether this node is leaf node.
     */
    pub fn isLeafNode(self) -> bool {
        if (self.getChildCount() = 0) {
            return true
        }
    }

    /**
     * Gets the count of the children.
     */
    pub fn getChildCount(self) -> int {
        return self.getAllChild().len()
    }

    /**
     * Holds whether this node can finish with a normalCompletion.
     */
    pub fn mayCompleteNormally(self) -> bool {
        for (astNode in AstNode(__all_data__)) {
            if (self.key_eq(astNode)) {
                if (!isReturnStatement(astNode) && !isThrowStatement(astNode)) {
                    return true
                }
            }
        }
    }

}


fn PostOrderNodeSet(kindName: string) -> bool {
    [
        {"TypeAssertionExpression"},
        {"DeleteExpression"},
        {"TypeOfExpression"},
        {"VoidExpression"},
        {"AwaitExpression"},
        {"PrefixUnaryExpression"},
        {"PostfixUnaryExpression"},
        {"NonNullExpression"},
        // CallLikeExpression, 下列5个
        {"CallExpression"},
        {"NewExpression"},
        {"TaggedTemplateExpression"},
        {"Decorator"},
        {"JsxOpeningElement"},
        
        // AccessExpression 下列两个
        {"PropertyAccessExpression"},
        {"ElementAccessExpression"},

        {"Identifier"},
        {"PrivateIdentifier"},
        {"ThisExpression"},
        {"SuperExpression"},
        {"ArrayLiteralExpression"},
        {"ParenthesizedExpression"},

        // LiteralExpression 下属5个
        {"NumericLiteral"},
        {"BigIntLiteral"},
        {"StringLiteral"},
        {"RegularExpressionLiteral"},
        {"NoSubstitutionTemplateLiteral"},

        // BooleanExpression
        {"BooleanKeyword"},
        {"TemplateExpression"},
        {"TemplateSpan"},
        // Token 聚合起来太多了,后续判断 ->是否在TOken集合中

        {"VariableDeclarationList"},
        {"VariableDeclaration"},
        {"ReturnStatement"},
        {"YieldExpression"},
        {"AsExpression"},
        {"SpreadElement"},
        {"OmittedExpression"},
        {"EnumMember"},
        {"EmptyStatement"},
        {"DebuggerStatement"},
        {"ThrowStatement"},
        // There is no control flow relation between FunctionExpression
        // and it's body; the cfg from it's body is another cfg, don't
        // have relation with current cfg;
        // just treat FunctionExpression as a node without children.
        // Same with ClassExpression, ObjectLiteralExpression.
        {"FunctionExpression"},
        {"ArrowFunction"},
        {"ClassExpression"},
        {"ObjectLiteralExpression"},
        {"ComputedPropertyName"},
        {"Parameter"}
    ]
}

/**
 * Determine whether a control flow node is a post order node.
 */
pub fn isPostOrderNode(controlFlowNode: ControlFlowNode) -> bool {
    // 部分通过kind可以直接判断的
    if (PostOrderNodeSet(controlFlowNode.getKindName())) {
        return true
    }
    for (token in Token(__all_data__)) {
        if (token.key_eq(controlFlowNode)) {
            return true
        }
    }
    for (binaryExpression in BinaryExpression(__all_data__),
        node in AstNode(__all_data__)) {
        if (controlFlowNode.key_eq(binaryExpression) && node.key_eq(controlFlowNode)) {
            if (!isBinaryLogicalExpression(node)) {
                return true
            }
        }
    }
    for (bs in Block(__all_data__)) {
        if (bs.key_eq(controlFlowNode)) {
            if (bs.getStatementCount() = 0) {
                return true
            }
        }
    }
    // BindingPattern
    for (bindingPattern in BindingPattern(__all_data__)) {
        if (controlFlowNode.key_eq(bindingPattern)) {
            return true
        }
    }
    // ArrayBindingElement
    for (arrayBindingElement in ArrayBindingElement(__all_data__)) {
        if (controlFlowNode.key_eq(arrayBindingElement)) {
            return true
        }
    }
    // DeclarationStatement
    for (declarationStatement in DeclarationStatement(__all_data__)) {
        if (controlFlowNode.key_eq(declarationStatement)) {
            return true
        }
    }
    // ObjectLiteralElement
    for (objectLiteralElement in ObjectLiteralElement(__all_data__)) {
        if (controlFlowNode.key_eq(objectLiteralElement)) {
            return true
        }
    }
}

/**
 * a node that occur in a context in which their value affect control flow.
 */
pub fn inBooleanContext(n: ControlFlowNode) -> bool {
    for (ble in BinaryLogicalExpression(__all_data__)) {
        if (n.key_eq(ble.getLeft())) {
            return true
        }
    }
    for (ble in BinaryLogicalExpression(__all_data__)) {
        let (ro = ble.getRight()) {
            if (n.key_eq(ro)) {
                if (inBooleanContext(ControlFlowNode{id: ble.id})) {
                    return true
                }
            }
        }
    }
    for (ete in EqualityTestExpression(__all_data__)) {
        if (n.key_eq(ete.getLeft())) {
            return true
        }
    }
    for (ete in EqualityTestExpression(__all_data__)) {
        let (ro = ete.getRight()) {
            if (n.key_eq(ro)) {
                if (inBooleanContext(ControlFlowNode{id: ete.id})) {
                    return true
                }
            }
        }
    }
    for (ce in ConditionalExpression(__all_data__)) {
        if (n.key_eq(ce.getCondition())) {
            return true
        }
    }
    for (ce in ConditionalExpression(__all_data__)) {
        let (thenOrElseExpr = ce.getThenExpression()) {
            if (n.key_eq(thenOrElseExpr)) {
                if (inBooleanContext(ControlFlowNode{id: ce.id})) {
                    return true
                }
            }
        }
        let (thenOrElseExpr = ce.getElseExpression()) {
            if (n.key_eq(thenOrElseExpr)) {
                if (inBooleanContext(ControlFlowNode{id: ce.id})) {
                    return true
                }
            }
        }
    }
    for (ifStmt in IfStatement(__all_data__)) {
        if (n.key_eq(ifStmt.getCondition())) {
            return true
        }
    }
    for (forStmt in ForStatement(__all_data__)) {
        if (n.key_eq(forStmt.getCondition())) {
            return true
        }
    }
    for (dws in DoStatement(__all_data__)) {
        if (n.key_eq(dws.getCondition())) {
            return true
        }
    }
    for (ws in WhileStatement(__all_data__)) {
        if (n.key_eq(ws.getCondition())) {
            return true
        }
    }
}

/**
 * If the body of loop finishes with completion,
 * the loop will continue executing.
 */
pub fn continues(c: Completion, loop: IterationStatement) -> bool {
    if (isNormalCompletion(c)) {
        if (loop in IterationStatement(__all_data__)) {
            return true
        }
    }
    // only consider continue completions if there actually is a `continue`
    // somewhere inside this loop; we don't particularly care whether that
    // `continue` could actually target this loop, we just want to restrict
    // the size of the predicate
    for (continueStmt in ContinueStatement(__all_data__),
        astNode in AstNode(__all_data__)) {
        if (astNode in continueStmt.getAncestor()) {
            if (astNode.key_eq(loop)) {
                if (isContinueCompletion(c)) {
                    return true
                }
            }
        }
    }
}

/**
 * Get the node that should be visited first,
 * selected from the node and it's descendants.
 * Every control flow node must have and only have 1 first node.
 */
pub fn first(n: ControlFlowNode) -> ControlFlowNode {
    // n is Statement, if the Statement is not PostOrderNode, visit itself first
    for (s in Statement(__all_data__)) {
        if (n.key_eq(s)) {
            if (!isPostOrderNode(n)) {
                return n
            }
        }
    }
    // n is PostOrderNode, the node has children, visit first child
    for (pon in PostOrderNode(__all_data__)) {
        if (n.key_eq(pon)) {
            let (fcn = pon.firstChild()) {
                return first(fcn)
            }
        }
    }
    // n is PostOrderNode, the node is leaf node, visit the node
    for (pon in PostOrderNode(__all_data__)) {
        if (n.key_eq(pon)) {
            if (pon.isLeafNode()) {
                return n
            }
        }
    }
    // the first node of ConditionalExpression is itself
    for (ce in ConditionalExpression(__all_data__)) {
        if (n.key_eq(ce)) {
            return n
        }
    }
    // the first node of BinaryLogicalExpression is itself
    for (ble in BinaryLogicalExpression(__all_data__)) {
        if (n.key_eq(ble)) {
            return n
        }
    }
}

/**
 * Get the node that should be visited last,
 * selected from the node and it's descendants.
 * Every control flow node must have at least 1 last node.
 */
pub fn last(n: ControlFlowNode, ln: ControlFlowNode, c: Completion) -> bool {
    // if the node is in boolean context,
    // the completion should be BooleanCompletion
    for (nc in NormalCompletion()) {
        if (last(n, ln, nc.to<Completion>())) {
            if (inBooleanContext(n)) {
                if (isBooleanCompletion(c)) {
                    return true
                }
            }
        }
    }
    // the last of topLevel is the last node of the last statement of the topLevel
    for (topLevel in TopLevel(__all_data__)) {
        if (n.key_eq(topLevel)) {
            let (statementCount = topLevel.getStatementCount()) {
                let (lastStatement = topLevel.getIthStatement(statementCount - 1)) {
                    if (last(ControlFlowNode {id: lastStatement.id}, ln, c)) {
                        return true
                    }
                }
            }
        }
    }
    // the last of BlockStatement is the last node of the statement that
    // is the last statement of the BlockStatement body
    for (bs in Block(__all_data__)) {
        if (n.key_eq(bs)) {
            let (sc = bs.getStatementCount()) {
                let (lastStmt = bs.getIthStatement(sc - 1)) {
                    if (last(ControlFlowNode {id: lastStmt.id}, ln, c)) {
                        return true
                    }
                }
            }
        }
    }
    // any child Statement in BlockStatement, it is the last node of
    // BlockStatement if it's last node is not NormalCompletion
    if (!isNormalCompletion(c)) {
        for (bs in Block(__all_data__)) {
            if (n.key_eq(bs)) {
                for (childStmt in Statement(__all_data__)) {
                    if (childStmt in bs.getStatement()) {
                        if (last(ControlFlowNode {id: childStmt.id}, ln, c)) {
                            return true
                        }
                    }
                }
            }
        }
    }
    // the last of IfStatement is the last of the then block and
    // the last of the else block
    for (ifStmt in IfStatement(__all_data__)) {
        if (n.key_eq(ifStmt)) {
            let (thenNode = ifStmt.getThenStatement()) {
                if (last(ControlFlowNode {id: thenNode.id}, ln, c)) {
                    return true
                }
            }
            let (elseNode = ifStmt.getElseStatement()) {
                if (last(ControlFlowNode {id: elseNode.id}, ln, c)) {
                    return true
                }
            }
        }
    }
    // if the IfStatement don't have else block,
    // the last node of condition is the last node of IfStatement, completion is NormalCompletion
    if (isNormalCompletion(c)) {
        for (ifStmt in IfStatement(__all_data__)) {
            if (n.key_eq(ifStmt)) {
                if (!ifStmt.hasElse()) {
                    let (cond = ifStmt.getCondition()) {
                        for (fbc in FalseBooleanCompletion()) {
                            if (last(ControlFlowNode {id: cond.id}, ln, fbc.to<Completion>())) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
    for (loop in IterationStatement(__all_data__)) {
        if (n.key_eq(loop)) {
            // 1. The last node is the last node of condition expression,
            // when a loop statement terminate normally if its condition is false.
            if (isNormalCompletion(c)) {
                let (condition = loop.getCondition()) {
                    for (falseCompletion in FalseBooleanCompletion()) {
                        if (last(ControlFlowNode {id: condition.id}, ln, falseCompletion.to<Completion>())) {
                            return true
                        }
                    }
                }
            }
            // 2. The last node is the iterated expression in an enhanced-for statement,
            // when an enhanced-for statement iterate over immediately after the iterated expression.
            if (isNormalCompletion(c)) {
                let (enhancedForStmt = loop.to<EnhancedForStatement>()) {
                    let (iteratedExpr = enhancedForStmt.getExpression()) {
                        if (last(ControlFlowNode {id: iteratedExpr.id}, ln, c)) {
                            return true
                        }
                    }
                }
            }
            // 3. The last node is the last node of the body...
            let (body = loop.getBody()) {
                for (bodyCompletion in Completion()) {
                    if (last(body.to<ControlFlowNode>(), ln, bodyCompletion)) {
                        if (isNormalCompletion(c)) {
                            // ... when in an iteration of a enhanced-for statement, the loop would continue after the last node in the body.
                            let (enhancedForStmt = loop.to<EnhancedForStatement>()) {
                                if (continues(bodyCompletion, loop)) {
                                    return true
                                }
                            }
                        }
                        // ... or the loop ends after the last node in the body.
                        // if the completion is a break completion, the entire loop will complete normally.
                        if (isNormalCompletion(c)) {
                            if (isBreakCompletion(bodyCompletion)) {
                                return true
                            }
                        }
                        // ... or if it is some other completion that does not continue the loop,
                        // the loop should keep the body completion
                        if (!isBreakCompletion(bodyCompletion)) {
                            if (!continues(bodyCompletion, loop)) {
                                if (c = bodyCompletion) {
                                    return true
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (isBreakCompletion(c)) {
        for (breakStatement in BreakStatement(__all_data__)) {
            if (n.key_eq(breakStatement)) {
                if (ln = n) {
                    return true
                }
            }
        }
    }
    if (isContinueCompletion(c)) {
        if (ln = n) {
            for (continueStatement in ContinueStatement(__all_data__)) {
                if (n.key_eq(continueStatement)) {
                    return true
                }
            }
        }
    }
    // the last of ExpressionStatement is the last of the expression
    // of the ExpressionStatement
    for (es in ExpressionStatement(__all_data__)) {
        if (n.key_eq(es)) {
            let (e = es.getExpression()) {
                if (last(ControlFlowNode {id: e.id}, ln, c)) {
                    return true
                }
            }
        }
    }
    // the last of the PostOrderNode is the node itself
    if (isNormalCompletion(c)) {
        for (pon in PostOrderNode(__all_data__)) {
            if (n.key_eq(pon)) {
                if (pon.mayCompleteNormally()) {
                    if (ln = n) {
                        return true
                    }
                }
            }
        }
    }
    // the last of the ReturnStatement is the stmt itself
    // completion is ReturnCompletion
    if (isReturnCompletion(c)) {
        for (rs in ReturnStatement(__all_data__)) {
            if (n.key_eq(rs)) {
                if (ln = n) {
                    return true
                }
            }
        }
    }
    // the last node of ConditionalExpression is the last node of
    // it's then or the last node of it's else
    for (ce in ConditionalExpression(__all_data__)) {
        if (n.key_eq(ce)) {
            let (thenExpr = ce.getThenExpression()) {
                if (last(ControlFlowNode {id: thenExpr.id}, ln, c)) {
                    return true
                }
            }
            let (elseExpr = ce.getElseExpression()) {
                if (last(ControlFlowNode {id: elseExpr.id}, ln, c)) {
                    return true
                }
            }
        }
    }
    // the last node of VariableStatement is VariableDeclarationList
    // because VariableDeclarationList is post order node
    if (isNormalCompletion(c)) {
        for (vs in VariableStatement(__all_data__)) {
            if (n.key_eq(vs)) {
                let (vdl = vs.getDeclarationList()) {
                    if (ln.key_eq(vdl)) {
                        return true
                    }
                }
            }
        }
    }
    // LogicalAndExpression (&&) contains control flow info,
    // related with short-circuit evaluation.
    // the last node of LogicalAndExpression are the last of it's
    // left operand with false boolean completion and
    // the last of it's right operand
    for (lae in LogicalAndExpression(__all_data__)) {
        if (n.key_eq(lae)) {
            if (isFalseBooleanCompletion(c)) {
                let (left = lae.getLeft()) {
                    if (last(ControlFlowNode {id: left.id}, ln, c)) {
                        return true
                    }
                }
            }
            let (right = lae.getRight()) {
                if (last(ControlFlowNode {id: right.id}, ln, c)) {
                    return true
                }
            }
        }
    }
    // LogicalOrExpression (||) contains control flow info,
    // related with short-circuit evaluation.
    // the last node of LogicalOrExpression are the last of it's
    // left operand with true boolean completion and
    // the last of it's right operand
    for (loe in LogicalOrExpression(__all_data__)) {
        if (n.key_eq(loe)) {
            if (isTrueBooleanCompletion(c)) {
                let (left = loe.getLeft()) {
                    if (last(ControlFlowNode {id: left.id}, ln, c)) {
                        return true
                    }
                }
            }
            let (right = loe.getRight()) {
                if (last(ControlFlowNode {id: right.id}, ln, c)) {
                    return true
                }
            }
        }
    }
    // NullishCoalescingExpression (??) contains control flow info,
    // same with LogicalOrExpression.
    for (nce in NullishCoalescingExpression(__all_data__)) {
        if (n.key_eq(nce)) {
            if (isTrueBooleanCompletion(c)) {
                let (left = nce.getLeft()) {
                    if (last(ControlFlowNode {id: left.id}, ln, c)) {
                        return true
                    }
                }
            }
            let (right = nce.getRight()) {
                if (last(ControlFlowNode {id: right.id}, ln, c)) {
                    return true
                }
            }
        }
    }
    // the last node of WithStatement is the last of the statement
    // belongs to the WithStatement.
    for (withStatement in WithStatement(__all_data__)) {
        if (n.key_eq(withStatement)) {
            let (statement = withStatement.getStatement()) {
                if (last(ControlFlowNode {id: statement.id}, ln, c)) {
                    return true
                }
            }
        }
    }
    // if node may throw a exception, then create control flow edge
    // and set the Completion to ThrowCompletion
    // maybe we can distinct the throw statement with the may throw
    // call statement, this can be discussed later
    for (throwStatement in ThrowStatement(__all_data__)) {
        if (n.key_eq(throwStatement) && ln = n) {
            if (isThrowCompletion(c)) {
                return true
            }
        }
    }
    // the last node of SwitchStatement is the last node of CaseBlock
    for (switchStatement in SwitchStatement(__all_data__)) {
        if (n.key_eq(switchStatement)) {
            let (caseBlock = switchStatement.getCaseBlock()) {
                if (last(ControlFlowNode {id: caseBlock.id}, ln, c)) {
                    return true
                }
            }
        }
    }
    // caseBlock 
    for (caseBlock in CaseBlock(__all_data__)) {
        if (caseBlock.key_eq(n)) {
            // empty CaseBlock, the last node is itself
            if (ln = n) {
                if (isNormalCompletion(c)) {
                    if (caseBlock.getChildCount() = 0) {
                        return true
                    }
                }
            }
            for (statement in Statement(__all_data__)) {
                if (statement in caseBlock.getCaseOrDefault()) {
                    // if any last nodes of body belongs to CaseClause or DefaultClause
                    // with BreakCompletion, those last nodes are last node of
                    // CaseBlock with NormalCompletion
                    for (breakCompletion in BreakCompletion()) {
                        if (breakCompletion in BreakCompletion()) {
                            if (last(ControlFlowNode {id: statement.id}, ln, Completion().find(breakCompletion))) {
                                if (isNormalCompletion(c)) {
                                    return true
                                }
                            }
                        }
                    }
                    // if any last nodes of body belongs to CaseClause or DefaultClause
                    // with the Completion that is neither NormalCompletion nor BreakCompletion,
                    // those last nodes are last node of CaseBlock and with the same Completion
                    if (!isNormalCompletion(c) && !isBreakCompletion(c)) {
                        if (last(ControlFlowNode {id: statement.id}, ln, c)) {
                            return true
                        }
                    }
                }
            }
            // if CaseBlock have DefaultClause, the last node of DefaultClause with
            // NormalCompletion, is the last node of CaseBlock
            if (caseBlock.hasDefaultClause()) {
                let (defaultClause = caseBlock.getDefaultClause()) {
                    if (isNormalCompletion(c)) {
                        if (last(ControlFlowNode {id: defaultClause.id}, ln, c)) {
                            return true
                        }
                    }
                }
            }
            // if CaseBlock don't have DefaultClause, the last node of the last CaseClause
            //  with NormalCompletion, is the last node of CaseBlock
            if (!caseBlock.hasDefaultClause()) {
                let (caseClauseCount = caseBlock.getCaseClauseCount()) {
                    let (caseClause = caseBlock.getIthCaseClause(caseClauseCount - 1)) {
                        if (isNormalCompletion(c)) {
                            if (last(caseClause.to<ControlFlowNode>(), ln, c)) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
    for (caseClause in CaseClause(__all_data__)) {
        if (n.key_eq(caseClause)) {
            let (statementCount = caseClause.getStatementCount()) {
                // if CaseClause don't contains any Statement,
                // the last node CaseClause is the last node of it's
                // expression
                if (statementCount = 0) {
                    let (expression = caseClause.getExpression()) {
                        if (last(ControlFlowNode {id: expression.id}, ln, c)) {
                            return true
                        }
                    }
                }
                if (statementCount != 0) {
                    // any Statement belongs to CaseClause with Completion is
                    // is not NormalCompletion, it's last node is the last node
                    // of CaseClause
                    for (statement in Statement(__all_data__)) {
                        if (statement in caseClause.getStatement()) {
                            if (last(ControlFlowNode {id: statement.id}, ln, c)) {
                                if (!isNormalCompletion(c)) {
                                    return true
                                }
                            }
                        }
                    }
                    // the last node of the last statement belongs to CaseClause
                    // with NormalCompletion, is the last node of CaseClause
                    let (lastIndex = statementCount - 1) {
                        let (lastStatement = caseClause.getIthStatement(lastIndex)) {
                            if (last(lastStatement.to<ControlFlowNode>(), ln, c)) {
                                if (isNormalCompletion(c)) {
                                    return true
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    // same with CaseClause
    for (defaultClause in DefaultClause(__all_data__)) {
        if (n.key_eq(defaultClause)) {
            let (statementCount = defaultClause.getStatementCount()) {
                // if DefaultClause don't contains any Statement,
                // it's last node is itself
                if (statementCount = 0) {
                    if (ln = n) {
                        if (isNormalCompletion(c)) {
                            return true
                        }
                    }
                }
                if (statementCount != 0) {
                    for (statement in Statement(__all_data__)) {
                        if (statement in defaultClause.getStatement()) {
                            if (last(ControlFlowNode {id: statement.id}, ln, c)) {
                                if (!isNormalCompletion(c)) {
                                    return true
                                }
                            }
                        }
                    }
                    let (lastIndex = statementCount - 1) {
                        let (lastStatement = defaultClause.getIthStatement(lastIndex)) {
                            if (last(ControlFlowNode {id: lastStatement.id}, ln, c)) {
                                if (isNormalCompletion(c)) {
                                    return true
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    // n is TryStatement, if there is finally block, the last nodes
    // are finally block's last nodes; otherwise the last nodes are
    // try block's last nodes and catch clause's last nodes.
    for (tryStatement in TryStatement(__all_data__)) {
        if (n.key_eq(tryStatement)) {
            if (tryStatement.hasFinallyBlock()) {
                let (finallyBlockStatement = tryStatement.getFinallyBlock()) {
                    if (last(ControlFlowNode {id: finallyBlockStatement.id}, ln, c)) {
                        return true
                    }
                }
            }
            if (!tryStatement.hasFinallyBlock()) {
                let (blockStatement = tryStatement.getTryBlock()) {
                    if (last(ControlFlowNode {id: blockStatement.id}, ln, c)) {
                        return true
                    }
                }
                let (catchClause = tryStatement.getCatchClause()) {
                    if (last(ControlFlowNode {id: catchClause.id}, ln, c)) {
                        return true
                    }
                }
            }
        }
    }
    for (catchClause in CatchClause(__all_data__)) {
        if (n.key_eq(catchClause)) {
            let (blockStatement = catchClause.getBlock()) {
                if (last(ControlFlowNode {id: blockStatement.id}, ln, c)) {
                    return true
                }
            }
        }
    }
}

fn functionLikeDeclarationSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    if (isNormalCompletion(c)) {
        for (index in int::__undetermined_all__()) {
            for (parameter in Parameter(__all_data__),
                enclosingFunction in FunctionLikeDeclaration(__all_data__)) {
                if (n.key_eq(parameter)) {
                    if (parameter = enclosingFunction.getIthParameter(index)) {
                        let (parameterCount = enclosingFunction.getParameterCount()) {
                            if (index = parameterCount - 1) {
                                let (bodyStmt = enclosingFunction.getBody()) {
                                    yield ControlFlowNode(__all_data__).find(bodyStmt)
                                }
                            }
                            if (index != parameterCount - 1) {
                                let (nextParameter = enclosingFunction.getIthParameter(index + 1)) {
                                    yield first(ControlFlowNode(__all_data__).find(nextParameter))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

fn conditionalExpressionSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // the successor of ConditionalExpression is the first node of it's condition
    if (isNormalCompletion(c)) {
        for (ce in ConditionalExpression(__all_data__)) {
            if (n.key_eq(ce)) {
                let (cond = ce.getCondition()) {
                    yield first(ControlFlowNode(__all_data__).find(cond))
                }
            }
        }
    }

    // n is the last node of the ConditionalExpression's condition, it have 2 successors
    // one is the first node of the ConditionalExpression's then block, completion is TrueBooleanCompletion
    // another is the first node of the ConditionalExpression's else block, completion is FalseBooleanCompletion
    if (isTrueBooleanCompletion(c)) {
        for (ce in ConditionalExpression(__all_data__)) {
            let (cond = ce.getCondition()) {
                if (last(ControlFlowNode(__all_data__).find(cond), n, c)) {
                    let (thenBlock = ce.getThenExpression()) {
                        yield first(ControlFlowNode(__all_data__).find(thenBlock))
                    }
                }
            }
        }
    }
    if (isFalseBooleanCompletion(c)) {
        for (ce in ConditionalExpression(__all_data__)) {
            let (cond = ce.getCondition()) {
                if (last(ControlFlowNode(__all_data__).find(cond), n, c)) {
                    let (elseBlock = ce.getElseExpression()) {
                        yield first(ControlFlowNode(__all_data__).find(elseBlock))
                    }
                }
            }
        }
    }
}

fn binaryLogicalExpressionSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // n is BinaryLogicalExpression, it's successor is the first of the
    // BinaryLogicalExpression's left operand
    if (isTrueBooleanCompletion(c)) {
        for (lae in LogicalAndExpression(__all_data__)) {
            if (n.key_eq(lae)) {
                let (leftOperand = lae.getLeft()) {
                    let (rightOperand = lae.getRight()) {
                        if (last(ControlFlowNode(__all_data__).find(leftOperand), n, c)) {
                            yield first(ControlFlowNode(__all_data__).find(rightOperand))
                        }
                    }
                }
            }
        }
    }
    if (isNormalCompletion(c)) {
        for (lae in LogicalAndExpression(__all_data__)) {
            if (n.key_eq(lae)) {
                let (leftOperand = lae.getLeft()) {
                    yield first(ControlFlowNode(__all_data__).find(leftOperand))
                }
            }
        }
    }
    if (isNormalCompletion(c)) {
        for (loe in LogicalOrExpression(__all_data__)) {
            if (n.key_eq(loe)) {
                let (leftOperand = loe.getLeft()) {
                    yield first(ControlFlowNode(__all_data__).find(leftOperand))
                }
            }
        }
    }
    if (isFalseBooleanCompletion(c)) {
        for (lae in LogicalOrExpression(__all_data__)) {
            let (leftOperand = lae.getLeft()) {
                if (last(ControlFlowNode(__all_data__).find(leftOperand), n, c)) {
                    let (rightOperand = lae.getRight()) {
                        yield first(ControlFlowNode(__all_data__).find(rightOperand))
                    }
                }
            }
        }
    }
    if (isNormalCompletion(c)) {
        for (nce in NullishCoalescingExpression(__all_data__)) {
            if (n.key_eq(nce)) {
                let (leftOperand = nce.getLeft()) {
                    yield first(ControlFlowNode(__all_data__).find(leftOperand))
                }
            }
        }
    }
}

fn ifStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // IfStatement's succ is the first of the if cond
    if (isNormalCompletion(c)) {
        for (ifStmt in IfStatement(__all_data__)) {
            if (ifStmt.key_eq(n)) {
                let (cond = ifStmt.getCondition()) {
                    let(s = first(ControlFlowNode(__all_data__).find(cond))) {
                        yield s
                    }
                }
            }
        }
    }

    // n is the last of the if cond, succ is the first of then and the first of else
    if (isTrueBooleanCompletion(c)) {
        for (ifStmt in IfStatement(__all_data__)) {
            let (cond = ifStmt.getCondition()) {
                if (last(ControlFlowNode(__all_data__).find(cond), n, c)) {
                    let (thenStmt = ifStmt.getThenStatement()) {
                        yield first(ControlFlowNode(__all_data__).find(thenStmt))
                    }
                }
            }
        }
    }
    if (isFalseBooleanCompletion(c)) {
        for (ifStmt in IfStatement(__all_data__)) {
            let (cond = ifStmt.getCondition()) {
                if (last(ControlFlowNode(__all_data__).find(cond), n, c)) {
                    let (elseStmt = ifStmt.getElseStatement()) {
                        yield first(ControlFlowNode(__all_data__).find(elseStmt))
                    }
                }
            }
        }
    }
}

fn whileAndDoStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // `while` and `do`-`while` statements
    // A `while` loop start at the condition...
    if (isNormalCompletion(c)) {
        for (whileStmt in WhileStatement(__all_data__)) {
            if (n.key_eq(whileStmt)) {
                let (condition = whileStmt.getCondition()) {
                    let (s = first(ControlFlowNode(__all_data__).find(condition))) {
                        yield s
                    }
                }
            }
        }
    }
    // ...and a `do`-`while` loop starts at the body.
    if (isNormalCompletion(c)) {
        for (doWhileStmt in DoStatement(__all_data__)) {
            if (n.key_eq(doWhileStmt)) {
                let (body = doWhileStmt.getBody()) {
                    let (s = first(ControlFlowNode(__all_data__).find(body))) {
                        yield s
                    }
                }
            }
        }
    }
}

fn forStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // `for` statements
    // The `iterationEntry` is the entry node of each iteration.
    for (forStmt in ForStatement(__all_data__)) {
        let (condition = forStmt.getCondition()) {
            // The `iterationEntry` is the first of condition
            let (iterationEntry = first(ControlFlowNode(__all_data__).find(condition))) {
                if (n.key_eq(forStmt)) {
                    // The successor of `for` statement is the first node of initializer
                    let (initializer = forStmt.getInitializer()) {
                        if (isNormalCompletion(c)) {
                            yield first(ControlFlowNode(__all_data__).find(initializer))
                        }
                    }
                }
                // The successor of `for` statement is the iterationEntry if there is no initializer.
                if (n.key_eq(forStmt)) {
                    if (!forStmt.hasInitializer()) {
                        if (isNormalCompletion(c)) {
                            yield iterationEntry
                        }
                    }
                }
                // The successor of the last of initializer is the iterationEntry.
                let (initializer = forStmt.getInitializer()) {
                    if (last(ControlFlowNode(__all_data__).find(initializer), n, c)) {
                        if (isNormalCompletion(c)) {
                            yield iterationEntry
                        }
                    }
                }
                // The true successor of the last of condition is the first of body.
                let (body = forStmt.getBody()) {
                    if (last(ControlFlowNode(__all_data__).find(condition), n, c)) {
                        if (isTrueBooleanCompletion(c)) {
                            yield first(ControlFlowNode(__all_data__).find(body))
                        }
                    }
                }
                // The successor of the last of incrementor is the iterationEntry.
                let (incrementor = forStmt.getIncrementor()) {
                    if (last(ControlFlowNode(__all_data__).find(incrementor), n, c)) {
                        if (isNormalCompletion(c)) {
                            yield iterationEntry
                        }
                    }
                }
                // The back edge of the loop. The successor of the last of body is the first of incrementor
                // or the first of condition if there is no incrementor.
                let (body = forStmt.getBody()) {
                    if (last(ControlFlowNode(__all_data__).find(body), n, c)) {
                        if (continues(c, IterationStatement(__all_data__).find(forStmt))) {
                            let (incrementor = forStmt.getIncrementor()) {
                                yield first(ControlFlowNode(__all_data__).find(incrementor))
                            }
                            if (!forStmt.hasIncrementor()) {
                                yield iterationEntry
                            }
                        }
                    }
                }
            }
        }
        if (!forStmt.hasCondition()) {
            let (body = forStmt.getBody()) {
                // The `iterationEntry` is the first of body if there is no condition.
                let (iterationEntry = first(ControlFlowNode(__all_data__).find(body))) {
                    if (n.key_eq(forStmt)) {
                        if (isNormalCompletion(c)) {
                            let (initializer = forStmt.getInitializer()) {
                                yield first(ControlFlowNode(__all_data__).find(initializer))
                            }
                        }
                    }
                    if (n.key_eq(forStmt)) {
                        if (isNormalCompletion(c)) {
                            if (!forStmt.hasInitializer()) {
                                yield iterationEntry
                            }
                        }
                    }
                    let (initializer = forStmt.getInitializer()) {
                        if (isNormalCompletion(c)) {
                            if (last(ControlFlowNode(__all_data__).find(initializer), n, c)) {
                                yield iterationEntry
                            }
                        }
                    }
                    let (condition = forStmt.getCondition()) {
                        if (isTrueBooleanCompletion(c)) {
                            if (last(ControlFlowNode(__all_data__).find(condition), n, c)) {
                                yield first(ControlFlowNode(__all_data__).find(body))
                            }
                        }
                    }
                    let (incrementor = forStmt.getIncrementor()) {
                        if (isNormalCompletion(c)) {
                            if (last(ControlFlowNode(__all_data__).find(incrementor), n, c)) {
                                yield iterationEntry
                            }
                        }
                    }
                    if (body = forStmt.getBody()) {
                        if (last(ControlFlowNode(__all_data__).find(body), n, c)) {
                            if (continues(c, IterationStatement(__all_data__).find(forStmt))) {
                                let (incrementor = forStmt.getIncrementor()) {
                                    yield first(ControlFlowNode(__all_data__).find(incrementor))
                                }
                                if (!forStmt.hasIncrementor()) {
                                    yield iterationEntry
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

fn iterationStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    for (loop in IterationStatement(__all_data__)) {
        for (whileStatement in WhileStatement(__all_data__)) {
            if (whileStatement.key_eq(loop)) { 
                let (condition = loop.getCondition()) {
                    let (body = loop.getBody()) {
                        // Control goes from the condition via a true-completion to the body...
                        if (last(ControlFlowNode(__all_data__).find(condition), n, c)) {
                            if (isTrueBooleanCompletion(c)) {
                                yield first(ControlFlowNode(__all_data__).find(body))
                            }
                        }
                        // ...or through the back edge from the body back to the condition.
                        if (last(ControlFlowNode(__all_data__).find(body), n, c)) {
                            if (continues(c, loop)) {
                                yield first(ControlFlowNode(__all_data__).find(condition))
                            }
                        }
                    }
                }
            }
        }
        for (doStatement in DoStatement(__all_data__)) {
            if (doStatement.key_eq(loop)) {
                let (condition = loop.getCondition()) {
                    let (body = loop.getBody()) {
                        if (last(ControlFlowNode(__all_data__).find(condition), n, c)) {
                            if (isTrueBooleanCompletion(c)) {
                                yield first(ControlFlowNode(__all_data__).find(body))
                            }
                        }
                        if (last(ControlFlowNode(__all_data__).find(body), n, c)) {
                            if (continues(c, loop)) {
                                yield first(ControlFlowNode(__all_data__).find(condition))
                            }
                        }
                    }
                }
            }
        }
    }
}

fn enhancedForStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // Enhanced `for` statements
    // The successor of enhanced-for statement is the first of the iterated expression.
    for (enhancedForStmt in EnhancedForStatement(__all_data__)) {
        if (n.key_eq(enhancedForStmt)) {
            if (isNormalCompletion(c)) {
                let (expr = enhancedForStmt.getExpression()) {
                    yield first(ControlFlowNode(__all_data__).find(expr))
                }
            }
        }
        // The successor of the last of expression is the first of initializer.
        let (initializer = enhancedForStmt.getInitializer()) {
            let (expr = enhancedForStmt.getExpression()) {
                if (isNormalCompletion(c)) {
                    if (last(ControlFlowNode(__all_data__).find(expr), n, c)) {
                        yield first(ControlFlowNode(__all_data__).find(initializer))
                    }
                }
            }
        }
        // The successor of the last of initializer is the first of body.
        let (initializer = enhancedForStmt.getInitializer()) {
            let (body = enhancedForStmt.getBody()) {
                if (isNormalCompletion(c)) {
                    if (last(ControlFlowNode(__all_data__).find(initializer), n, c)) {
                        yield first(ControlFlowNode(__all_data__).find(body))
                    }
                }
            }
        }
        // The back edge of the loop. The successor of the last of body is the first of initializer.
        let (initializer = enhancedForStmt.getInitializer()) {
            let (body = enhancedForStmt.getBody()) {
                if (last(ControlFlowNode(__all_data__).find(body), n, c)) {
                    if (continues(c, IterationStatement(__all_data__).find(enhancedForStmt))) {
                        yield first(ControlFlowNode(__all_data__).find(initializer))
                    }
                }
            }
        }
    }
}

fn blockStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // n is BlockStatement, succ is the first of the BlockStatement's 0 th child
    for (bs in Block(__all_data__)) {
        if (n.key_eq(bs)) {
            if (isNormalCompletion(c)) {
                let (fs = bs.getIthStatement(0)) {
                    yield first(ControlFlowNode(__all_data__).find(fs))
                }
            }
        }
    }
    // n is the last of the BlockStatement's i th child,
    // succ is the first of the BlockStatement's i+1 th child
    for (i in int::__undetermined_all__()) {
        for (bs in Block(__all_data__)) {
            let (iStmt = bs.getIthStatement(i)) {
                if (isNormalCompletion(c)) {
                    if (last(ControlFlowNode(__all_data__).find(iStmt), n, c)) {
                        let (nextStmt = bs.getIthStatement(i + 1)) {
                            yield first(ControlFlowNode(__all_data__).find(nextStmt))
                        }
                    }
                }
            }
        }
    }
}

fn expressionStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // n is ExpressionStatement, succ is the first of the expression of ExpressionStatement
    if (isNormalCompletion(c)) {
        for (es in ExpressionStatement(__all_data__)) {
            if (n.key_eq(es)) {
                let (tmpNode = es.getExpression()) {
                    yield first(ControlFlowNode(__all_data__).find(tmpNode))
                }
            }
        }
    }
}

fn postOrderNodeSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // n is the last of the PostOrderNode's i th child, succ is the first of the
    // PostOrderNode's i+1 th child
    if (isNormalCompletion(c)) {
        for (index in int::__undetermined_all__()) {
            for (pon in PostOrderNode(__all_data__)) {
                let (cn = pon.getChildNode(index)) {
                    if (last(cn, n, c)) {
                        let (nextCN = pon.getChildNode(index + 1)) {
                            yield first(nextCN)
                        }
                    }
                }
            }
        }
    }
    // n is the last node of the last PostOrderNode's child, succ is the PostOrderNode
    if (isNormalCompletion(c)) {
        for (childCount in int::__undetermined_all__()) {
            for (pon in PostOrderNode(__all_data__)) {
                if (childCount = pon.getChildCount()) {
                    let (lastChild = pon.getChildNode(childCount - 1)) {
                        if (last(lastChild, n, c)) {
                            yield ControlFlowNode(__all_data__).find(pon)
                        }
                    }
                }
            }
        }
    }
}

fn variableStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // VariableStatement just have one child, it's a VariableDeclarationList,
    // the successor of the VariableStatement is the first node of it's VariableDeclarationList
    // the implementation of the VariableStatement is different from SomeQL
    // treat the VariableDeclarationList as PostOrderNode is more easier
    if (isNormalCompletion(c)) {
        for (vs in VariableStatement(__all_data__)) {
            if (n.key_eq(vs)) {
                let (vdl = vs.getDeclarationList()) {
                    yield first(ControlFlowNode(__all_data__).find(vdl))
                }
            }
        }
    }
}

fn withStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // n is a WithStatement, successor is the first of the expression belongs to WithStatement.
    if (isNormalCompletion(c)) {
        for (withStatement in WithStatement(__all_data__)) {
            if (n.key_eq(withStatement)) {
                let (expression = withStatement.getExpression()) {
                    yield first(ControlFlowNode(__all_data__).find(expression))
                }
            }
        }
    }
    // n is the last of the expression belongs to WithStatement, successor is the first
    // of the statement belongs to WithStatement.
    if (isNormalCompletion(c)) {
        for (withStatement in WithStatement(__all_data__)) {
            let (expression = withStatement.getExpression()) {
                if (last(ControlFlowNode(__all_data__).find(expression), n, __all_data__)) {
                    let (statement = withStatement.getStatement()) {
                        yield first(ControlFlowNode(__all_data__).find(statement))
                    }
                }
            }
        }
    }
}

fn switchStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    if (isNormalCompletion(c)) {
        for (switchStatement in SwitchStatement(__all_data__)) {
            // n is a SwitchStatement, successor is the expression of SwitchStatement
            if (n.key_eq(switchStatement)) {
                let (expression = switchStatement.getExpression()) {
                    yield first(ControlFlowNode(__all_data__).find(expression))
                }
            }
            // n is the last of expression belongs to SwitchStatement,
            // successor is the first of CaseBlock
            let (expression = switchStatement.getExpression()) {
                if (last(ControlFlowNode(__all_data__).find(expression), n, c)) {
                    let (caseBlock = switchStatement.getCaseBlock()) {
                        yield first(ControlFlowNode(__all_data__).find(caseBlock))
                    }
                }
            }
        }
    }
}

fn caseBlockSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    if (isNormalCompletion(c)) {
        // n is CaseBlock, successors are all of it's CaseClause's first node and
        // it's DefaultClause's first node
        for (caseBlock in CaseBlock(__all_data__)) {
            if (n.key_eq(caseBlock)) {
                for (caseOrDefaultStmt in caseBlock.getCaseOrDefault()) {
                    yield first(ControlFlowNode(__all_data__).find(caseOrDefaultStmt))
                }
            }
            // n is a the last node of one of CaseClause, successor is the
            // first node of the next CaseClause
            for (index in int::__undetermined_all__()) {
                let (caseClause = caseBlock.getIthCaseClause(index)) {
                    if (last(ControlFlowNode(__all_data__).find(caseClause), n, c)) {
                        let (nextClause = caseBlock.getIthCaseClause(index + 1)) {
                            yield first(ControlFlowNode(__all_data__).find(nextClause))
                        }
                    }
                }
            }
            // n is the last node of last CaseClause, successor is the
            // first node of DefaultClause
            let (caseClauseCount = caseBlock.getCaseClauseCount()) {
                let (index = caseClauseCount - 1) {
                    let (caseClause = caseBlock.getIthCaseClause(index)) {
                        if (last(ControlFlowNode(__all_data__).find(caseClause), n, c)) {
                            let (defaultClause = caseBlock.getDefaultClause()) {
                                yield first(ControlFlowNode(__all_data__).find(defaultClause))
                            }
                        }
                    }
                }
            }
        }
    }
}

fn caseClauseSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    if (isNormalCompletion(c)) {
        for (caseClause in CaseClause(__all_data__)) {
            // n is CaseClause, successor is the first node of Expression
            // belongs to the CaseClause.
            if (n.key_eq(caseClause)) {
                let (expression = caseClause.getExpression()) {
                    yield first(ControlFlowNode(__all_data__).find(expression))
                }
            }
            // n is the last node of Expression belongs to CaseClause, successor
            // is the first node of the first Statement belongs to CaseClause
            let (expression = caseClause.getExpression()) {
                if (last(ControlFlowNode(__all_data__).find(expression), n, c)) {
                    let (statement = caseClause.getIthStatement(0)) {
                        yield first(ControlFlowNode(__all_data__).find(statement))
                    }
                }
            }
            // n is the last node of statement belongs to CaseClause, successor
            // is the first node of the next statement.
            for (index in int::__undetermined_all__()) {
                let (statement = caseClause.getIthStatement(index)) {
                    if (last(ControlFlowNode(__all_data__).find(statement), n, c)) {
                        let (nextIndex = index + 1) {
                            let (nextStatement = caseClause.getIthStatement(nextIndex)) {
                                yield first(ControlFlowNode(__all_data__).find(nextStatement))
                            }
                        }
                    }
                }
            }
        }
    }
}

fn tryStatementSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // TODO: we just model sequential try-catch-finally control flow for now,
    // need to model exception handling runtime behavior later.
    for (tryStatement in TryStatement(__all_data__)) {
        // n is TryStatement, successor is CatchClause of TryStatement
        if (n.key_eq(tryStatement)) {
            if (isNormalCompletion(c)) {
                let (tryBlockStatement = tryStatement.getTryBlock()) {
                    yield first(tryBlockStatement.to<ControlFlowNode>())
                }
            }
        }
        // n is the last node of try block, successors are first node of
        // CatchClause and finally block
        let (tryBlockStatement = tryStatement.getTryBlock()) {
            if (last(tryBlockStatement.to<ControlFlowNode>(), n, c)) {
                let (catchClause = tryStatement.getCatchClause()) {
                    yield first(catchClause.to<ControlFlowNode>())
                }
                let (finallyBlockStatement = tryStatement.getFinallyBlock()) {
                    yield first(finallyBlockStatement.to<ControlFlowNode>())
                }
            }
        }
    }
}

fn defaultClauseSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // same with CaseClause
    if (isNormalCompletion(c)) {
        for (defaultClause in DefaultClause(__all_data__)) {
            if (n.key_eq(defaultClause)) {
                let (statement = defaultClause.getIthStatement(0)) {
                    yield first(ControlFlowNode(__all_data__).find(statement))
                }
            }
            for (index in int::__undetermined_all__()) {
                let (statement = defaultClause.getIthStatement(index)) {
                    if (last(ControlFlowNode(__all_data__).find(statement), n, c)) {
                        let (nextIndex = index + 1) {
                            let (nextStatement = defaultClause.getIthStatement(nextIndex)) {
                                yield first(ControlFlowNode(__all_data__).find(nextStatement))
                            }
                        }
                    }
                }
            }
        }
    }
}

fn catchClauseSucc(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    // n is CatchClause, successor is the first node of VariableDeclaration
    // if there exists, VariableDeclaration in CatchClause, otherwise successor
    // is the first node of catch block.
    for (catchClause in CatchClause(__all_data__)) {
        if (n.key_eq(catchClause)) {
            if (isNormalCompletion(c)) {
                if (catchClause.hasVariableDeclaration()) {
                    let (variableDeclaration = catchClause.getVariableDeclaration()) {
                        yield first(variableDeclaration.to<ControlFlowNode>())
                    }
                }
                if (!catchClause.hasVariableDeclaration()) {
                    let (blockStatement = catchClause.getBlock()) {
                        yield first(blockStatement.to<ControlFlowNode>())
                    }
                }
            }
        }
        // n is the last node of VariableDeclaration belongs to CatchClause,
        // successor is catch block.
        let (variableDeclaration = catchClause.getVariableDeclaration()) {
            if (last(variableDeclaration.to<ControlFlowNode>(), n, c)) {
                if (isNormalCompletion(c)) {
                    let (blockStatement = catchClause.getBlock()) {
                        yield first(blockStatement.to<ControlFlowNode>())
                    }
                }
            }
        }
        // n is the last node of catch block, successor is the first node of finally block
        // belongs to the same TryStatement.
        for (tryStatement in TryStatement(__all_data__)) {
            let (catchBlockStatement = catchClause.getBlock()) {
                if (last(catchBlockStatement.to<ControlFlowNode>(), n, c)) {
                    if (catchClause = tryStatement.getCatchClause()) {
                        let (finallyBlock = tryStatement.getFinallyBlock()) {
                            yield first(finallyBlock.to<ControlFlowNode>())
                        }
                    }
                }
            }
        }
    }
}

fn succ(n: ControlFlowNode, c: Completion) -> *ControlFlowNode {
    if (isNormalCompletion(c)) {
        // n is topLevel entry node, succ is the first of the top-level's 0th statement
        for (entryNode in CfgEntryNode(__all_data__),
            topLevel in TopLevel(__all_data__)) {
            if (n.key_eq(entryNode)) {
                if (topLevel.key_eq(entryNode.getAstNode())) {
                    let (firstStatement = topLevel.getIthStatement(0)) {
                        yield first(firstStatement.to<ControlFlowNode>())
                    }
                }
            }
        }
    }
    if (isNormalCompletion(c)) {
        for (i in int::__undetermined_all__()) {
            // n is the last of the topLevel's i th statement,
            // succ is the first of the top-level's i+1 th statement
            for (topLevel in TopLevel(__all_data__)) {
                let (statement = topLevel.getIthStatement(i)) {
                    if (last(ControlFlowNode(__all_data__).find(statement), n, c)) {
                        let (nextStatement = topLevel.getIthStatement(i + 1)) {
                            yield first(nextStatement.to<ControlFlowNode>())
                        }
                    }
                }
            }
        }
    }
    for (exitNode in CfgExitNode(__all_data__)) {
        for (topLevel in TopLevel(__all_data__)) {
            if (exitNode.getAstNode().key_eq(topLevel)) {
                if (last(ControlFlowNode(__all_data__).find(topLevel), n, c)) {
                    yield ControlFlowNode(__all_data__).find(exitNode)
                }
            }
        }
    }
    if (isNormalCompletion(c)) {
        for (entryNode in CfgEntryNode(__all_data__),
            enclosingFunction in FunctionLikeDeclaration(__all_data__)) {
            if (n.key_eq(entryNode)) {
                if (enclosingFunction.key_eq(entryNode.getAstNode())) {
                    for (parameter in Parameter(__all_data__)) {
                        if (parameter = enclosingFunction.getIthParameter(0)) {
                            yield first(ControlFlowNode(__all_data__).find(parameter))
                        }
                    }
                    // TODO: body may be an Expression in an ArrowFunction
                    if (!enclosingFunction.hasParameter()) {
                        let (body = enclosingFunction.getBody()) {
                            yield first(ControlFlowNode(__all_data__).find(body))
                        }
                    }
                }
            }
        }
    }
    for (exitNode in CfgExitNode(__all_data__)) {
        for (enclosingFunction in FunctionLikeDeclaration(__all_data__)) {
            if (exitNode.getAstNode().key_eq(enclosingFunction)) {
                let (body = enclosingFunction.getBody()) {
                    if (last(ControlFlowNode(__all_data__).find(body), n, c)) {
                        yield ControlFlowNode(__all_data__).find(exitNode)
                    }
                }
            }
        }
    }


    yield functionLikeDeclarationSucc(n, c)
    yield conditionalExpressionSucc(n, c)
    yield binaryLogicalExpressionSucc(n, c)
    yield ifStatementSucc(n, c)
    yield whileAndDoStatementSucc(n, c)
    yield iterationStatementSucc(n, c)
    yield forStatementSucc(n, c)
    yield enhancedForStatementSucc(n, c)
    yield blockStatementSucc(n, c)
    yield expressionStatementSucc(n, c)
    yield variableStatementSucc(n, c)
    yield withStatementSucc(n, c)
    yield switchStatementSucc(n, c)
    yield caseBlockSucc(n, c)
    yield caseClauseSucc(n, c)
    yield defaultClauseSucc(n, c)
    yield tryStatementSucc(n, c)
    yield catchClauseSucc(n, c)

    yield postOrderNodeSucc(n, c)
    
}

/**
 * Hold if two control flow nodes are in same CFG.
 */
pub fn nodeInSameCFG(cfn1: ControlFlowNode, cfn2: ControlFlowNode) -> bool {
    if (cfn1 = cfn2) {
        return true
    }
    if (cfn1 != cfn2) {
        for (bb1 in BasicBlock(__all_data__),
            bb2 in BasicBlock(__all_data__)) {
            if (bb2 in bb1.getBBInSameCFG() && bb1 = cfn1.getBasicBlock() &&
                bb2 = cfn2.getBasicBlock()) {
                return true
            }
        }
    }
}