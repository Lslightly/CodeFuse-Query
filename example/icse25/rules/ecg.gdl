// script 
use coref::java::*
schema ECGNode extends ElementParent {
    
}

impl ECGNode {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *ECGNode {
        for (tmp in ElementParent(db)) {
            for (m in Method(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Variable(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Expression(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
        }
    }
    
    pub fn getType(self) -> string {
        for (t in string::__undetermined_all__()) {
            for (m in Method(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Method") {
                        return t
                    }
                }
            }
            for (m in LocalVariable(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "LocalVariable") {
                        return t
                    }
                }
            }
            for (m in Parameter(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Parameter") {
                        return t
                    }
                }
            }
            for (m in Field(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Field") {
                        return t
                    }
                }
            }
            for (m in EnumConstant(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "EnumConstant") {
                        return t
                    }
                }
            }
            for (m in Expression(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = m.getType()) {
                        return t
                    }
                }
            }
        }
    }
    
    pub fn getDDNode(self, type: string, direction: string) -> ECGNode {
        for (e1 in ECGNode(__all_data__)) {
            for (e in Parameter(__all_data__),
                c in Method(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        for (auto_tmp1 in c.getParameter()) {
                            if (e = auto_tmp1) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (r in ReturnStatement(__all_data__),
                c in Method(__all_data__),
                e in Expression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getEnclosingCallable())) {
                            if (e = r.getResult()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = e.getEnclosingCallable()) {
                            for (m in Method(__all_data__)) {
                                if (m = e.getMethod()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                            for (f in LombokField(__all_data__)) {
                                if (f = e.getLombokField()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (n in string::__undetermined_all__()) {
                for (e in LombokField(__all_data__),
                    c in CallExpression(__all_data__)) {
                    if (e.key_eq(e1)) {
                        if (self.key_eq(c)) {
                            if (e = c.getLombokField()) {
                                if (!isDirectCall(CallExpression(__all_data__).find(e))) {
                                    if (n = c.getMethodName()) {
                                        if (tmp_0(n)) {
                                            if (direction = "Depended") {
                                                if (type = "DD") {
                                                    return e1
                                                }
                                            }
                                        }
                                        if (!(tmp_0(n))) {
                                            if (direction = "Depends") {
                                                if (type = "DD") {
                                                    return e1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Variable(__all_data__),
                c in CallExpression(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp2 in c.getArguments()) {
                                if (r.key_eq(auto_tmp2)) {
                                    if (e.key_eq(r.getDefinition())) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp3 in c.getArguments()) {
                                if (e.key_eq(auto_tmp3)) {
                                    if (direction = "Depended") {
                                        if (type = "DD") {
                                            return e1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__),
                s in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp4 in c.getAnAncestor()) {
                                if (s.getReference().key_eq(auto_tmp4)) {
                                    for (auto_tmp5 in s.getArguments()) {
                                        if (auto_tmp5.key_eq(e)) {
                                            if (direction = "Depended") {
                                                if (type = "DD") {
                                                    return e1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorDDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (type = "DD") {
                if (e.id = getDDNode(type, direction)) {
                    return e
                }
                if (e.id = getAnAncestorDDNode(__all_data__, __all_data__).getDDNode(type, direction)) {
                    return e
                }
            }
        }
    }
    
    pub fn getCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (self.key_eq(c)) {
                if (type = "CD") {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (self.key_eq(r.getDefinition())) {
                if (c = r.getEnclosingCallable()) {
                    if (type = "CD") {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c)) {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getAnAncestorCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getAnAncestorCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
                if (self.key_eq(r.getDefinition())) {
                    if (c = r.getEnclosingCallable()) {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getAnAncestorCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getAnAncestorCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (e.id = getCDNode(type, direction)) {
                return e
            }
            if (e.id = getDDNode(type, direction)) {
                return e
            }
        }
    }
    
    pub fn getAnAncestorECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            temp in ECGNode(__all_data__)) {
            if (temp = self.getAnAncestorCDNode(__all_data__, __all_data__)) {
                if (e = temp.getECGNode(type, direction)) {
                    return e
                }
            }
        }
    }
    
    
}

schema CallExpression extends Expression {
    
}

impl CallExpression {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *CallExpression {
        for (tmp in Expression(db)) {
            for (m in MethodAccessExpression(db)) {
                if (tmp.key_eq(m)) {
                    yield CallExpression {
                        element_hash_id : tmp.element_hash_id,
                        name : tmp.name,
                        parent_hash_id : tmp.parent_hash_id,
                        index_order : tmp.index_order,
                        location_hash_id : tmp.location_hash_id,
                        printable_text : tmp.printable_text
                    }
                }
            }
            for (m in MethodReferenceExpression(db)) {
                if (tmp.key_eq(m)) {
                    yield CallExpression {
                        element_hash_id : tmp.element_hash_id,
                        name : tmp.name,
                        parent_hash_id : tmp.parent_hash_id,
                        index_order : tmp.index_order,
                        location_hash_id : tmp.location_hash_id,
                        printable_text : tmp.printable_text
                    }
                }
            }
        }
    }
    
    pub fn getMethod(self) -> Method {
        for (m in Method(__all_data__)) {
            for (e in MethodAccessExpression(__all_data__)) {
                if (self.key_eq(e)) {
                    if (m = e.getMethod()) {
                        return m
                    }
                }
            }
            for (e in MethodReferenceExpression(__all_data__)) {
                if (self.key_eq(e)) {
                    if (m = e.getMethod()) {
                        return m
                    }
                }
            }
        }
    }
    
    pub fn getMethodName(self) -> string {
        for (m in string::__undetermined_all__()) {
            for (i in Identifier(__all_data__)) {
                for (e in MethodAccessExpression(__all_data__)) {
                    if (self.key_eq(e)) {
                        if (e.getReference().key_eq(i.getParent())) {
                            if (m = i.getName()) {
                                return m
                            }
                        }
                    }
                }
                for (e in MethodReferenceExpression(__all_data__)) {
                    if (self.key_eq(e)) {
                        if (e.key_eq(i.getParent())) {
                            if (m = i.getName()) {
                                return m
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getCallSite(self) -> ReferenceExpression {
        for (e in ReferenceExpression(__all_data__)) {
            for (m in MethodAccessExpression(__all_data__)) {
                if (self.key_eq(m)) {
                    if (e = m.getCallSite()) {
                        return e
                    }
                }
            }
            for (m in MethodReferenceExpression(__all_data__)) {
                if (self.key_eq(m)) {
                    if (e = m.getReference()) {
                        return e
                    }
                }
            }
        }
    }
    
    pub fn getReference(self) -> ReferenceExpression {
        for (e in ReferenceExpression(__all_data__)) {
            for (m in MethodAccessExpression(__all_data__)) {
                if (self.key_eq(m)) {
                    if (e = m.getReference()) {
                        return e
                    }
                }
            }
            for (m in MethodReferenceExpression(__all_data__)) {
                if (self.key_eq(m)) {
                    if (e = m.getReference()) {
                        return e
                    }
                }
            }
        }
    }
    
    pub fn getCallSiteDefinition(self) -> ClassOrInterface {
        for (c in ClassOrInterface(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (r = self.getCallSite()) {
                if (c.key_eq(r.getDefinition())) {
                    return c
                }
                for (v in Variable(__all_data__)) {
                    if (v.key_eq(r.getDefinition())) {
                        if (v.getType().getQualifiedName() = c.getQualifiedName()) {
                            return c
                        }
                    }
                }
            }
        }
    }
    
    pub fn getLombokField(self) -> LombokField {
        for (f in LombokField(__all_data__)) {
            if (self.getCallSiteDefinition() = f.getParent()) {
                for (auto_tmp1 in f.getLombokMethodName()) {
                    if (auto_tmp1 = self.getMethodName()) {
                        return f
                    }
                }
            }
        }
    }
    
    pub fn getArguments(self) -> *Expression {
        for (e in Expression(__all_data__),
            m in MethodAccessExpression(__all_data__),
            l in ExpressionListExpressionRelation(__all_data__)) {
            if (self.key_eq(m)) {
                if (m.getExpressionList() = l.getExpressionList()) {
                    if (e = l.getExpression()) {
                        yield e
                    }
                    for (auto_tmp1 in e.getAnAncestor()) {
                        if (l.getExpression().key_eq(auto_tmp1)) {
                            yield e
                        }
                    }
                }
            }
        }
    }
    
    
}

schema LombokField extends Field {
    
}

impl LombokField {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *LombokField {
        for (tmp in Field(db)) {
            for (a in Annotation(db)) {
                for (auto_tmp2 in tmp.getAnnotation()) {
                    if (a = auto_tmp2) {
                        if (a.getName() = "Data") {
                            yield LombokField {
                                element_hash_id : tmp.element_hash_id,
                                name : tmp.name,
                                parent_hash_id : tmp.parent_hash_id,
                                printable_text : tmp.printable_text,
                                location_hash_id : tmp.location_hash_id
                            }
                        }
                        if (a.getName() = "Getter") {
                            yield LombokField {
                                element_hash_id : tmp.element_hash_id,
                                name : tmp.name,
                                parent_hash_id : tmp.parent_hash_id,
                                printable_text : tmp.printable_text,
                                location_hash_id : tmp.location_hash_id
                            }
                        }
                        if (a.getName() = "Setter") {
                            yield LombokField {
                                element_hash_id : tmp.element_hash_id,
                                name : tmp.name,
                                parent_hash_id : tmp.parent_hash_id,
                                printable_text : tmp.printable_text,
                                location_hash_id : tmp.location_hash_id
                            }
                        }
                    }
                }
                for (c in ClassOrInterface(db)) {
                    if (c = tmp.getParent()) {
                        for (auto_tmp3 in c.getAnnotation()) {
                            if (a = auto_tmp3) {
                                if (a.getName() = "Data") {
                                    yield LombokField {
                                        element_hash_id : tmp.element_hash_id,
                                        name : tmp.name,
                                        parent_hash_id : tmp.parent_hash_id,
                                        printable_text : tmp.printable_text,
                                        location_hash_id : tmp.location_hash_id
                                    }
                                }
                                if (a.getName() = "Getter") {
                                    yield LombokField {
                                        element_hash_id : tmp.element_hash_id,
                                        name : tmp.name,
                                        parent_hash_id : tmp.parent_hash_id,
                                        printable_text : tmp.printable_text,
                                        location_hash_id : tmp.location_hash_id
                                    }
                                }
                                if (a.getName() = "Setter") {
                                    yield LombokField {
                                        element_hash_id : tmp.element_hash_id,
                                        name : tmp.name,
                                        parent_hash_id : tmp.parent_hash_id,
                                        printable_text : tmp.printable_text,
                                        location_hash_id : tmp.location_hash_id
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getLombokMethodName(self) -> *string {
        for (name in string::__undetermined_all__()) {
            for (l in int::__undetermined_all__(),
                i in int::__undetermined_all__(),
                temp in string::__undetermined_all__(),
                p in string::__undetermined_all__(),
                j in string::__undetermined_all__()) {
                if (temp = self.getName()) {
                    if (i = temp.len()) {
                        if (l = temp.substr(0,1)) {
                            if (p = temp.substr(1,i)) {
                                if (lowerToUpper(l, j)) {
                                    if (name = "set" + j + p) {
                                        yield name
                                    }
                                    if (name = "get" + j + p) {
                                        yield name
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    
}

pub fn isDirectCall(e: CallExpression) -> bool {
    let (java_db = default_java_db()) {
        for (s in ExpressionStatement(java_db)) {
            if (s.key_eq(e.getParent())) {
                return true
            }
        }
    }
}
pub fn getNode(node: int) -> bool {
    [
        {-6062664004747450091},
        {-8976777526123968441},
        {-7423165299222302626}
    ]
}
pub fn temp(a: ECGNode, b: ECGNode, c: ECGNode, edgeType: string, direction: string) -> bool {
    let (java_db = default_java_db()) {
        if (getNode(a)) {
            if (b = a.getAnAncestorCDNode(__all_data__, __all_data__)) {
                if (c = b.getECGNode(edgeType, direction)) {
                    return true
                }
            }
            if (b = a) {
                if (c = b.getECGNode(edgeType, direction)) {
                    return true
                }
            }
        }
    }
}
pub fn real_output(m: ECGNode, nodeType1: string, nodeText1: string, n: ECGNode, nodeType2: string, nodeText2: string, edgeType: string, direction: string) -> bool {
    let (java_db = default_java_db()) {
        for (e in ECGNode(java_db)) {
            if (temp(e, m, n, edgeType, direction)) {
                if (nodeType1 = m.getType()) {
                    if (nodeText1 = m.print()) {
                        if (nodeText2 = n.print()) {
                            if (nodeType2 = n.getType()) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}


fn default_java_db() -> JavaDB {
    return JavaDB::load("coref_java_src.db")
}

fn tmp_0(n: string) -> bool {
    let (java_db = default_java_db()) {
        if (n.matches("get.*")) {
            return true
        }
    }
}

fn main() {
    output(real_output())
}