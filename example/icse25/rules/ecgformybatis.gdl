// script 
use coref::xml::*
schema SqlXmlElement extends XmlElement {
    
}

impl SqlXmlElement {

    @data_constraint
    @inline
    pub fn __all__(db: XmlDB) -> *SqlXmlElement {
        for (tmp in XmlElement(db)) {
            if (tmp.getName() = "sql") {
                yield SqlXmlElement {
                    id : tmp.id,
                    parent_id : tmp.parent_id,
                    index_order : tmp.index_order,
                    location_id : tmp.location_id
                }
            }
        }
    }
    
    pub fn getContent(self) -> string {
        for (n in string::__undetermined_all__()) {
            for (c in XmlCharacter(__all_data__)) {
                if (self.key_eq(c.getBelongedElement())) {
                    if (n = c.getText()) {
                        return n
                    }
                }
            }
        }
    }
    
    
}

schema SqlIncludeElement extends XmlElement {
    
}

impl SqlIncludeElement {

    @data_constraint
    @inline
    pub fn __all__(db: XmlDB) -> *SqlIncludeElement {
        for (tmp in XmlElement(db)) {
            if (tmp.getName() = "include") {
                yield SqlIncludeElement {
                    id : tmp.id,
                    parent_id : tmp.parent_id,
                    index_order : tmp.index_order,
                    location_id : tmp.location_id
                }
            }
        }
    }
    
    
}

schema DalXmlElement extends XmlElement {
    
}

impl DalXmlElement {

    @data_constraint
    @inline
    pub fn __all__(db: XmlDB) -> *DalXmlElement {
        for (tmp in XmlElement(db)) {
            if (tmp.getName() = "select") {
                yield DalXmlElement {
                    id : tmp.id,
                    parent_id : tmp.parent_id,
                    index_order : tmp.index_order,
                    location_id : tmp.location_id
                }
            }
            if (tmp.getName() = "update") {
                yield DalXmlElement {
                    id : tmp.id,
                    parent_id : tmp.parent_id,
                    index_order : tmp.index_order,
                    location_id : tmp.location_id
                }
            }
            if (tmp.getName() = "insert") {
                yield DalXmlElement {
                    id : tmp.id,
                    parent_id : tmp.parent_id,
                    index_order : tmp.index_order,
                    location_id : tmp.location_id
                }
            }
            if (tmp.getName() = "delete") {
                yield DalXmlElement {
                    id : tmp.id,
                    parent_id : tmp.parent_id,
                    index_order : tmp.index_order,
                    location_id : tmp.location_id
                }
            }
        }
    }
    
    pub fn getTableName(self) -> *string {
        for (name in string::__undetermined_all__()) {
            for (temp in string::__undetermined_all__()) {
                for (c in XmlCharacter(__all_data__)) {
                    if (self.key_eq(c.getBelongedElement())) {
                        if (temp = c.getText()) {
                            if (self.getName() = "update") {
                                if (temp.contains("update ")) {
                                    if (name = temp.get_regex_match_result("[\\s\\S]*update[ \\t]+(\\w+)[\\s\\S]*", 1)) {
                                        yield name
                                    }
                                }
                            }
                            if (self.getName() = "insert") {
                                if (temp.contains("insert into ")) {
                                    if (name = temp.get_regex_match_result("[\\s\\S]*insert into[ \\t]+(\\w+)[\\s\\S]*", 1)) {
                                        yield name
                                    }
                                }
                            }
                            if (self.getName() = "delete") {
                                if (temp.contains("delete from ")) {
                                    if (name = temp.get_regex_match_result("[\\s\\S]*delete from[ \\t]+(\\w+)[\\s\\S]*", 1)) {
                                        yield name
                                    }
                                }
                            }
                            if (self.getName() = "select") {
                                if (temp.contains("from ")) {
                                    if (name = temp.get_regex_match_result("[\\s\\S]*from[ \\t]+(\\w+)[\\s\\S]*", 1)) {
                                        yield name
                                    }
                                }
                                if (temp.contains("FROM")) {
                                    for (temp1 in string::__undetermined_all__()) {
                                        if (temp1 = temp.get_regex_match_result("[\\s\\S]*FROM[\\s\\S][ \\t]+(\\w+)[\\s\\S]*", 1)) {
                                            if (tmp_0(temp1)) {
                                                if (name = temp1) {
                                                    yield name
                                                }
                                            }
                                            if (!(tmp_0(temp1))) {
                                                if (name = temp.get_regex_match_result("[\\s\\S]*FROM[ \\t]+(\\w+)[\\s\\S]*", 1)) {
                                                    yield name
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getColumnLists(self) -> string {
        for (c in string::__undetermined_all__()) {
            if (self.getName() = "select") {
                for (i in SqlIncludeElement(__all_data__),
                    x in SqlXmlElement(__all_data__)) {
                    if (self.key_eq(i.getParent())) {
                        if (i.getLocation().getFile() = x.getLocation().getFile()) {
                            if (i.getValueByAttributeName("refid") = x.getValueByAttributeName("id")) {
                                if (c = x.getContent()) {
                                    return c
                                }
                            }
                        }
                    }
                }
                for (temp in string::__undetermined_all__()) {
                    for (x in XmlCharacter(__all_data__)) {
                        if (self.key_eq(x.getBelongedElement())) {
                            if (temp = x.getText()) {
                                if (temp.contains("SELECT")) {
                                    if (c = temp) {
                                        return c
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (self.getName() = "delete") {
                if (c = "") {
                    return c
                }
            }
            if (self.getName() = "insert") {
                if (c = "") {
                    return c
                }
            }
            if (self.getName() = "update") {
                if (c = "") {
                    return c
                }
            }
        }
    }
    
    
}

pub fn real_output(id: string, type: string, table: string, columns: string) -> bool {
    let (xml_db = default_xml_db()) {
        for (d in DalXmlElement(xml_db)) {
            if (id = d.getValueByAttributeName("id")) {
                if (type = d.getValueByAttributeName("parameterType")) {
                    for (auto_tmp1 in d.getTableName()) {
                        if (table = auto_tmp1) {
                            if (columns = d.getColumnLists()) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}


fn default_xml_db() -> XmlDB {
    return XmlDB::load("coref_xml_src.db")
}

fn tmp_0(temp1: string) -> bool {
    let (xml_db = default_xml_db()) {
        if (temp1.len() > 0) {
            return true
        }
    }
}

fn main() {
    output(real_output())
}